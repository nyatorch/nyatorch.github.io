{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"nyatorch's Wiki \u00b6 \u53c2\u8003 Noodlefighter \u7684\u6559\u7a0b\u7167\u846b\u82a6\u753b\u74e2\u642d\u8d77\u6765\u7684 Wiki\uff0c\u7528\u6765\u5f53\u7b14\u8bb0\u672c\u7528\u4e86\u3002\u6709\u5907\u4efd\u9700\u8981\u7684\u6587\u7ae0\u53ef\u80fd\u4e5f\u4f1a\u653e\u5728\u8fd9\u91cc\u3002","title":"nyatorch's Wiki"},{"location":"#nyatorchs-wiki","text":"\u53c2\u8003 Noodlefighter \u7684\u6559\u7a0b\u7167\u846b\u82a6\u753b\u74e2\u642d\u8d77\u6765\u7684 Wiki\uff0c\u7528\u6765\u5f53\u7b14\u8bb0\u672c\u7528\u4e86\u3002\u6709\u5907\u4efd\u9700\u8981\u7684\u6587\u7ae0\u53ef\u80fd\u4e5f\u4f1a\u653e\u5728\u8fd9\u91cc\u3002","title":"nyatorch's Wiki"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%90%83%E7%81%B0%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%80%E8%A7%88%E8%A1%A8/","text":"\u5403\u7070\u5f00\u53d1\u677f\u4e00\u89c8\u8868 \u00b6 \u5f00\u53d1\u677f\u90a3\u4e48\u591a\u6709\u4ec0\u4e48\u7528\uff0c\u5f53\u996d\u5403\uff1f----\u6765\u81ea\u67d0 debian \u7fa4\u7ec4 Arduino Nano \u00b6 \u5b98\u65b9\u7248\u672c \u7535\u8def\u56fe Atmel ATmega328P-MU QFN32 32KB Flash 1KB EEPROM 2KB SRAM \u5916\u7f6e\u6751\u753016M 3213 3\u811a\u65e0\u6e90\u6676\u632f CH340G USB\u8f6c\u4e32\u53e3\u82af\u7247 \u5916\u7f6e12M\u6676\u632f Arduino Uno R3 \u00b6 \u5b98\u65b9\u7248\u672c \u7535\u8def\u56fe Atmel Atmega328p-AU QFP32 32KB Flash 1KB EEPROM 2KB SRAM \u5916\u7f6e16M 49SMD 2\u811a\u8d34\u7247\u65e0\u6e90\u6676\u632f CH340G USB\u8f6c\u4e32\u53e3\u82af\u7247 \u5916\u7f6e12M 49SMD 2\u811a\u8d34\u7247\u65e0\u6e90\u6676\u632f LMV358 SOP8 \u53cc\u8fd0\u653e ASM1117 LDO Beagle Bone Black (\u5e26 Beagle Logic \u6269\u5c55\u677f) \u00b6 \u5b98\u65b9\u7248\u672c \u7535\u8def\u56fe \u591a\u8fbe 5000 \u9875\u7684 \u6280\u672f\u624b\u518c Texas Instruments AM3358 Cortex A8 1Ghz PRU\uff08\u53ef\u7f16\u7a0b\u5b9e\u65f6\u5355\u5143\uff09 Skhynix H5TQ4G3AFR 512M DDR3 kingston KE4CN2H5A 4G EMMC \u7f3a\u5c11 HDMI \u6865 \u6811\u8393\u6d3e Pico \uff082 pcs\uff09 \u00b6 \u5b98\u65b9\u624b\u518c \uff08\u542b\u7535\u8def\u56fe\uff09 Raspberry Pi RP2040 133Mhz \u53cc\u6838 Cortex M0\uff0c\u53ef\u8d85\u9891\u81f3 300Mhz 264K SRAM USB 1.1 \u5916\u7f6e 12M \u6676\u632f 8 \u4e2a PIO\uff08Programmable I/O\uff09\u72b6\u6001\u673a \u677f\u8f7d W25Q16JVUXIQ 16Mbit Flash RT6150B-33GQW DC-DC \u6811\u8393\u6d3e A+ 1.1 256M \u00b6 \u4e70\u6765\u5b66 CS107e \u7684\uff0c\u7ed3\u679c\u6478\u4e86 BCM2835 @700Mhz ARM1176JZF-S K4P26324ED 256M LPDDR2 POP \u5c01\u88c5\uff0c\u8ddf CPU \u8d34\u8d34\u4e86 1 x USB2.0 1 x MicroSD 40pin GPIO HDMI 1 x 3.5mm micro USB\u4f9b\u7535 \u6811\u8393\u6d3e 4b 4GB v1.1 \u7248\u672c \u00b6 bcm2711 \u56db\u6838 Cortex A72 @1.5Ghz \u8bbe\u8ba1\u7f3a\u9677\u7684 TypeC \u4f9b\u7535 \u5343\u5146\u4ee5\u592a\u7f51 2 x USB2.0 2 x USB3.0 2 x MicroHDMI 1 x 3.5mm \u84dd\u7259\u8fde\u63a5\u5728UART\u4e0a \u88c5\u4e86\u5916\u58f3\u6d82\u4e86\u89c4\u5236\uff0c\u522b\u7684\u61d2\u5f97\u770b\u4e86 QMTECH Intel Cyclone IV EP4CE15F23C8N \u6838\u5fc3\u677f \u00b6 15K \u903b\u8f91\u8d44\u6e90 QMTECH Intel Cyclone IV EP4CGX150 \u6838\u5fc3\u677f \u00b6 150K \u903b\u8f91\u8d44\u6e90 \u5408\u5b99 ESP32 C3 \uff083 pcs\uff09 \u00b6 \u4e50\u946b ESP32-C3 \u82af\u7247 32 \u4f4d RISC-V \u5355\u6838\u5904\u7406\u5668\uff0c\u4e3b\u9891\u9ad8\u8fbe 160 MHz CoreMark\u00ae \u5206\u6570\uff1a \u2013 \u5355\u6838 160 MHz\uff1a407.22 CoreMark\uff1b2.55 CoreMark/MHz 384 KB ROM 400 KB SRAM\uff08\u5176\u4e2d 16 KB \u4e13\u7528\u4e8e cache\uff09 8 KB RTC SRAM \u5d4c\u5165\u5f0f flash\uff08\u4e0d\u540c\u578b\u53f7\u6709\u5dee\u5f02\uff0c\u8be6\u89c1\u7ae0\u8282 1 \u4ea7\u54c1\u578b\u53f7\u5bf9\u6bd4\uff09 SPI\u3001Dual SPI\u3001Quad SPI\u3001QPI \u63a5\u53e3\u5916\u63a5\u591a\u4e2aflash \u901a\u8fc7 cache \u52a0\u901f flash \u8bbf\u95ee \u652f\u6301 flash \u5728\u7535\u8def\u7f16\u7a0b (ICP) \u96c6\u6210 2.4G WiFi \u96c6\u6210 Bluetooth 5.0 \u5bf9\u4e8e\u8fd9\u5757\u5f00\u53d1\u677f\uff1a \u5408\u5b99\u4f7f\u7528\u7684\u6676\u5706\u7248\u672c\u4e3a\u4e3a 3\uff0c\u53ef\u4ee5\u4f7f\u7528 Jtag \u8c03\u8bd5\uff08\u9053\u542c\u9014\u8bf4\u5b89\u4fe1\u53ef\u4f7f\u7528\u8fc7\u6676\u5706\u7248\u672c\u4e3a 2 \u7684\uff0c\u65e0\u6cd5\u4f7f\u7528Jtag\uff09 \u5916\u7f6e 40M \u6676\u632f \u65e0\u7247\u4e0a Flash \u7248\u672c\uff0c\u5916\u7f6e MX25L3233F 32MBit Flash \u6c81\u6052 CH343P USB\u8f6c\u4e32\u53e3\u82af\u7247 \u5c01\u88c5\u4e3a SOT23-5 \u7684 3.3V LDO\uff0c\u4e1d\u5370\u4e3a LV2X: \u5c01\u88c5\u4e3a SOT363 \u7684 \u53cc\u4e09\u6781\u7ba1\uff0c\u4e1d\u5370\u4e3a MVS \uff08\u5176\u4e2d S \u4e0e MV \u65b9\u5411\u5782\u76f4\uff09 Type C \u63a5\u53e3 \u4e24\u4e2a\u590d\u4f4d\u6309\u94ae\uff0c2 \u4e2aLED\uff08\u7531\u4e8e\u7528\u4e86 CH343P Jtag \u5f15\u811a\u88ab\u590d\u7528\u4e86\uff0c\u6211\u8bb0\u5f97\u662f\u9700\u8981\u4ece LED \u5904\u5f15\u51fa Jtag \uff09 4\u5c42 PCB\uff0c\u677f\u8f7d\u5929\u7ebf 2 x 16 pin \u6392\u9488\uff08\u8bb0\u5f97\u6392\u9488\u662f\u957f\u7684\u90a3\u7aef\u671d\u4e0a\u710a\u7684\uff0c\u5982\u679c\u671d\u4e0b\u710a\u5c31\u6ca1\u6cd5\u63d2\u5b83\u4eec\u76840.96\u5bf8LCD \u5c4f\u5e55 + \u4e94\u5411\u5f00\u5173\u6a21\u5757\u4e86\uff0c\u6216\u8005\u76f4\u63a5\u7528\u5f39\u7c27\u9488\u5939\u5ea7\u53bb\u5939\u4e5f\u884c\uff09 \u5408\u5b99 Air 105 \u6838\u5fc3\u677f \u00b6 \u5b9e\u9645\u4e0a\u662f\u5146\u8baf\u6052\u8fbe MH1903S Cortex M4F \u5b89\u5168\u6838\uff0c204Mhz \u4e3b\u9891 \u6297\u6545\u969c\u6ce8\u5165\u653b\u51fb\uff08Fault Injection Attack\uff09 \u5168\u901f USB2.0 \u9001\u4e86\u4e00\u4e2a\u6444\u50cf\u5934 \u624b\u518c\u4e0a\u8bf4\u662f Arm SecurCore SC300\uff0c\u4f46\u662f SC300 \u57fa\u4e8e Cortex M3 \u4e14\u4e0d\u53ef\u80fd\u5e26 FPU\uff0cJtag \u8bfb\u51fa\u7684\u4fe1\u606f\u4e5f\u8bc1\u5b9e\u4e86\u5176\u786e\u5b9e\u4e3a Cotex M4 ESP WROOM 32\uff08\u4e0d\u63a8\u8350\u7528\u4e8e\u65b0\u8bbe\u8ba1\uff0cNRND\uff09 \u00b6 \u5b98\u65b9\u624b\u518c \u5185\u7f6e ESP32-D0WDQ6 \u53cc\u6838 \u65e0\u5d4c\u5165\u5f0f Flash ESP32 \u642d\u8f7d\u4f4e\u529f\u8017 Xtensa\u00ae LX6 32-bit \u5355/\u53cc\u6838\u5904\u7406\u5668\uff0c\u5177\u6709\u4ee5\u4e0b\u7279\u6027\uff1a 7 \u7ea7\u6d41\u6c34\u7ebf\u67b6\u6784\uff0c\u652f\u6301\u9ad8\u8fbe 240 MHz \u7684\u65f6\u949f\u9891\u7387\uff08\u9664 ESP32-S0WD \u4e3a 160 MHz\uff09 16-bit/24-bit \u6307\u4ee4\u96c6\u63d0\u4f9b\u9ad8\u4ee3\u7801\u5bc6\u5ea6 \u652f\u6301\u6d6e\u70b9\u5355\u5143 (FPU) \u652f\u6301 DSP \u6307\u4ee4\uff0c\u4f8b\u5982 32-bit \u4e58\u6cd5\u5668\u300132-bit \u9664\u6cd5\u5668\u548c 40-bit \u7d2f\u52a0\u4e58\u6cd5\u5668 (MAC) \u652f\u6301\u6765\u81ea\u7ea6 70 \u4e2a\u4e2d\u65ad\u6e90\u7684 32 \u4e2a\u4e2d\u65ad\u5411\u91cf \u5355/\u53cc\u6838\u5904\u7406\u5668\u63a5\u53e3\u5305\u62ec\uff1a Xtensa RAM/ROM \u6307\u4ee4\u548c\u6570\u636e\u63a5\u53e3 \u7528\u4e8e\u5feb\u901f\u8bbf\u95ee\u5916\u90e8\u5bc4\u5b58\u5668\u7684 Xtensa \u672c\u5730\u5b58\u50a8\u63a5\u53e3 \u5177\u6709\u5185\u5916\u4e2d\u65ad\u6e90\u7684\u4e2d\u65ad\u63a5\u53e3 \u7528\u4e8e\u8c03\u8bd5\u7684 JTAG \u63a5\u53e3 ESP32 \u7247\u4e0a\u5b58\u50a8\u5305\u62ec\uff1a 448 KB \u7684 ROM\uff0c\u7528\u4e8e\u7a0b\u5e8f\u542f\u52a8\u548c\u5185\u6838\u529f\u80fd\u8c03\u7528 \u7528\u4e8e\u6570\u636e\u548c\u6307\u4ee4\u5b58\u50a8\u7684 520 KB \u7247\u4e0a SRAM RTC \u5feb\u901f\u5b58\u50a8\u5668\uff0c\u4e3a 8 KB \u7684 SRAM\uff0c\u53ef\u4ee5\u5728 Deep-sleep \u6a21\u5f0f\u4e0b RTC \u542f\u52a8\u65f6\u7528\u4e8e\u6570\u636e\u5b58\u50a8\u4ee5\u53ca\u88ab\u4e3b CPU \u8bbf\u95ee RTC \u6162\u901f\u5b58\u50a8\u5668\uff0c\u4e3a 8 KB \u7684 SRAM\uff0c\u53ef\u4ee5\u5728 Deep-sleep \u6a21\u5f0f\u4e0b\u88ab\u534f\u5904\u7406\u5668\u8bbf\u95ee 1 Kbit \u7684 eFuse\uff0c\u5176\u4e2d 256 bit \u4e3a\u7cfb\u7edf\u4e13\u7528\uff08MAC \u5730\u5740\u548c\u82af\u7247\u8bbe\u7f6e\uff09; \u5176\u4f59 768 bit \u4fdd\u7559\u7ed9\u7528\u6237\u7a0b\u5e8f, \u8fd9\u4e9b\u7a0b\u5e8f\u5305\u62ec flash \u52a0\u5bc6\u548c\u82af\u7247 ID \u5d4c\u5165\u5f0f flash\uff08ESP32 \u82af\u7247\u662f\u5426\u6709\u5d4c\u5165\u5f0f flash\uff0c\u4ee5\u53ca\u5d4c\u5165\u5f0f flash \u7684\u5927\u5c0f\u4e0e\u82af\u7247\u578b\u53f7\u6709\u5173\u3002\uff09 \u96c6\u6210 2.4G WiFi \u96c6\u6210 Bluetooth 4.2 STM32F401CCU6 \u6838\u5fc3\u677f \u00b6 STM32F401CCU6 QFN48 84Mhz Cortex M4F 64KB SRAM 256KB Flash \u5168\u901f USB2.0 \u8054\u76db\u5fb7 W806 \u6838\u5fc3\u677f \u00b6 \u8054\u76db\u5fb7 W800 \u96c6\u6210\u5e73\u5934\u54e5 XT804 CPU \u5904\u7406\u5668 \u5e73\u5934\u54e5\u534a\u5bfc\u4f53 C-sky V2 \u6307\u4ee4\u96c6 \u6700\u9ad8\u5de5\u4f5c\u9891\u7387240MHz \u5185\u7f6eDSP\u3001\u6d6e\u70b9\u8fd0\u7b97\u5355\u5143\u4e0eTEE\u5b89\u5168\u5f15\u64ce STC8A8K64S4A12 \u6838\u5fc3\u677f \u00b6 \u770b\u770b\u5c31\u597d STC8A8K64S4A12 QFP64 1T \u589e\u5f3a\u578b8051 SRAM 128 \u5b57\u8282\u5185\u90e8\u76f4\u63a5\u8bbf\u95ee RAM\uff08DATA\uff09 128 \u5b57\u8282\u5185\u90e8\u95f4\u63a5\u8bbf\u95ee RAM\uff08IDATA\uff09 8192 \u5b57\u8282\u5185\u90e8\u6269\u5c55 RAM\uff08\u5185\u90e8 XDATA\uff09 \u5916\u90e8\u6700\u5927\u53ef\u6269\u5c55 64K \u5b57\u8282 RAM\uff08\u5916\u90e8 XDATA\uff09 Flash \u5b58\u50a8\u5668 \u6700\u5927 64K \u5b57\u8282 FLASH \u7a7a\u95f4\uff0c\u7528\u4e8e\u5b58\u50a8\u7528\u6237\u4ee3\u7801 \u652f\u6301\u7528\u6237\u914d\u7f6e EEPROM \u5927\u5c0f\uff0c512 \u5b57\u8282\u5355\u9875\u64e6\u9664\uff0c\u64e6\u5199\u6b21\u6570\u53ef\u8fbe 10 \u4e07\u6b21\u4ee5\u4e0a \u652f\u6301\u5728\u7cfb\u7edf\u7f16\u7a0b\u65b9\u5f0f\uff08ISP\uff09\u66f4\u65b0\u7528\u6237\u5e94\u7528\u7a0b\u5e8f\uff0c\u65e0\u9700\u4e13\u7528\u7f16\u7a0b\u5668 \u652f\u6301\u5355\u82af\u7247\u4eff\u771f\uff0c\u65e0\u9700\u4e13\u7528\u4eff\u771f\u5668\uff0c\u7406\u8bba\u65ad\u70b9\u4e2a\u6570\u65e0\u9650\u5236 NRF52840 USB dongle \u00b6 \u597d\u50cf\u6ca1\u5e26\u56de\u6765\uff0c\u5e0c\u671b\u522b\u4e22\u4e86\uff0c\u6211\u5b66\u84dd\u7259\u7684\u5e0c\u671bw","title":"\u5403\u7070\u5f00\u53d1\u677f\u4e00\u89c8\u8868"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%90%83%E7%81%B0%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%80%E8%A7%88%E8%A1%A8/#_1","text":"\u5f00\u53d1\u677f\u90a3\u4e48\u591a\u6709\u4ec0\u4e48\u7528\uff0c\u5f53\u996d\u5403\uff1f----\u6765\u81ea\u67d0 debian \u7fa4\u7ec4","title":"\u5403\u7070\u5f00\u53d1\u677f\u4e00\u89c8\u8868"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%90%83%E7%81%B0%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%80%E8%A7%88%E8%A1%A8/#arduino-nano","text":"\u5b98\u65b9\u7248\u672c \u7535\u8def\u56fe Atmel ATmega328P-MU QFN32 32KB Flash 1KB EEPROM 2KB SRAM \u5916\u7f6e\u6751\u753016M 3213 3\u811a\u65e0\u6e90\u6676\u632f CH340G USB\u8f6c\u4e32\u53e3\u82af\u7247 \u5916\u7f6e12M\u6676\u632f","title":"Arduino Nano"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%90%83%E7%81%B0%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%80%E8%A7%88%E8%A1%A8/#arduino-uno-r3","text":"\u5b98\u65b9\u7248\u672c \u7535\u8def\u56fe Atmel Atmega328p-AU QFP32 32KB Flash 1KB EEPROM 2KB SRAM \u5916\u7f6e16M 49SMD 2\u811a\u8d34\u7247\u65e0\u6e90\u6676\u632f CH340G USB\u8f6c\u4e32\u53e3\u82af\u7247 \u5916\u7f6e12M 49SMD 2\u811a\u8d34\u7247\u65e0\u6e90\u6676\u632f LMV358 SOP8 \u53cc\u8fd0\u653e ASM1117 LDO","title":"Arduino Uno R3"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%90%83%E7%81%B0%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%80%E8%A7%88%E8%A1%A8/#beagle-bone-black-beagle-logic","text":"\u5b98\u65b9\u7248\u672c \u7535\u8def\u56fe \u591a\u8fbe 5000 \u9875\u7684 \u6280\u672f\u624b\u518c Texas Instruments AM3358 Cortex A8 1Ghz PRU\uff08\u53ef\u7f16\u7a0b\u5b9e\u65f6\u5355\u5143\uff09 Skhynix H5TQ4G3AFR 512M DDR3 kingston KE4CN2H5A 4G EMMC \u7f3a\u5c11 HDMI \u6865","title":"Beagle Bone Black (\u5e26 Beagle Logic \u6269\u5c55\u677f)"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%90%83%E7%81%B0%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%80%E8%A7%88%E8%A1%A8/#pico-2-pcs","text":"\u5b98\u65b9\u624b\u518c \uff08\u542b\u7535\u8def\u56fe\uff09 Raspberry Pi RP2040 133Mhz \u53cc\u6838 Cortex M0\uff0c\u53ef\u8d85\u9891\u81f3 300Mhz 264K SRAM USB 1.1 \u5916\u7f6e 12M \u6676\u632f 8 \u4e2a PIO\uff08Programmable I/O\uff09\u72b6\u6001\u673a \u677f\u8f7d W25Q16JVUXIQ 16Mbit Flash RT6150B-33GQW DC-DC","title":"\u6811\u8393\u6d3e Pico \uff082 pcs\uff09"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%90%83%E7%81%B0%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%80%E8%A7%88%E8%A1%A8/#a-11-256m","text":"\u4e70\u6765\u5b66 CS107e \u7684\uff0c\u7ed3\u679c\u6478\u4e86 BCM2835 @700Mhz ARM1176JZF-S K4P26324ED 256M LPDDR2 POP \u5c01\u88c5\uff0c\u8ddf CPU \u8d34\u8d34\u4e86 1 x USB2.0 1 x MicroSD 40pin GPIO HDMI 1 x 3.5mm micro USB\u4f9b\u7535","title":"\u6811\u8393\u6d3e A+ 1.1 256M"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%90%83%E7%81%B0%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%80%E8%A7%88%E8%A1%A8/#4b-4gb-v11","text":"bcm2711 \u56db\u6838 Cortex A72 @1.5Ghz \u8bbe\u8ba1\u7f3a\u9677\u7684 TypeC \u4f9b\u7535 \u5343\u5146\u4ee5\u592a\u7f51 2 x USB2.0 2 x USB3.0 2 x MicroHDMI 1 x 3.5mm \u84dd\u7259\u8fde\u63a5\u5728UART\u4e0a \u88c5\u4e86\u5916\u58f3\u6d82\u4e86\u89c4\u5236\uff0c\u522b\u7684\u61d2\u5f97\u770b\u4e86","title":"\u6811\u8393\u6d3e 4b 4GB v1.1 \u7248\u672c"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%90%83%E7%81%B0%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%80%E8%A7%88%E8%A1%A8/#qmtech-intel-cyclone-iv-ep4ce15f23c8n","text":"15K \u903b\u8f91\u8d44\u6e90","title":"QMTECH Intel Cyclone IV EP4CE15F23C8N \u6838\u5fc3\u677f"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%90%83%E7%81%B0%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%80%E8%A7%88%E8%A1%A8/#qmtech-intel-cyclone-iv-ep4cgx150","text":"150K \u903b\u8f91\u8d44\u6e90","title":"QMTECH Intel Cyclone IV EP4CGX150 \u6838\u5fc3\u677f"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%90%83%E7%81%B0%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%80%E8%A7%88%E8%A1%A8/#esp32-c3-3-pcs","text":"\u4e50\u946b ESP32-C3 \u82af\u7247 32 \u4f4d RISC-V \u5355\u6838\u5904\u7406\u5668\uff0c\u4e3b\u9891\u9ad8\u8fbe 160 MHz CoreMark\u00ae \u5206\u6570\uff1a \u2013 \u5355\u6838 160 MHz\uff1a407.22 CoreMark\uff1b2.55 CoreMark/MHz 384 KB ROM 400 KB SRAM\uff08\u5176\u4e2d 16 KB \u4e13\u7528\u4e8e cache\uff09 8 KB RTC SRAM \u5d4c\u5165\u5f0f flash\uff08\u4e0d\u540c\u578b\u53f7\u6709\u5dee\u5f02\uff0c\u8be6\u89c1\u7ae0\u8282 1 \u4ea7\u54c1\u578b\u53f7\u5bf9\u6bd4\uff09 SPI\u3001Dual SPI\u3001Quad SPI\u3001QPI \u63a5\u53e3\u5916\u63a5\u591a\u4e2aflash \u901a\u8fc7 cache \u52a0\u901f flash \u8bbf\u95ee \u652f\u6301 flash \u5728\u7535\u8def\u7f16\u7a0b (ICP) \u96c6\u6210 2.4G WiFi \u96c6\u6210 Bluetooth 5.0 \u5bf9\u4e8e\u8fd9\u5757\u5f00\u53d1\u677f\uff1a \u5408\u5b99\u4f7f\u7528\u7684\u6676\u5706\u7248\u672c\u4e3a\u4e3a 3\uff0c\u53ef\u4ee5\u4f7f\u7528 Jtag \u8c03\u8bd5\uff08\u9053\u542c\u9014\u8bf4\u5b89\u4fe1\u53ef\u4f7f\u7528\u8fc7\u6676\u5706\u7248\u672c\u4e3a 2 \u7684\uff0c\u65e0\u6cd5\u4f7f\u7528Jtag\uff09 \u5916\u7f6e 40M \u6676\u632f \u65e0\u7247\u4e0a Flash \u7248\u672c\uff0c\u5916\u7f6e MX25L3233F 32MBit Flash \u6c81\u6052 CH343P USB\u8f6c\u4e32\u53e3\u82af\u7247 \u5c01\u88c5\u4e3a SOT23-5 \u7684 3.3V LDO\uff0c\u4e1d\u5370\u4e3a LV2X: \u5c01\u88c5\u4e3a SOT363 \u7684 \u53cc\u4e09\u6781\u7ba1\uff0c\u4e1d\u5370\u4e3a MVS \uff08\u5176\u4e2d S \u4e0e MV \u65b9\u5411\u5782\u76f4\uff09 Type C \u63a5\u53e3 \u4e24\u4e2a\u590d\u4f4d\u6309\u94ae\uff0c2 \u4e2aLED\uff08\u7531\u4e8e\u7528\u4e86 CH343P Jtag \u5f15\u811a\u88ab\u590d\u7528\u4e86\uff0c\u6211\u8bb0\u5f97\u662f\u9700\u8981\u4ece LED \u5904\u5f15\u51fa Jtag \uff09 4\u5c42 PCB\uff0c\u677f\u8f7d\u5929\u7ebf 2 x 16 pin \u6392\u9488\uff08\u8bb0\u5f97\u6392\u9488\u662f\u957f\u7684\u90a3\u7aef\u671d\u4e0a\u710a\u7684\uff0c\u5982\u679c\u671d\u4e0b\u710a\u5c31\u6ca1\u6cd5\u63d2\u5b83\u4eec\u76840.96\u5bf8LCD \u5c4f\u5e55 + \u4e94\u5411\u5f00\u5173\u6a21\u5757\u4e86\uff0c\u6216\u8005\u76f4\u63a5\u7528\u5f39\u7c27\u9488\u5939\u5ea7\u53bb\u5939\u4e5f\u884c\uff09","title":"\u5408\u5b99 ESP32 C3 \uff083 pcs\uff09"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%90%83%E7%81%B0%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%80%E8%A7%88%E8%A1%A8/#air-105","text":"\u5b9e\u9645\u4e0a\u662f\u5146\u8baf\u6052\u8fbe MH1903S Cortex M4F \u5b89\u5168\u6838\uff0c204Mhz \u4e3b\u9891 \u6297\u6545\u969c\u6ce8\u5165\u653b\u51fb\uff08Fault Injection Attack\uff09 \u5168\u901f USB2.0 \u9001\u4e86\u4e00\u4e2a\u6444\u50cf\u5934 \u624b\u518c\u4e0a\u8bf4\u662f Arm SecurCore SC300\uff0c\u4f46\u662f SC300 \u57fa\u4e8e Cortex M3 \u4e14\u4e0d\u53ef\u80fd\u5e26 FPU\uff0cJtag \u8bfb\u51fa\u7684\u4fe1\u606f\u4e5f\u8bc1\u5b9e\u4e86\u5176\u786e\u5b9e\u4e3a Cotex M4","title":"\u5408\u5b99 Air 105 \u6838\u5fc3\u677f"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%90%83%E7%81%B0%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%80%E8%A7%88%E8%A1%A8/#esp-wroom-32nrnd","text":"\u5b98\u65b9\u624b\u518c \u5185\u7f6e ESP32-D0WDQ6 \u53cc\u6838 \u65e0\u5d4c\u5165\u5f0f Flash ESP32 \u642d\u8f7d\u4f4e\u529f\u8017 Xtensa\u00ae LX6 32-bit \u5355/\u53cc\u6838\u5904\u7406\u5668\uff0c\u5177\u6709\u4ee5\u4e0b\u7279\u6027\uff1a 7 \u7ea7\u6d41\u6c34\u7ebf\u67b6\u6784\uff0c\u652f\u6301\u9ad8\u8fbe 240 MHz \u7684\u65f6\u949f\u9891\u7387\uff08\u9664 ESP32-S0WD \u4e3a 160 MHz\uff09 16-bit/24-bit \u6307\u4ee4\u96c6\u63d0\u4f9b\u9ad8\u4ee3\u7801\u5bc6\u5ea6 \u652f\u6301\u6d6e\u70b9\u5355\u5143 (FPU) \u652f\u6301 DSP \u6307\u4ee4\uff0c\u4f8b\u5982 32-bit \u4e58\u6cd5\u5668\u300132-bit \u9664\u6cd5\u5668\u548c 40-bit \u7d2f\u52a0\u4e58\u6cd5\u5668 (MAC) \u652f\u6301\u6765\u81ea\u7ea6 70 \u4e2a\u4e2d\u65ad\u6e90\u7684 32 \u4e2a\u4e2d\u65ad\u5411\u91cf \u5355/\u53cc\u6838\u5904\u7406\u5668\u63a5\u53e3\u5305\u62ec\uff1a Xtensa RAM/ROM \u6307\u4ee4\u548c\u6570\u636e\u63a5\u53e3 \u7528\u4e8e\u5feb\u901f\u8bbf\u95ee\u5916\u90e8\u5bc4\u5b58\u5668\u7684 Xtensa \u672c\u5730\u5b58\u50a8\u63a5\u53e3 \u5177\u6709\u5185\u5916\u4e2d\u65ad\u6e90\u7684\u4e2d\u65ad\u63a5\u53e3 \u7528\u4e8e\u8c03\u8bd5\u7684 JTAG \u63a5\u53e3 ESP32 \u7247\u4e0a\u5b58\u50a8\u5305\u62ec\uff1a 448 KB \u7684 ROM\uff0c\u7528\u4e8e\u7a0b\u5e8f\u542f\u52a8\u548c\u5185\u6838\u529f\u80fd\u8c03\u7528 \u7528\u4e8e\u6570\u636e\u548c\u6307\u4ee4\u5b58\u50a8\u7684 520 KB \u7247\u4e0a SRAM RTC \u5feb\u901f\u5b58\u50a8\u5668\uff0c\u4e3a 8 KB \u7684 SRAM\uff0c\u53ef\u4ee5\u5728 Deep-sleep \u6a21\u5f0f\u4e0b RTC \u542f\u52a8\u65f6\u7528\u4e8e\u6570\u636e\u5b58\u50a8\u4ee5\u53ca\u88ab\u4e3b CPU \u8bbf\u95ee RTC \u6162\u901f\u5b58\u50a8\u5668\uff0c\u4e3a 8 KB \u7684 SRAM\uff0c\u53ef\u4ee5\u5728 Deep-sleep \u6a21\u5f0f\u4e0b\u88ab\u534f\u5904\u7406\u5668\u8bbf\u95ee 1 Kbit \u7684 eFuse\uff0c\u5176\u4e2d 256 bit \u4e3a\u7cfb\u7edf\u4e13\u7528\uff08MAC \u5730\u5740\u548c\u82af\u7247\u8bbe\u7f6e\uff09; \u5176\u4f59 768 bit \u4fdd\u7559\u7ed9\u7528\u6237\u7a0b\u5e8f, \u8fd9\u4e9b\u7a0b\u5e8f\u5305\u62ec flash \u52a0\u5bc6\u548c\u82af\u7247 ID \u5d4c\u5165\u5f0f flash\uff08ESP32 \u82af\u7247\u662f\u5426\u6709\u5d4c\u5165\u5f0f flash\uff0c\u4ee5\u53ca\u5d4c\u5165\u5f0f flash \u7684\u5927\u5c0f\u4e0e\u82af\u7247\u578b\u53f7\u6709\u5173\u3002\uff09 \u96c6\u6210 2.4G WiFi \u96c6\u6210 Bluetooth 4.2","title":"ESP WROOM 32\uff08\u4e0d\u63a8\u8350\u7528\u4e8e\u65b0\u8bbe\u8ba1\uff0cNRND\uff09"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%90%83%E7%81%B0%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%80%E8%A7%88%E8%A1%A8/#stm32f401ccu6","text":"STM32F401CCU6 QFN48 84Mhz Cortex M4F 64KB SRAM 256KB Flash \u5168\u901f USB2.0","title":"STM32F401CCU6 \u6838\u5fc3\u677f"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%90%83%E7%81%B0%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%80%E8%A7%88%E8%A1%A8/#w806","text":"\u8054\u76db\u5fb7 W800 \u96c6\u6210\u5e73\u5934\u54e5 XT804 CPU \u5904\u7406\u5668 \u5e73\u5934\u54e5\u534a\u5bfc\u4f53 C-sky V2 \u6307\u4ee4\u96c6 \u6700\u9ad8\u5de5\u4f5c\u9891\u7387240MHz \u5185\u7f6eDSP\u3001\u6d6e\u70b9\u8fd0\u7b97\u5355\u5143\u4e0eTEE\u5b89\u5168\u5f15\u64ce","title":"\u8054\u76db\u5fb7 W806 \u6838\u5fc3\u677f"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%90%83%E7%81%B0%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%80%E8%A7%88%E8%A1%A8/#stc8a8k64s4a12","text":"\u770b\u770b\u5c31\u597d STC8A8K64S4A12 QFP64 1T \u589e\u5f3a\u578b8051 SRAM 128 \u5b57\u8282\u5185\u90e8\u76f4\u63a5\u8bbf\u95ee RAM\uff08DATA\uff09 128 \u5b57\u8282\u5185\u90e8\u95f4\u63a5\u8bbf\u95ee RAM\uff08IDATA\uff09 8192 \u5b57\u8282\u5185\u90e8\u6269\u5c55 RAM\uff08\u5185\u90e8 XDATA\uff09 \u5916\u90e8\u6700\u5927\u53ef\u6269\u5c55 64K \u5b57\u8282 RAM\uff08\u5916\u90e8 XDATA\uff09 Flash \u5b58\u50a8\u5668 \u6700\u5927 64K \u5b57\u8282 FLASH \u7a7a\u95f4\uff0c\u7528\u4e8e\u5b58\u50a8\u7528\u6237\u4ee3\u7801 \u652f\u6301\u7528\u6237\u914d\u7f6e EEPROM \u5927\u5c0f\uff0c512 \u5b57\u8282\u5355\u9875\u64e6\u9664\uff0c\u64e6\u5199\u6b21\u6570\u53ef\u8fbe 10 \u4e07\u6b21\u4ee5\u4e0a \u652f\u6301\u5728\u7cfb\u7edf\u7f16\u7a0b\u65b9\u5f0f\uff08ISP\uff09\u66f4\u65b0\u7528\u6237\u5e94\u7528\u7a0b\u5e8f\uff0c\u65e0\u9700\u4e13\u7528\u7f16\u7a0b\u5668 \u652f\u6301\u5355\u82af\u7247\u4eff\u771f\uff0c\u65e0\u9700\u4e13\u7528\u4eff\u771f\u5668\uff0c\u7406\u8bba\u65ad\u70b9\u4e2a\u6570\u65e0\u9650\u5236","title":"STC8A8K64S4A12 \u6838\u5fc3\u677f"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%90%83%E7%81%B0%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%80%E8%A7%88%E8%A1%A8/#nrf52840-usb-dongle","text":"\u597d\u50cf\u6ca1\u5e26\u56de\u6765\uff0c\u5e0c\u671b\u522b\u4e22\u4e86\uff0c\u6211\u5b66\u84dd\u7259\u7684\u5e0c\u671bw","title":"NRF52840 USB dongle"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/PCB%20Layout/AudioJack/","text":"\u97f3\u9891\u63d2\u5ea7\u7684\u6b63\u786e\u63a5\u6cd5 \u00b6 \u5c01\u88c5\u56fe\u600e\u4e48\u63a5 \u00b6 \u53c2\u8003 CUI Devices \u7684\u6559\u7a0b \u611f\u89c9\u97f3\u9891\u63d2\u5ea7\u7b97\u662f\u76f8\u5bf9\u6bd4\u8f83\u62bd\u8c61\u7684\uff08\u4e3b\u8981\u662f\u6211\u7b28 \u5e38\u5f00\u548c\u5e38\u95ed\u5f00\u5173\u7684\u8f6c\u6362\uff08\u9002\u7528\u4e8e\u97f3\u9891\u63d2\u5b54\u68c0\u6d4b\uff09 \u00b6 \u53c2\u8003 TS3A227E EVM User's Guide","title":"\u97f3\u9891\u63d2\u5ea7\u7684\u6b63\u786e\u63a5\u6cd5"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/PCB%20Layout/AudioJack/#_1","text":"","title":"\u97f3\u9891\u63d2\u5ea7\u7684\u6b63\u786e\u63a5\u6cd5"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/PCB%20Layout/AudioJack/#_2","text":"\u53c2\u8003 CUI Devices \u7684\u6559\u7a0b \u611f\u89c9\u97f3\u9891\u63d2\u5ea7\u7b97\u662f\u76f8\u5bf9\u6bd4\u8f83\u62bd\u8c61\u7684\uff08\u4e3b\u8981\u662f\u6211\u7b28","title":"\u5c01\u88c5\u56fe\u600e\u4e48\u63a5"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/PCB%20Layout/AudioJack/#_3","text":"\u53c2\u8003 TS3A227E EVM User's Guide","title":"\u5e38\u5f00\u548c\u5e38\u95ed\u5f00\u5173\u7684\u8f6c\u6362\uff08\u9002\u7528\u4e8e\u97f3\u9891\u63d2\u5b54\u68c0\u6d4b\uff09"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/PCB%20Layout/KiCad/","text":"KiCad \u00b6 KiCad (/\u02c8ki\u02d0\u02cck\u00e6d/ KEE-kad) \u662f\u7528\u4e8e PCB \u8bbe\u8ba1\u7684[\u81ea\u7531\u8f6f\u4ef6]\uff08 https://www.gnu.org/philosophy/free-sw.zh-cn.html \uff09 \u4f5c\u4e3a\u5f00\u6e90\u5de5\u5177\uff0c\u5728\u56fd\u5916\u7684\u5f00\u6e90\u786c\u4ef6\u9879\u76ee\u4e2d\u4f7f\u7528\u5e7f\u6cdb \u5176\u529f\u80fd\u5b8c\u5168\u53ef\u4ee5\u6ee1\u8db3\u4e1a\u4f59\u7535\u5b50\u7231\u597d\u8005\u7684\u8981\u6c42\uff0c\u4e14\u81ea\u7531\u8f6f\u4ef6\u65e0\u9700\u62c5\u5fc3\u8d39\u7528\u95ee\u9898 \u89c6\u9891\u6559\u7a0b \u00b6 KiCad-9\u5206\u949f\u901f\u6210\u7cfb\u5217","title":"KiCad"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/PCB%20Layout/KiCad/#kicad","text":"KiCad (/\u02c8ki\u02d0\u02cck\u00e6d/ KEE-kad) \u662f\u7528\u4e8e PCB \u8bbe\u8ba1\u7684[\u81ea\u7531\u8f6f\u4ef6]\uff08 https://www.gnu.org/philosophy/free-sw.zh-cn.html \uff09 \u4f5c\u4e3a\u5f00\u6e90\u5de5\u5177\uff0c\u5728\u56fd\u5916\u7684\u5f00\u6e90\u786c\u4ef6\u9879\u76ee\u4e2d\u4f7f\u7528\u5e7f\u6cdb \u5176\u529f\u80fd\u5b8c\u5168\u53ef\u4ee5\u6ee1\u8db3\u4e1a\u4f59\u7535\u5b50\u7231\u597d\u8005\u7684\u8981\u6c42\uff0c\u4e14\u81ea\u7531\u8f6f\u4ef6\u65e0\u9700\u62c5\u5fc3\u8d39\u7528\u95ee\u9898","title":"KiCad"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/PCB%20Layout/KiCad/#_1","text":"KiCad-9\u5206\u949f\u901f\u6210\u7cfb\u5217","title":"\u89c6\u9891\u6559\u7a0b"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/FPGA/Verilog/","text":"Verilog \u00b6 \u53c2\u8003 USTC Vlab Verilog OJ","title":"Verilog"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/FPGA/Verilog/#verilog","text":"\u53c2\u8003 USTC Vlab Verilog OJ","title":"Verilog"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/8051/","text":"8051 \u7b14\u8bb0 \u00b6 \u90fd 2022 \u5e74\u4e86\uff0c \u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u8fd8\u8981\u5b66\u4e6080\u5e74\u4ee3\u7684\u5355\u7247\u673a \uff0c\u60b2 \u4ec0\u4e48\u662f 8051 \u00b6 Intel MCS-51 \uff0c\u4e5f\u5c31\u662f\u901a\u5e38\u8bf4\u7684 8051\uff08\u516b\u96f6\u4e94\u4e00\uff0ceight-oh-five-one\uff09\uff0c\u662f Intel \u5728\u4e0a\u4e16\u7eaa80\u5e74\u4ee3\u5f00\u53d1\u7684\u5355\u82af\u7247\u5fae\u63a7\u5236\u5668\u7cfb\u5217\uff0c \u662f\u54c8\u4f5b\u7ed3\u6784\uff08\u7a0b\u5e8f\u548c\u6570\u636e\u5b58\u50a8\u5668\u5206\u79bb\uff09\uff0c\u590d\u6742\u6307\u4ee4\u96c6\u7684 8 \u4f4d\u5fae\u63a7\u5236\u5668\u3002 Intel \u5df2\u4e8e 2007\u5e74\u505c\u4ea7 MCS-51 \u7cfb\u5217\u4ea7\u54c1\uff0c\u76ee\u524d\u5e02\u9762\u4e0a\u7684 51 \u5355\u7247\u673a\u4e3b\u8981\u6765\u81ea\u5176\u4ed6\u5382\u5546\u7684\u589e\u5f3a\u578b8051\u4ea7\u54c1\uff0c\u662f8051\u7684\u884d\u751f\u7248\u672c\uff0cIntel\u5c06 8051 \u5355\u7247\u673a\u5185\u6838\u6388\u6743\u7ed9\u5f88\u591a\u534a\u5bfc\u4f53\u4ea7\u751f\uff0c\u4f7f\u5176\u53ef\u4ee5\u751f\u4ea7 8051 \u7684\u884d\u751f\u4ea7\u54c1\uff0c\u76ee\u524d\u56fd\u5185\u4f7f\u7528\u6700\u591a\u7684\u884d\u751f\u82af\u7247\u5e94\u8be5\u662f STC \u7684\u589e\u5f3a\u578b 8051 \u884d\u751f\u82af\u7247 \u00b6 8051 \u7684\u7279\u70b9 \u00b6 \u53ef\u4ee5\u505a\u5230\u6781\u81f4\u7684\u5c0f\u4f53\u79ef\uff1a\u6bd4\u5982 DFN-8 \u4ef7\u683c\u4fbf\u5b9c \u90e8\u5206\u6865\u63a5\u82af\u7247\u4e4b\u7c7b\u7684\u4e1c\u897f\u53ef\u80fd\u4f1a\u585e\u4e2a 8051 \u6838\u8fdb\u53bb 8051 \u7684\u7f3a\u70b9 \u00b6 GitHub \u4e0a\u4e00\u4e2a \u8ba9 8051 \u6a21\u62df RISC32IM \u6307\u4ee4\u96c6\u7684\u9879\u76ee \u6709\u63d0\u53ca: 8 \u4f4d\u5bc4\u5b58\u5668\uff0cALU \u548c\u6570\u636e\u603b\u7ebf 16 \u4f4d\u6307\u9488\uff08\u4f46\u6709\u4e00\u4e9b\u5b9e\u73b0\u652f\u6301\u5206\u9875\u5730\u5740\u8bbf\u95ee\uff09 \u4ec5 256 \u5b57\u8282\u7684\u5185\u7f6e \u201c\u9ad8\u901f\u201d \u5b58\u50a8\u5668\uff0c\u6240\u6709\u5176\u4ed6\u7684\u5b58\u50a8\u5668\u90fd\u662f\u901a\u8fc7\u6162\u5f97\u591a\u7684\u5916\u90e8\u5b58\u50a8\u5668\u603b\u7ebf\u8bbf\u95ee\u7684\uff08\u7531\u4e8e\u8bbf\u95ee\u5ef6\u8fdf\u548c\u4ece\u5176\u8bfb\u53d6\u6240\u9700\u7684\u6307\u4ee4\u6570\u91cf\uff09 \u8bb8\u591a\u6307\u4ee4\u8981\u6c42\u9996\u5148\u5c06\u6570\u636e\u79fb\u5165\u7d2f\u52a0\u5668\uff08Accumulator, A/ACC\uff09\u5bc4\u5b58\u5668\uff0c\u4ee5\u4fbf\u5bf9\u5176\u8fdb\u884c\u64cd\u4f5c\u3002 \u591a\u4e2a\u5b58\u50a8\u5668\u533a\u57df\uff0c\u6709\u76f4\u63a5\u548c\u95f4\u63a5\u8bbf\u95ee\u7684\u5185\u90e8\u5b58\u50a8\u5668\u3001\u7279\u6b8a\u529f\u80fd\u5bc4\u5b58\u5668\uff08SFR\uff09\u3001\u4f4d\u6620\u5c04\u5bc4\u5b58\u5668\u3001\u5bc4\u5b58\u5668\u7ec4\u3001\u5916\u90e8\u5b58\u50a8\u5668\u548c\u53ea\u8bfb\u4ee3\u7801\u5b58\u50a8\u5668\u3002 \u5185\u90e8\u5806\u6808\u7a7a\u95f4\u4e0e\u5185\u90e8\u6570\u636e\u5b58\u50a8\u5668\u5171\u4eab\uff0c\u540e\u8005\u4e5f\u4e0e\u5bc4\u5b58\u5668\u5b58\u50a8\u5668\u5171\u4eab\u3002 \u7531\u4e8e\u8fd9\u4e9b\u548c\u5176\u4ed6\u7684\u4e00\u4e9b\u9650\u5236\uff0c\u5f88\u96be\u4e3a\u8fd9\u6837\u7684\u8bbe\u5907\u521b\u5efa C \u7f16\u8bd1\u5668\u76ee\u6807\uff0c\u50cf SDCC \u8fd9\u6837\u5df2\u7ecf\u88ab\u79fb\u690d\u7684\u7f16\u8bd1\u5668\uff0c\u7f3a\u5c11\u4e86\u73b0\u4ee3\u7f16\u8bd1\u5668\uff0c\u6bd4\u5982 GCC \u548c LLVM \u6240\u62e5\u6709\u7684\u8bb8\u591a\u6709\u7528\u7684\u7279\u6027\uff0c\u5982\u5148\u8fdb\u7684\u3001\u53ef\u914d\u7f6e\u7684\u8b66\u544a\uff0c\u5f3a\u5927\u7684\u6b7b\u4ee3\u7801\u6d88\u9664\u548c\u5176\u4ed6\u4f18\u5316\u6280\u672f\uff0c\u7b49\u7b49\u3002\u6b64\u5916\uff0c\u5982\u679c\u6ca1\u6709LLVM\u6216\u4e13\u95e8\u7684\u7f16\u8bd1\u5668\u9879\u76ee\u7684\u652f\u6301\uff0c\u57fa\u4e8eLLVM\u7684\u8bed\u8a00\uff0c\u5982Rust\uff0c\u5c31\u4e0d\u80fd\u4e3a\u8bbe\u5907\u8fdb\u884c\u7f16\u8bd1\u3002\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u7684\u65b9\u6cd5\u4e4b\u4e00\u662f\u8fdb\u884c\u56f0\u96be\u7684\u8f6f\u4ef6\u5f00\u53d1\u5de5\u4f5c\uff0c\u5c068051\u4f5c\u4e3a\u76ee\u6807\u6dfb\u52a0\u5230 GCC \u548c LLVM\u4e2d\u3002\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u57288051\u4e0a\u6a21\u62df\u4e00\u4e2a\u7b80\u5355\u7684\u3001\u6ca1\u6709\u4e13\u5229\u7684CPU\u67b6\u6784\uff0c\u5b83\u5df2\u7ecf\u6709\u5f88\u597d\u7684\u7f16\u8bd1\u5668\u652f\u6301--\u5373RISC-V\u3002 C51 \u00b6 C51 \u5f53\u7136\u4e0d\u662f 1951 \u5e74\u7684C\u6807\u51c6\uff0cDennis Ritchie \u8981\u5230 1972 \u5e74\u624d\u80fd\u53d1\u660e C \u8bed\u8a00 \u662f Keil \u516c\u53f8\u4e3a\u4e86\u4fbf\u4e8e\u5bf9 8051 \u7684\u5f00\u53d1\uff088051 \u4e0e x86 ARM \u7b49\u7b49\u7684\u7f16\u7a0b\u6a21\u578b\u533a\u522b\u5f88\u5927\uff09\u5bf9 ANSI C \u7684\u6269\u5c55\u3002 \u5f00\u53d1\u5de5\u5177\uff1a \u00b6 \u70e7\u5f55\u5de5\u5177 \u00b6 STC-gal \u7f16\u8bd1\u5668 \u00b6 SDCC \u6a21\u62df\u5668 \u00b6 VM8051 \u7f16\u8f91\u5668 \u00b6 Visual Studio Code \u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u9009\u62e9 Keil \u03bcVersion Keil C51 \u4e0e SDCC \u8bed\u6cd5\u7684\u4e0d\u540c \u00b6 sbit = P0^0; //\u8fd9\u662fKeil C51 __sbit__at 0x80 led0; //\u8fd9\u662fSDCC #define led1 P0_0 //SDCC \u4e5f\u53ef\u4ee5\u8fd9\u6837\u5199\uff0cP0_0\u5df2\u5728\u5934\u6587\u4ef6\u4e2d\u5b9a\u4e49 !led0 //SDCC\u5bf9\u4f4d\u53d8\u91cf\u53d6\u53cd\u53ea\u80fd\u8fd9\u6837\u5199 ~led0 //Keil\u4e60\u60ef\u4e0a\u8fd9\u79cd\u5199\u6cd5\u7528\u7684\u591a\uff0c\u4f46\u4e5f\u517c\u5bb9SDCC\u7684\u5199\u6cd5","title":"8051 \u7b14\u8bb0"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/8051/#8051","text":"\u90fd 2022 \u5e74\u4e86\uff0c \u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u8fd8\u8981\u5b66\u4e6080\u5e74\u4ee3\u7684\u5355\u7247\u673a \uff0c\u60b2","title":"8051 \u7b14\u8bb0"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/8051/#8051_1","text":"Intel MCS-51 \uff0c\u4e5f\u5c31\u662f\u901a\u5e38\u8bf4\u7684 8051\uff08\u516b\u96f6\u4e94\u4e00\uff0ceight-oh-five-one\uff09\uff0c\u662f Intel \u5728\u4e0a\u4e16\u7eaa80\u5e74\u4ee3\u5f00\u53d1\u7684\u5355\u82af\u7247\u5fae\u63a7\u5236\u5668\u7cfb\u5217\uff0c \u662f\u54c8\u4f5b\u7ed3\u6784\uff08\u7a0b\u5e8f\u548c\u6570\u636e\u5b58\u50a8\u5668\u5206\u79bb\uff09\uff0c\u590d\u6742\u6307\u4ee4\u96c6\u7684 8 \u4f4d\u5fae\u63a7\u5236\u5668\u3002 Intel \u5df2\u4e8e 2007\u5e74\u505c\u4ea7 MCS-51 \u7cfb\u5217\u4ea7\u54c1\uff0c\u76ee\u524d\u5e02\u9762\u4e0a\u7684 51 \u5355\u7247\u673a\u4e3b\u8981\u6765\u81ea\u5176\u4ed6\u5382\u5546\u7684\u589e\u5f3a\u578b8051\u4ea7\u54c1\uff0c\u662f8051\u7684\u884d\u751f\u7248\u672c\uff0cIntel\u5c06 8051 \u5355\u7247\u673a\u5185\u6838\u6388\u6743\u7ed9\u5f88\u591a\u534a\u5bfc\u4f53\u4ea7\u751f\uff0c\u4f7f\u5176\u53ef\u4ee5\u751f\u4ea7 8051 \u7684\u884d\u751f\u4ea7\u54c1\uff0c\u76ee\u524d\u56fd\u5185\u4f7f\u7528\u6700\u591a\u7684\u884d\u751f\u82af\u7247\u5e94\u8be5\u662f STC \u7684\u589e\u5f3a\u578b 8051","title":"\u4ec0\u4e48\u662f 8051"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/8051/#_1","text":"","title":"\u884d\u751f\u82af\u7247"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/8051/#8051_2","text":"\u53ef\u4ee5\u505a\u5230\u6781\u81f4\u7684\u5c0f\u4f53\u79ef\uff1a\u6bd4\u5982 DFN-8 \u4ef7\u683c\u4fbf\u5b9c \u90e8\u5206\u6865\u63a5\u82af\u7247\u4e4b\u7c7b\u7684\u4e1c\u897f\u53ef\u80fd\u4f1a\u585e\u4e2a 8051 \u6838\u8fdb\u53bb","title":"8051 \u7684\u7279\u70b9"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/8051/#8051_3","text":"GitHub \u4e0a\u4e00\u4e2a \u8ba9 8051 \u6a21\u62df RISC32IM \u6307\u4ee4\u96c6\u7684\u9879\u76ee \u6709\u63d0\u53ca: 8 \u4f4d\u5bc4\u5b58\u5668\uff0cALU \u548c\u6570\u636e\u603b\u7ebf 16 \u4f4d\u6307\u9488\uff08\u4f46\u6709\u4e00\u4e9b\u5b9e\u73b0\u652f\u6301\u5206\u9875\u5730\u5740\u8bbf\u95ee\uff09 \u4ec5 256 \u5b57\u8282\u7684\u5185\u7f6e \u201c\u9ad8\u901f\u201d \u5b58\u50a8\u5668\uff0c\u6240\u6709\u5176\u4ed6\u7684\u5b58\u50a8\u5668\u90fd\u662f\u901a\u8fc7\u6162\u5f97\u591a\u7684\u5916\u90e8\u5b58\u50a8\u5668\u603b\u7ebf\u8bbf\u95ee\u7684\uff08\u7531\u4e8e\u8bbf\u95ee\u5ef6\u8fdf\u548c\u4ece\u5176\u8bfb\u53d6\u6240\u9700\u7684\u6307\u4ee4\u6570\u91cf\uff09 \u8bb8\u591a\u6307\u4ee4\u8981\u6c42\u9996\u5148\u5c06\u6570\u636e\u79fb\u5165\u7d2f\u52a0\u5668\uff08Accumulator, A/ACC\uff09\u5bc4\u5b58\u5668\uff0c\u4ee5\u4fbf\u5bf9\u5176\u8fdb\u884c\u64cd\u4f5c\u3002 \u591a\u4e2a\u5b58\u50a8\u5668\u533a\u57df\uff0c\u6709\u76f4\u63a5\u548c\u95f4\u63a5\u8bbf\u95ee\u7684\u5185\u90e8\u5b58\u50a8\u5668\u3001\u7279\u6b8a\u529f\u80fd\u5bc4\u5b58\u5668\uff08SFR\uff09\u3001\u4f4d\u6620\u5c04\u5bc4\u5b58\u5668\u3001\u5bc4\u5b58\u5668\u7ec4\u3001\u5916\u90e8\u5b58\u50a8\u5668\u548c\u53ea\u8bfb\u4ee3\u7801\u5b58\u50a8\u5668\u3002 \u5185\u90e8\u5806\u6808\u7a7a\u95f4\u4e0e\u5185\u90e8\u6570\u636e\u5b58\u50a8\u5668\u5171\u4eab\uff0c\u540e\u8005\u4e5f\u4e0e\u5bc4\u5b58\u5668\u5b58\u50a8\u5668\u5171\u4eab\u3002 \u7531\u4e8e\u8fd9\u4e9b\u548c\u5176\u4ed6\u7684\u4e00\u4e9b\u9650\u5236\uff0c\u5f88\u96be\u4e3a\u8fd9\u6837\u7684\u8bbe\u5907\u521b\u5efa C \u7f16\u8bd1\u5668\u76ee\u6807\uff0c\u50cf SDCC \u8fd9\u6837\u5df2\u7ecf\u88ab\u79fb\u690d\u7684\u7f16\u8bd1\u5668\uff0c\u7f3a\u5c11\u4e86\u73b0\u4ee3\u7f16\u8bd1\u5668\uff0c\u6bd4\u5982 GCC \u548c LLVM \u6240\u62e5\u6709\u7684\u8bb8\u591a\u6709\u7528\u7684\u7279\u6027\uff0c\u5982\u5148\u8fdb\u7684\u3001\u53ef\u914d\u7f6e\u7684\u8b66\u544a\uff0c\u5f3a\u5927\u7684\u6b7b\u4ee3\u7801\u6d88\u9664\u548c\u5176\u4ed6\u4f18\u5316\u6280\u672f\uff0c\u7b49\u7b49\u3002\u6b64\u5916\uff0c\u5982\u679c\u6ca1\u6709LLVM\u6216\u4e13\u95e8\u7684\u7f16\u8bd1\u5668\u9879\u76ee\u7684\u652f\u6301\uff0c\u57fa\u4e8eLLVM\u7684\u8bed\u8a00\uff0c\u5982Rust\uff0c\u5c31\u4e0d\u80fd\u4e3a\u8bbe\u5907\u8fdb\u884c\u7f16\u8bd1\u3002\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u7684\u65b9\u6cd5\u4e4b\u4e00\u662f\u8fdb\u884c\u56f0\u96be\u7684\u8f6f\u4ef6\u5f00\u53d1\u5de5\u4f5c\uff0c\u5c068051\u4f5c\u4e3a\u76ee\u6807\u6dfb\u52a0\u5230 GCC \u548c LLVM\u4e2d\u3002\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u57288051\u4e0a\u6a21\u62df\u4e00\u4e2a\u7b80\u5355\u7684\u3001\u6ca1\u6709\u4e13\u5229\u7684CPU\u67b6\u6784\uff0c\u5b83\u5df2\u7ecf\u6709\u5f88\u597d\u7684\u7f16\u8bd1\u5668\u652f\u6301--\u5373RISC-V\u3002","title":"8051 \u7684\u7f3a\u70b9"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/8051/#c51","text":"C51 \u5f53\u7136\u4e0d\u662f 1951 \u5e74\u7684C\u6807\u51c6\uff0cDennis Ritchie \u8981\u5230 1972 \u5e74\u624d\u80fd\u53d1\u660e C \u8bed\u8a00 \u662f Keil \u516c\u53f8\u4e3a\u4e86\u4fbf\u4e8e\u5bf9 8051 \u7684\u5f00\u53d1\uff088051 \u4e0e x86 ARM \u7b49\u7b49\u7684\u7f16\u7a0b\u6a21\u578b\u533a\u522b\u5f88\u5927\uff09\u5bf9 ANSI C \u7684\u6269\u5c55\u3002","title":"C51"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/8051/#_2","text":"","title":"\u5f00\u53d1\u5de5\u5177\uff1a"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/8051/#_3","text":"STC-gal","title":"\u70e7\u5f55\u5de5\u5177"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/8051/#_4","text":"SDCC","title":"\u7f16\u8bd1\u5668"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/8051/#_5","text":"VM8051","title":"\u6a21\u62df\u5668"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/8051/#_6","text":"Visual Studio Code \u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u9009\u62e9 Keil \u03bcVersion","title":"\u7f16\u8f91\u5668"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/8051/#keil-c51-sdcc","text":"sbit = P0^0; //\u8fd9\u662fKeil C51 __sbit__at 0x80 led0; //\u8fd9\u662fSDCC #define led1 P0_0 //SDCC \u4e5f\u53ef\u4ee5\u8fd9\u6837\u5199\uff0cP0_0\u5df2\u5728\u5934\u6587\u4ef6\u4e2d\u5b9a\u4e49 !led0 //SDCC\u5bf9\u4f4d\u53d8\u91cf\u53d6\u53cd\u53ea\u80fd\u8fd9\u6837\u5199 ~led0 //Keil\u4e60\u60ef\u4e0a\u8fd9\u79cd\u5199\u6cd5\u7528\u7684\u591a\uff0c\u4f46\u4e5f\u517c\u5bb9SDCC\u7684\u5199\u6cd5","title":"Keil C51 \u4e0e SDCC \u8bed\u6cd5\u7684\u4e0d\u540c"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/Intel%20MCS-51%20%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C_%E5%AF%84%E5%AD%98%E5%99%A8%E9%83%A8%E5%88%86/","text":"Intel MCS-51 \u7f16\u7a0b\u53ca\u6307\u4ee4\u96c6\u624b\u518c \u00b6 Intel MCS-51 Programmer\u2019s Guide and Instruction Set \u7684\u7ffb\u8bd1 \u5b58\u50a8\u5668\u7ed3\u6784 \u00b6 \u7a0b\u5e8f\u5b58\u50a8\u5668 \u00b6 8051 \u62e5\u6709\u72ec\u7acb\u5730\u5740\u7a7a\u95f4\uff08address spaces\uff09\u7684\u7a0b\u5e8f\u5b58\u50a8\u5668\uff08Program Memory\uff09\u548c\u6570\u636e\u5b58\u50a8\u5668\uff08Data Memory\uff09\u3002\u7a0b\u5e8f\u5b58\u50a8\u5668\u53ef\u4ee5\u957f\u8fbe 64KB\uff0c \u8f83\u4f4e\uff08\u5730\u5740\uff09\u7684 4K\uff08\u5bf9 8052 \u6765\u8bf4\u662f8K\uff09\u53ef\u80fd\u4f4d\u4e8e\u82af\u7247\u4e0a\uff08reside on-chip\uff09 \u6570\u636e\u5b58\u50a8\u5668 \u00b6 8051 \u53ef\u4ee5\u5bfb\u5740\u591a\u8fbe 64KB \u7684\u7247\u5916\u6570\u636e\u5b58\u50a8\u5668\u3002 MOVX \u6307\u4ee4\u88ab\u7528\u4e8e\u8bbf\u95ee\u5916\u7f6e\u5b58\u50a8\u5668\uff08\u8be6\u7ec6\u63cf\u8ff0\u53c2\u8003 MCS-51 \u6307\u4ee4\u96c6 \u7ae0\u8282\uff09 8051 \u62e5\u6709 128 \u5b57\u8282\u7684\u7247\u4e0a RAM \uff088052 \u662f 256 \u5b57\u8282\uff09 \u4ee5\u53ca\u4e00\u4e9b\u7279\u6b8a\u529f\u80fd\u5bc4\u5b58\u5668\uff08Special Function Registers, SFRs\uff09. \u8f83\u4f4e\uff08\u5730\u5740\uff09\u7684 128 bytes \u65e2\u53ef\u4ee5\u88ab\u76f4\u63a5\u5bfb\u5740\uff08MOV data addr\uff09\u4e5f\u53ef\u4ee5\u88ab\u95f4\u63a5\u5bfb\u5740\uff08MOV @Ri\uff09\uff0c\u56fe 3 \u5c55\u793a\u4e86 8051 \u548c 8052 \u7684\u6570\u636e\u5b58\u50a8\u5668\u7ed3\u6784\u3002 \u95f4\u63a5\u5bfb\u5740\u533a\u57df \u00b6 \u6ce8\u610f\u56fe 3b \u4e2d \uff0c\u7279\u6b8a\u529f\u80fd\u5bc4\u5b58\u5668\uff08SFRs\uff09\u548c\u95f4\u63a5\u5bfb\u5740 RAM \u62e5\u6709\u76f8\u540c\u7684\u5730\u5740\uff0880H-0FFFH\uff09. \u4f46\u662f\u5b83\u4eec\u662f\u7528\u4e24\u79cd\u4e0d\u540c\u65b9\u5f0f\u8bbf\u95ee\u7684\uff0c\u4e24\u5757\u72ec\u7acb\u7684\u533a\u57df \u4f8b\u5982\u6307\u4ee4\uff1a MOV 80H,#0AAH \u5c06\u4f1a\u5199\u5165 0AAH \u5230 Port 0\uff0c\u8fd9\u662f\u4e00\u4e2a\u7279\u6b8a\u529f\u80fd\u5bc4\u5b58\u5668\uff0c\u53e6\u4e00\u79cd\u6307\u4ee4\uff1a MOV R0,#80H MOV @R0,#0BBH \u5c06\u4f1a\u5728\u6570\u636e RAM \u4e2d\u7684 80H \u5199\u5165 0BBBH\uff0c\u56e0\u6b64\uff0c\u5728\u6267\u884c\u4e86\u4e0a\u8ff0\u7684\u4e24\u79cd\u6307\u4ee4\u540e\uff0c\u7aef\u53e3 0 \u5c06\u5305\u542b 0AAH\uff0c RAM\u7684 80 \u4f4d\u7f6e \u5c06\u5305\u542b 0BBH\u3002 \u6ce8\u610f\uff0c\u6808\u64cd\u4f5c\uff08Stack Operation\uff0c\u628a Stack \u7ffb\u8bd1\u6210\u5806\u6808\u8fd9\u5408\u7406\u5417\uff1f\uff09\u662f\u95f4\u63a5\u5bfb\u5740\u7684\u5b9e\u4f8b\uff0c\u6240\u4ee5\u5728\u90a3\u4e9b\u5b9e\u73b0 256 \u5b57\u8282\u5185\u7f6e RAM \u7684\u8bbe\u5907\u4e2d\uff0c\u6570\u636e RAM \u7684\u4e0a\u90e8 128 \u5b57\u8282\u53ef\u7528\u4f5c\u6808\u7a7a\u95f4\u3002 \u76f4\u63a5\u548c\u95f4\u63a5\u5bfb\u5740\u533a\u57df \u00b6 \u53ef\u4ee5\u901a\u8fc7\u76f4\u63a5\u548c\u95f4\u63a5\u5bfb\u5740\u8bbf\u95ee\u7684128\u5b57\u8282\u7684RAM\u53ef\u4ee5\u5206\u4e3a3\u4e2a\u90e8\u5206\uff08\u5de5\u4f5c\u5bc4\u5b58\u5668\u7ec4\u533a\u3001\u4f4d\u5bfb\u5740\u533a\u3001\u6570\u636e\u7f13\u51b2\u533a\uff09\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002 1. \u5bc4\u5b58\u5668\u7ec4\uff08Register Banks\uff09 0-3 \uff1a\u4f4d\u7f6e\u4ece 0 \u5230 1FH \uff0832\u5b57\u8282\uff09\u3002ASM-51 \u548c\u4ee5\u53ca\u590d\u4f4d\u540e\u7684\u8bbe\u5907\u9ed8\u8ba4\u4e3a\u7ec40\uff08Bank 0\uff09\uff0c\u4f7f\u7528\u5176\u4ed6\u7684\u5bc4\u5b58\u5668\u7ec4\u5fc5\u987b\u5728\u8f6f\u4ef6\uff08\u53c2\u8003 MCS-51 Micro Assembler User's Guide \uff09\u6bcf\u4e2a\u5bc4\u5b58\u5668\u7ec4\u5305\u542b\u4e86 8 \u4e2a\u5355\u5b57\u8282\u5bc4\u5b58\u5668\uff0c\u4ece 0 \u5230 7 \u3002 \u590d\u4f4d\u521d\u59cb\u5316\u6808\u6307\u9488\uff08Stack Pointer\uff0cSP\uff09\u5230\u4f4d\u7f6e 07H \u5e76\u4e14\u4ed6\u88ab\u9012\u589e\u4e00\u6b21\uff0c\u4ece\u4f4d\u7f6e 08H \u5f00\u59cb\uff0c\uff0c\u8fd9\u662f\u7b2c\u4e8c\u4e2a\u5bc4\u5b58\u5668\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5bc4\u5b58\u5668\uff08RO\uff09\u3002\u56e0\u6b64\uff0c\u4e3a\u4e86\u4f7f\u7528\u4e00\u4e2a\u4ee5\u4e0a\u7684\u5bc4\u5b58\u5668\u7ec4\uff0cSP\u5e94\u8be5\u88ab\u521d\u59cb\u5316\u5230RAM\u4e2d\u4e0d\u7528\u4e8e\u6570\u636e\u5b58\u50a8\u7684\u4e0d\u540c\u4f4d\u7f6e\uff08\u5373RAM\u7684\u8f83\u9ad8\u90e8\u5206\uff09\u3002 2. \u4f4d\u5bfb\u5740\u533a\uff08Bit Addressable Area\uff09 \uff1a\u8be5\u6bb5\u670916\u4e2a\u5b57\u8282\uff0c20H-2FH\u3002\u8be5\u6bb5\u7684128\u4f4d\u4e2d\u7684\u6bcf\u4e00\u4f4d\u90fd\u53ef\u4ee5\u88ab\u76f4\u63a5\u5bfb\u5740\uff080-7FH\uff09\u3002 \u8fd9\u4e9b\u4f4d\u53ef\u4ee5\u7528\u4e24\u79cd\u65b9\u5f0f\u6765\u6307\u4ee3\uff0c\u8fd9\u4e24\u79cd\u65b9\u5f0f\u90fd\u662fASM-51\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\u4e00\u79cd\u65b9\u5f0f\u662f\u53c2\u8003\u5b83\u4eec\u7684\u5730\u5740\uff0c\u53730\u52307FH\u3002\u53e6\u4e00\u79cd\u65b9\u5f0f\u662f\u53c2\u8003\u5b57\u828220H\u81f32FH\u3002\u56e0\u6b64\uff0c0-7\u4f4d\u4e5f\u53ef\u4ee5\u79f0\u4e3a20.0-20.7\u4f4d\uff0c8-FH\u4f4d\u4e0e21.0-21.7\u4f4d\u76f8\u540c\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u672c\u6bb516\u4e2a\u5b57\u8282\u4e2d\u7684\u6bcf\u4e00\u4e2a\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u5b57\u8282\u6765\u5bfb\u5740\u3002 3. \u6570\u636e\u7f13\u51b2\u533a\uff08Scrath Pad Area\uff09 \uff1a30H \u5230 7FH \u5b57\u8282\u53ef\u4ee5\u4f5c\u4e3a\u6570\u636eRAM\u63d0\u4f9b\u7ed9\u7528\u6237\u3002\u4f46\u662f\uff0c\u5982\u679c\u5806\u6808\u6307\u9488\u88ab\u521d\u59cb\u5316\u5230\u8fd9\u4e2a\u533a\u57df\uff0c\u5e94\u8be5\u7559\u51fa\u8db3\u591f\u6570\u91cf\u7684\u5b57\u8282\u4ee5\u9632\u6b62 SP \u6570\u636e\u88ab\u7834\u574f\u3002 \u7279\u6b8a\u529f\u80fd\u5bc4\u5b58\u5668 \u00b6 \u8868 1 \u5305\u542b\u4e86\u6240\u6709 SFR \u53ca\u5176\u5730\u5740\u7684\u5217\u8868\u3002 \u5bf9\u6bd4\u8868 1 \u548c\u56fe 5 \u53ef\u4ee5\u770b\u51fa\uff0c\u6240\u6709\u53ef\u5bfb\u5740\u7684\u5b57\u8282\u548c\u4f4d\u7684 SFR \u90fd\u4f4d\u4e8e\u56fe 5 \u4e2d\u7684\u7b2c\u4e00\u5217(\u53ef\u4ee5\u88ab8\u6574\u9664)\u3002 \u7b26\u53f7 (Symbol\uff09 \u540d\u79f0\uff08Name\uff09 \u5730\u5740\uff08Address\uff09 *ACC \u7d2f\u52a0\u5668\uff08Accumulator\uff09 0E0H *B \u5bc4\u5b58\u5668B 0F0H *PSW \u7a0b\u5e8f\u72b6\u6001\u5b57\uff08Program Status Word\uff09 0D0H SP \u6808\u6307\u9488\uff08Stack Pointer\uff09 81H DPTR \u53cc\u5b57\u8282\u6570\u636e\u6307\u9488\uff08Data Pointer 2 Bytes\uff09 \u2003DPL \u4f4e\u5b57\u8282\uff08Low Byte\uff09 82H \u2003DPH \u9ad8\u5b57\u8282\uff08High Byte\uff09 83H *P0 \u7aef\u53e3 0\uff08Port 0\uff09 80H *P1 \u7aef\u53e3 1\uff08Port 1\uff09 90H *P2 \u7aef\u53e3 2\uff08Port 2\uff09 0A0H *P3 \u7aef\u53e3 3\uff08Port 3\uff09 0B0H *IP \u4e2d\u65ad\u4f18\u5148\u7ea7\u63a7\u5236\uff08Interrupt Priority Control\uff09 0B8H *IE \u4e2d\u65ad\u4f7f\u80fd\u63a7\u5236\uff08Interrupt Enable Control\uff09 0A8H TMOD \u8ba1\u65f6\u5668/\u8ba1\u6570\u5668\u6a21\u5f0f\u63a7\u5236\uff08Timer/Counter Mode Control\uff09 89H *TCON \u8ba1\u65f6\u5668/\u8ba1\u6570\u5668\u63a7\u5236\uff08Timer/Counter Control\uff09 88H *+T2CON \u8ba1\u65f6\u5668/\u8ba1\u6570\u5668 2 \u63a7\u5236\uff08Timer/Counter 2 Control\uff09 0C8H TH0 \u8ba1\u65f6\u5668/\u8ba1\u6570\u5668 0 \u9ad8\u5b57\u8282\uff08Timer/Counter 0 High Byte\uff09 8CH TL0 \u8ba1\u65f6\u5668/\u8ba1\u6570\u5668 0 \u4f4e\u5b57\u8282\uff08Timer/Counter 0 Low Byte\uff09 8AH TH1 \u8ba1\u65f6\u5668/\u8ba1\u6570\u5668 1 \u9ad8\u5b57\u8282\uff08Timer/Counter 1 High Byte\uff09 8DH TL1 \u8ba1\u65f6\u5668/\u8ba1\u6570\u5668 1 \u4f4e\u5b57\u8282\uff08Timer/Counter 1 Low Byte\uff09 8BH +TH2 \u8ba1\u65f6\u5668/\u8ba1\u6570\u5668 2 \u9ad8\u5b57\u8282\uff08Timer/Counter 2 High Byte\uff09 0CDH +TL2 \u8ba1\u65f6\u5668/\u8ba1\u6570\u5668 2 \u4f4e\u5b57\u8282\uff08Timer/Counter 2 Low Byte\uff09 0CCH +RCAP2H T/C 2 \u6355\u83b7\u5bc4\u5b58\u5668\u9ad8\u5b57\u8282\uff08T/C 2 Capture Reg High Byte) 0CBH +RCAP2L T/C 2 \u6355\u83b7\u5bc4\u5b58\u5668\u4f4e\u5b57\u8282\uff08T/C 2 Capture Reg Low Byte) 0CAH *SCON \u4e32\u53e3\u63a7\u5236\uff08Serial Control\uff09 98H *SBUF \u4e32\u53e3\u6570\u636e\u7f13\u51b2\uff08Serial Data Buffer\uff09 99H PCON Power Control 87H > * \u8868\u793a\u53ef\u4f4d\u5bfb\u5740\uff08Bit addressable\uff09 > + \u8868\u793a\u4ec5 8052 \u53ef\u7528\uff088052 only\uff09 ### \u4e0a\u7535\u6216\u590d\u4f4d\u540e\uff0cSFR\u5305\u542b\u4ec0\u4e48\u5185\u5bb9\uff1f \u8868 2 \u5217\u51fa\u4e86\u7279\u6b8a\u529f\u80fd\u5bc4\u5b58\u5668\u5728\u4e0a\u7535\u6216\u8005\u786c\u4ef6\u590d\u4f4d\u540e\u7684\u5185\u5bb9\uff1a \u672c\u8282\u5217\u51fa\u4e86\u90a3\u4e9b\u4e3a\u5404\u79cd\u529f\u80fd\u5206\u914d\u4e86\u4f4d\u7684 SFR\u3002\u63d0\u4f9b\u6bcf\u4e2a\u4f4d\u7684\u7b80\u8981\u8bf4\u660e\u4ee5\u4f9b\u5feb\u901f\u53c2\u8003\u3002\u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u672c\u4e66\u7684\u67b6\u6784\u7ae0\u8282\u3002 PSW\uff1a\u7a0b\u5e8f\u72b6\u6001\u5b57\uff08PROGRAM STATUS WORD\uff09\u53ef\u4f4d\u5bfb\u5740 \u00b6 CY AC F0 RS1 RS0 OV \u2014\u2014 P CY PSW.7 \u8fdb\u4f4d\u6807\u5fd7\u4f4d\uff08Carry Flag\uff09 AC PSW.6 \u8f85\u52a9\u8fdb\u4f4d\u6807\u5fd7\u4f4d\uff08Auxiliary Carray Flag\uff09 F0 PSW.5 \u6807\u5fd7\u4f4d0\uff08Flag 0\uff09\uff0c\u53ef\u4f9b\u7528\u6237\u7528\u4e8e\u4e00\u822c\u7528\u9014 RS1 PSW.4 \u5bc4\u5b58\u5668\u7ec4\u9009\u62e9\u4f4d 1\uff08Register Bank selector bit 1\uff09\uff08\u89c1\u9644\u6ce8 1\uff09 RS0 PSW.3 \u5bc4\u5b58\u5668\u7ec4\u9009\u62e9\u4f4d 0 \uff08\u89c1\u9644\u6ce8 1\uff09 OV PSW.2 \u6ea2\u51fa\u6807\u5fd7\uff08Overflow Flag\uff09 \u2014\u2014 PSW.1 \u7528\u6237\u53ef\u5b9a\u4e49\u6807\u5fd7\uff08User definable flag\uff09 P PSW.0 \u5947\u5076\u6821\u9a8c\u6807\u5fd7\uff0c\u7531\u786c\u4ef6\u5728\u6bcf\u4e2a\u6307\u4ee4\u5468\u671f\u5185\u8bbe\u7f6e/\u6e05\u9664\uff0c\u4ee5\u6307\u793a\u7d2f\u52a0\u5668\u4e2d\u7684\u5947\u6570/\u5076\u6570\u7684'1'\u4f4d\u3002 \u9644\u6ce81\uff1a \u7531 RS0 \u548c RS1 \u7684\u503c\u9009\u62e9\u76f8\u5e94\u7684\u5bc4\u5b58\u5668\u7ec4\u3002 RS1 RS0 \u5bc4\u5b58\u5668\u7ec4\uff08Register Bank\uff09 \u5730\u5740 0 0 0 00H-07H 0 1 1 08H-0FH 1 0 2 10H-17H 1 1 3 18H-1FH PCON \u7535\u6e90\u63a7\u5236\u5bc4\u5b58\u5668\uff08POWER CONTROL REGISTER\uff09\uff0c \u4e0d\u53ef\u4f4d\u5bfb\u5740 \u00b6 SMOD \u2014\u2014 \u2014\u2014 \u2014\u2014 GF1 GF0 PD IDL SMOD \u53cc\u500d\u6ce2\u7279\u7387\u4f4d\uff08doble baud rate bit\uff09\u3002\u5982\u679c\u5b9a\u65f6\u56681\u500d\u7528\u4e8e\u751f\u6210\u6ce2\u7279\u7387\u4e14SMOD=1\uff0c\u5f53\u4e32\u53e3\u88ab\u7528\u4e8e\u6a21\u5f0f1,2,3\u65f6\uff0c\u6ce2\u7279\u7387\u7ffb\u500d \u2014\u2014 \u6ca1\u6709\u5b9e\u73b0\uff0c\u4fdd\u7559\u7ed9\u672a\u6765\u4f7f\u7528\uff08Not implemented, reserved for future use.*\uff09 \u2014\u2014 \u6ca1\u6709\u5b9e\u73b0\uff0c\u4fdd\u7559\u7ed9\u672a\u6765\u4f7f\u7528 \u2014\u2014 \u6ca1\u6709\u5b9e\u73b0\uff0c\u4fdd\u7559\u7ed9\u672a\u6765\u4f7f\u7528 GF1 \u901a\u7528\u7528\u9014\u6807\u5fd7\u4f4d\u3002\uff08general purpose flag bit\uff09 GF0 \u901a\u7528\u7528\u9014\u6807\u5fd7\u4f4d\u3002 PD \u6389\u7535\u6a21\u5f0f\u4f4d\uff08Power Down bit\uff09\u3002\u8bbe\u7f6e\u8fd9\u4e2a\u4f4d\u53ef\u4ee5\u6fc0\u6d3b 80C51BH \u7684\u6389\u7535\u6a21\u5f0f\u64cd\u4f5c\uff08\u4ec5\u5728\u91c7\u7528CHMOS\u5de5\u827a\u7684\u578b\u53f7\u4e2d\u53ef\u7528\uff09 IDL \u7a7a\u95f2\u6a21\u5f0f\u4f4d\uff08idle Mode bit\uff09\u3002\u8bbe\u7f6e\u8fd9\u4e2a\u4f4d\u6fc0\u6d3b 80C51BH \u4e2d\u7684\u7a7a\u95f2\u6a21\u5f0f\u64cd\u4f5c\u3002\uff08\u4ec5\u5728\u91c7\u7528CHMOS\u5de5\u827a\u7684\u578b\u53f7\u4e2d\u53ef\u7528\uff09 \u5982\u679c\u540c\u65f6\u5411 PD \u548c IDL \u5199\u5165 1\uff0cPD \u4f18\u5148 *\u7528\u6237\u8f6f\u4ef6\u4e0d\u5e94\u5f53\u5411\u4fdd\u7559\u4f4d\u5199\u51651\uff0c\u8fd9\u4e9b\u4f4d\u53ef\u80fd\u5728\u672a\u6765\u7684 MCS-51 \u4ea7\u54c1\u4e2d\u88ab\u7528\u6765\u8c03\u7528\u65b0\u7684\u529f\u80fd\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u65b0\u7684\u590d\u4f4d\u6216\u65e0\u6548\u7684\u503c\u5c06\u4e3a 0\uff0c\u5176\u6709\u6548\u503c\u5c06\u4e3a 1\u3002 \u4e2d\u65ad\uff1a \u00b6 \u4e3a\u4f7f\u7528 MCS-51 \u4e2d\u65ad\u4efb\u4f55\u4e2d\u65ad\uff0c\u9700\u8981\u4e00\u4e0b\u4e09\u6b65\uff1a 1. \u8bbe\u7f6e IE \u5bc4\u5b58\u5668\u4e2d\u7684 EA\uff08enable all\uff09\u4f4d\u4e3a 1 2. \u5c06IE\u5bc4\u5b58\u5668\u4e2d\u7684\u5bf9\u5e94\u7684\u72ec\u7acb\u7684\u4e2d\u65ad\u4f7f\u80fd\u4f4d\u8bbe\u4e3a 1 3. \u5728\u8be5\u4e2d\u65ad\u7684\u5bf9\u5e94\u7684\u5411\u91cf\u5730\u5740\u5904\u5f00\u59cb\u4e2d\u65ad\u670d\u52a1\u4f8b\u7a0b\u3002\u89c1\u4e0b\u8868\u3002 \u4e2d\u65ad\u6e90 \u5411\u91cf\u5730\u5740 IE0 0003H TF0 000BH IE1 0013H TF1 001BH RI & TI 0023H TF2 & EXF2 002BH \u6b64\u5916\uff0c\u4e3a\u4e86\u5916\u90e8\u4e2d\u65ad\uff08external interrupt\uff09\uff0c\u5f15\u811a INT0 \u548c INT1 \uff08P3.2 \u548c P3.3\uff09\uff0c\u5fc5\u987b\u88ab\u8bbe\u4e3a 1\uff0c\u5e76\u4e14\u53d6\u51b3\u4e8e\u4e2d\u65ad\u662f\u7535\u5e73\uff08level\uff09\u8fd8\u662f\u8fb9\u6cbf\u89e6\u53d1\uff08transition activated\uff0c\u7535\u5e73\u8f6c\u6362\u89e6\u53d1\uff1f\u610f\u601d\u5e94\u8be5\u5c31\u662f edge triggered\uff0c\u8fb9\u6cbf\u89e6\u53d1\uff09\uff0cTCON \uff08Timer/Counter Control\uff0c\u8ba1\u65f6\u5668/\u8ba1\u6570\u5668\u63a7\u5236\uff09\u5bc4\u5b58\u5668\u4e2d\u7684 IT0\uff08Inerrupt 0 type control bit. \u4e2d\u65ad 0 \u7c7b\u578b\u63a7\u5236\u4f4d\uff09 \u6216 IT1 \uff08Inerrupt 1 type control bit. \u4e2d\u65ad 1 \u7c7b\u578b\u63a7\u5236\u4f4d\uff09\u4f4d\u53ef\u80fd\u88ab\u8bbe\u4e3a 1\u3002 ITx = 0 \u7535\u5e73\u89e6\u53d1\uff08level activated\uff09 ITx = 1 \u8fb9\u6cbf\u89e6\u53d1\uff08transition activated\uff0c\u6709\u4eba\u4e5f\u8bf4\u8df3\u53d8\u89e6\u53d1\uff09\uff0c\u5b9e\u9645\u4e0a\u662f\u4e0b\u964d\u6cbf\u89e6\u53d1\uff08\u8d1f\u8df3\u53d8\u89e6\u53d1\uff09 IE \u4e2d\u65ad\u4f7f\u80fd\u5bc4\u5b58\u5668\uff08INTERRUPT ENABLE REGISTER\uff09\uff0c\u53ef\u4f4d\u5bfb\u5740 \u00b6 \u5982\u679c\u4f4d\u4e3a 0\uff0c\u5219\u7981\u7528\u76f8\u5e94\u7684\u4e2d\u65ad\u3002\u5982\u679c\u4f4d\u662f 1\uff0c\u5219\u542f\u7528\u76f8\u5e94\u7684\u4e2d\u65ad\u3002 EA \u2014\u2014 ET2 ES ET1 EX1 ET0 EX0 EA IE.7 \u7981\u7528\u6240\u6709\u4e2d\u65ad\uff0c\u5982\u679cEA = 0\uff0c\u6ca1\u6709\u4e2d\u65ad\u5c06\u4f1a\u88ab\u786e\u8ba4\uff0c\u5982\u679c EA = 1\uff0c\u6bcf\u4e2a\u4e2d\u65ad\u6e90\u5730\u53ef\u72ec\u7acb\u5730\u901a\u8fc7\u8bbe\u5b9a\u6216\u5176\u4f7f\u80fd\u4f4d\u5f00\u542f\u6216\u5173\u95ed \u2014\u2014 IE.6 \u6ca1\u6709\u5b9e\u73b0\uff0c\u4fdd\u7559\u7ed9\u672a\u6765\u4f7f\u7528* ET2 IE.5 \u542f\u7528\u6216\u7981\u7528\u8ba1\u65f6\u5668 2 \u6ea2\u51fa\u6216\u6355\u83b7\u4e2d\u65ad\uff08Timer 1 overflow interrupt\uff09\uff08\u4ec5 8052 \u53ef\u7528\uff09 ES IE.4 \u542f\u7528\u6216\u7981\u7528\u4e32\u53e3\u4e2d\u65ad\uff08serial port interrupt\uff09 ET1 IE.3 \u542f\u7528\u6216\u7981\u7528\u8ba1\u65f6\u5668 1 \u6ea2\u51fa\u4e2d\u65ad\uff08Timer 1 overflow interrupt\uff09 EX1 IE.2 \u542f\u7528\u6216\u7981\u7528\u5916\u90e8\u4e2d\u65ad 1 \uff08External Interrupt 1\uff09 ET0 IE.1 \u542f\u7528\u6216\u7981\u7528\u8ba1\u65f6\u5668 0 \u6ea2\u51fa\u4e2d\u65ad\uff08Timer 0 overflow interrupt\uff09 EX0 IE.0 \u542f\u7528\u6216\u7981\u7528\u5916\u90e8\u4e2d\u65ad\uff08External Interrupt 0\uff09 *\u7528\u6237\u8f6f\u4ef6\u4e0d\u5e94\u5f53\u5411\u4fdd\u7559\u4f4d\u5199\u51651\uff0c\u8fd9\u4e9b\u4f4d\u53ef\u80fd\u5728\u672a\u6765\u7684 MCS-51 \u4ea7\u54c1\u4e2d\u88ab\u7528\u6765\u8c03\u7528\u65b0\u7684\u529f\u80fd\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u65b0\u7684\u590d\u4f4d\u6216\u65e0\u6548\u7684\u503c\u5c06\u4e3a 0\uff0c\u5176\u6709\u6548\u503c\u5c06\u4e3a 1\u3002 \u4e3a\u4e00\u4e2a\u6216\u8005\u66f4\u591a\u7684\u4e2d\u65ad\u8bbe\u7f6e\u66f4\u9ad8\u4f18\u5148\u7ea7 \u00b6 \u4e3a\u7ed9\u4e00\u4e2a\u4e2d\u65ad\u8bbe\u7f6e\u66f4\u9ad8\u7684\u4f18\u5148\u7ea7\uff0cIP \uff08Interrupt Priority Control\uff0c\u4e2d\u65ad\u4f18\u5148\u7ea7\u63a7\u5236\uff09\u5bc4\u5b58\u5668\u5fc5\u987b\u88ab\u8bbe\u4e3a1 \u8bf7\u8bb0\u4f4f\uff0c\u5f53\u4e00\u4e2a\u4e2d\u65ad\u670d\u52a1\u6b63\u5728\u8fdb\u884c\u65f6\uff0c\u5b83\u4e0d\u80fd\u88ab\u8f83\u4f4e\u6216\u540c\u7ea7\u522b\u7684\u4e2d\u65ad\u6240\u6253\u65ad\u3002 \u7ea7\u522b\u5185\u4f18\u5148\u7ea7 (PRIORITY WITHIN LEVEL) \u00b6 \u7ea7\u522b\u5185\u7684\u4f18\u5148\u7ea7\u53ea\u662f\u4e3a\u4e86\u89e3\u51b3\u540c\u4e00\u4f18\u5148\u7ea7\u7684\u540c\u65f6\u8bf7\u6c42\u3002 \u4ece\u9ad8\u5230\u4f4e\uff0c\u4e2d\u65ad\u6e90\u5217\u4e3e\u5982\u4e0b\uff1a IE0\uff08External Interrupt 0 edge flag\uff0c\u5916\u90e8\u4e2d\u65ad 0 \u8fb9\u6cbf\u6807\u5fd7\uff0c\u4f4d\u4e8e TCON \u5bc4\u5b58\u5668 \uff09 TF0\uff08Timer 0 Overflow Flag\uff0c\u8ba1\u65f6\u5668 0 \u6ea2\u51fa\u6807\u5fd7\uff0c\u4f4d\u4e8e TCON \u5bc4\u5b58\u5668 \uff09 IE1\uff08External Interrupt 1 edge flag\uff0c\u5916\u90e8\u4e2d\u65ad 1 \u8fb9\u6cbf\u6807\u5fd7\uff0c\u4f4d\u4e8e TCON \u5bc4\u5b58\u5668\uff09 TF1 \uff08Timer 1 Overflow Flag\uff0c\u8ba1\u65f6\u5668 0 \u6ea2\u51fa\u6807\u5fd7\uff0c\u4f4d\u4e8e TCON \u5bc4\u5b58\u5668\uff09 RI \u6216 TI\uff08Receive Interrupt Flag/Transmit Interrupt Flag \u4e32\u53e3\u63a5\u6536/\u53d1\u5c04\u4e2d\u65ad\u6807\u5fd7\uff0c\u4f4d\u4e8e SCON \u5bc4\u5b58\u5668\uff09 TF2 \u6216 EXF2\uff08Timer 2 Overflow Flag/Timer 2 External Flag\uff0c\u8ba1\u65f6\u5668 2 \u6ea2\u51fa/\u5916\u90e8\u6807\u5fd7\u4f4d\uff0c\u4f4d\u4e8e T2CON \u5bc4\u5b58\u5668\uff0c\u4ec5 8052 \u53ef\u7528\uff09 IP \uff08Interrupt Priority Register\uff09\u4e2d\u65ad\u4f18\u5148\u7ea7\u5bc4\u5b58\u5668\uff0c\u53ef\u4f4d\u5bfb\u5740 \u00b6 \u5982\u679c\u8be5\u4f4d\u4e3a 0\uff0c\u76f8\u5e94\u7684\u4e2d\u65ad\u5177\u6709\u8f83\u4f4e\u7684\u4f18\u5148\u7ea7\uff0c\u5982\u679c\u8be5\u4f4d\u4e3a 1\uff0c\u76f8\u5e94\u7684\u4e2d\u65ad\u5177\u6709\u8f83\u9ad8\u7684\u4f18\u5148\u7ea7\u3002 \u2014\u2014 \u2014\u2014 PT2 PS PT1 PX1 PT0 PX0 \u2014\u2014 IP.7 \u6ca1\u6709\u5b9e\u73b0\uff0c\u4fdd\u7559\u7ed9\u672a\u6765\u4f7f\u7528* \u2014\u2014 IP.6 \u6ca1\u6709\u5b9e\u73b0\uff0c\u4fdd\u7559\u7ed9\u672a\u6765\u4f7f\u7528* PT2 IP.5 \u5b9a\u4e49\u4e86\u8ba1\u65f6\u5668 2 \u4e2d\u65ad\u7684\u4f18\u5148\u7ea7\uff08\u4ec5\u9650 8052\uff09 PS IP.4 \u5b9a\u4e49\u4e86\u4e32\u53e3\u4e2d\u65ad\u7684\u4f18\u5148\u7ea7 PT1 IP.3 \u5b9a\u4e49\u4e86\u8ba1\u65f6\u5668 1 \u4e2d\u65ad\u7684\u4f18\u5148\u7ea7 PX1 IP.2 \u5b9a\u4e49\u4e86\u5916\u90e8\u4e2d\u65ad 1 \u7684\u4f18\u5148\u7ea7 PT0 IP.1 \u5b9a\u4e49\u4e86\u8ba1\u65f6\u5668 0 \u4e2d\u65ad\u7684\u4f18\u5148\u7ea7 PX0 IP.0 \u5b9a\u4e49\u4e86\u5916\u90e8\u4e2d\u65ad 0 \u7684\u4f18\u5148\u7ea7 *\u7528\u6237\u8f6f\u4ef6\u4e0d\u5e94\u5f53\u5411\u4fdd\u7559\u4f4d\u5199\u51651\uff0c\u8fd9\u4e9b\u4f4d\u53ef\u80fd\u5728\u672a\u6765\u7684 MCS-51 \u4ea7\u54c1\u4e2d\u88ab\u7528\u6765\u8c03\u7528\u65b0\u7684\u529f\u80fd\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u65b0\u7684\u590d\u4f4d\u6216\u65e0\u6548\u7684\u503c\u5c06\u4e3a 0\uff0c\u5176\u6709\u6548\u503c\u5c06\u4e3a 1\u3002 TCON \uff08Timer/Counter Control Register\uff09\u8ba1\u65f6\u5668/\u8ba1\u6570\u5668\u63a7\u5236\u5bc4\u5b58\u5668\uff0c\uff08\u65f6\u5e8f\u63a7\u5236\uff09\uff0c\u53ef\u4f4d\u5bfb\u5740 \u00b6 TF1 TR1 TF0 TR0 IE1 IT1 IE0 IT0 TF1 TCON.7 \u8ba1\u65f6\u5668 1 \u6ea2\u51fa\u6807\u793a\u503c\uff08Timer 1 overflow flag\uff09\uff0c\u5f53\u8ba1\u65f6\u5668/\u8ba1\u6570\u5668 1 \u6ea2\u51fa\u65f6\u7531\u786c\u4ef6\u8bbe\u7f6e\u3002\u5f53\u5904\u7406\u5668\u8f6c\u5230\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\uff08Interrupt Service Routine\uff0cISR\uff09\uff0c\u7531\u786c\u8f6f\u4ef6\u6e05\u9664\u3002\uff08\u539f\u53e5\u662f Cleared by hard-ware as processor vectors to the interrupt service routine.\uff09 TR1 TCON.6 \u8ba1\u65f6\u5668 1 \u8fd0\u884c\u63a7\u5236\u4f4d\uff08Timer 1 run control bit.\uff09\uff0c\u7531\u8f6f\u4ef6\u8bbe\u7f6e/\u6e05\u96f6\u6765\u6253\u5f00/\u5173\u95ed \u8ba1\u65f6\u5668/\u8ba1\u6570\u5668 1 TF0 TCON.5 \u8ba1\u65f6\u5668 1 \u6ea2\u51fa\u6807\u793a\u503c\uff08Timer 0 overflow flag\uff09\uff0c\u5f53\u8ba1\u65f6\u5668/\u8ba1\u6570\u5668 1 \u6ea2\u51fa\u65f6\u7531\u786c\u4ef6\u8bbe\u7f6e\u3002\u5728\u5904\u7406\u5668\u5411\u4e2d\u65ad\u670d\u52a1\u4f8b\u7a0b\u8f6c\u79fb\u65f6\uff0c\u7531\u786c\u8f6f\u4ef6\u6e05\u9664\u3002 TR0 TCON.4 \u8ba1\u65f6\u5668 1 \u8fd0\u884c\u63a7\u5236\u4f4d\uff08Timer 0 run control bit.\uff09\uff0c\u7531\u8f6f\u4ef6\u8bbe\u7f6e/\u6e05\u96f6\u6765\u6253\u5f00/\u5173\u95ed \u8ba1\u65f6\u5668/\u8ba1\u6570\u5668 1 IE1 TCON.3 \u5916\u90e8\u4e2d\u65ad 1 \u8fb9\u6cbf\u6807\u5fd7\uff08External Interrupt 1 edge flag\uff09\uff0c\u5f53\u5916\u90e8\u4e2d\u65ad\u8fb9\u6cbf\u88ab\u68c0\u6d4b\u5230\u65f6\u7531\u786c\u4ef6\u8bbe\u7f6e\uff0c\u5f53\u4e2d\u65ad\u88ab\u5904\u7406\u65f6\u7531\u786c\u4ef6\u6e05\u96f6 IT1 TCON.2 \u4e2d\u65ad 1 \u7c7b\u578b\u63a7\u5236\u4f4d\uff08Interrupt 1\uff09\uff0c\u7531\u8f6f\u4ef6\u8bbe\u7f6e/\u6e05\u695a\u6765\u6307\u5b9a\u4e0b\u964d\u6cbf/\u4f4e\u7535\u5e73\u89e6\u53d1\u7684\u4e2d\u65ad IE0 TCON.1 \u5916\u90e8\u4e2d\u65ad 0 \u8fb9\u6cbf\u6807\u5fd7\uff08External Interrupt 0 edge flag\uff09\uff0c\u5f53\u5916\u90e8\u4e2d\u65ad\u8fb9\u6cbf\u88ab\u68c0\u6d4b\u5230\u65f6\u7531\u786c\u4ef6\u8bbe\u7f6e\uff0c\u5f53\u4e2d\u65ad\u88ab\u5904\u7406\u65f6\u7531\u786c\u4ef6\u6e05\u96f6 IT0 TCON.0 \u4e2d\u65ad 0 \u7c7b\u578b\u63a7\u5236\u4f4d\uff0c\u7531\u8f6f\u4ef6\u8bbe\u7f6e/\u6e05\u695a\u6765\u6307\u5b9a\u4e0b\u964d\u6cbf/\u4f4e\u7535\u5e73\u89e6\u53d1\u7684\u4e2d\u65ad TMOD\uff1a\u8ba1\u65f6\u5668/\u8ba1\u6570\u5668\u6a21\u5f0f\u9009\u62e9\u5bc4\u5b58\u5668\uff08TIMER/COUNTER MODE CONTROL REGISTER\uff09 \u4e0d\u53ef\u4f4d\u5bfb\u5740 \u00b6 TIMER 1 TIMER 0 GATE C/ T M1 M0 GATE C/ T M1 M0 GATE \u5f53 TCON \u5bc4\u5b58\u5668\u4e2d\u7684 TRx \u88ab\u8bbe\u7f6e\uff0c\u5e76\u4e14 GATE = 1\uff0c\u8ba1\u65f6\u5668/\u8ba1\u6570\u5668x \u4ec5\u5728 INTx \u4f4d\u9ad8\u7535\u5e73\uff08\u786c\u4ef6\u63a7\u5236\uff09\u65f6\u8fd0\u884c\uff0c\u5f53 GATE = 0\uff0c\u8ba1\u65f6\u5668/\u8ba1\u6570\u5668 x \u4ec5\u5728 TRx = 1 \u65f6\u8fd0\u884c\uff08\u8f6f\u4ef6\u63a7\u5236\uff09 C/T \u8ba1\u65f6\u5668\u8ba1\u6570\u5668\u9009\u62e9(Timer or Counter selector)\uff0c\u6e05\u96f6\u4e3a\u8ba1\u65f6\u5668\u64cd\u4f5c\uff08\u8f93\u5165\u6765\u81ea\u5185\u90e8\u7cfb\u7edf\u65f6\u949f\uff09\uff0c\u8bbe\u7f6e\u4e3a\u8ba1\u6570\u5668\u7cfb\u7edf\uff08\u8f93\u5165\u6765\u81ea Tx \u8f93\u5165\u811a\uff09 M1 \u6a21\u5f0f\u9009\u62e9\u4f4d\uff08Mode selector bit\uff09\uff08\u9644\u6ce81\uff09 M0 \u6a21\u5f0f\u9009\u62e9\u4f4d\uff08Mode selector bit\uff09\uff08\u9644\u6ce81\uff09 M1 M0 \u64cd\u4f5c\u6a21\u5f0f\uff08Operating Mode\uff09 0 0 0 13 \u4f4d\u8ba1\u65f6\u5668\uff08\u517c\u5bb9 MCS-48\uff09 0 1 1 16 \u4f4d\u8ba1\u65f6\u5668/\u8ba1\u6570\u5668 1 0 2 8 \u4f4d\u81ea\u52a8\u91cd\u8f7d\u8ba1\u65f6\u5668/\u8ba1\u6570\u5668 1 1 3 \uff08\u8ba1\u65f6\u5668 0\uff09 TL0 \u662f\u4e00\u4e2a\u7531 \u6807\u51c6\u8ba1\u65f6\u5668 0 \u63a7\u5236\u4f4d\u63a7\u5236\u7684 8 \u4f4d\u8ba1\u65f6\u5668/\u8ba1\u6570\u5668 TH0 \u662f\u4e00\u4e2a\u7531\u6807\u51c6\u8ba1\u65f6\u5668 1 \u63a7\u5236\u4f4d\u63a7\u5236\u7684 8 \u4f4d\u8ba1\u65f6\u5668 1 1 3 (\u8ba1\u65f6\u56681) \u8ba1\u65f6\u5668/\u8ba1\u6570\u5668 \u505c\u6b62 \u8ba1\u65f6\u5668\u8bbe\u7f6e \u00b6 \u88683\u81f3\u88686\u7ed9\u51fa\u4e86\u4e00\u4e9bTMOD\u7684\u503c\uff0c\u53ef\u4ee5\u7528\u6765\u5728\u4e0d\u540c\u6a21\u5f0f\u4e0b\u8bbe\u7f6e\u5b9a\u65f6\u56680\u3002 \u8fd9\u91cc\u5047\u5b9a\u4e00\u6b21\u53ea\u4f7f\u7528\u4e00\u4e2a\u5b9a\u65f6\u5668\u3002\u5982\u679c\u5e0c\u671b\u5728\u4efb\u4f55\u6a21\u5f0f\u4e0b\u540c\u65f6\u8fd0\u884c\u5b9a\u65f6\u56680\u548c1\uff0c\u5b9a\u65f6\u56680\u7684TMOD\u503c\u5fc5\u987b\u4e0e\u5b9a\u65f6\u56681\u7684\u503c\u8fdb\u884cOR\uff08\u88685\u548c6\uff09\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u5e0c\u671b\u5728\u6a21\u5f0f1 GATE\uff08\u5916\u90e8\u63a7\u5236\uff09\u4e0b\u8fd0\u884c\u5b9a\u65f6\u56680\uff0c\u5728\u6a21\u5f0f2 COUNTER\u4e0b\u8fd0\u884c\u5b9a\u65f6\u56681\uff0c\u90a3\u4e48\u5fc5\u987b\u8f7d\u5165TMOD\u7684\u503c\u662f69H\uff08\u88683\u768409H\u4e0e\u88686\u768460H\u7684OR\uff09\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u5047\u8bbe\u7528\u6237\u5728\u6b64\u65f6\u8fd8\u6ca1\u6709\u51c6\u5907\u597d\u6253\u5f00\u5b9a\u65f6\u5668\uff0c\u800c\u662f\u5728\u7a0b\u5e8f\u4e2d\u7684\u53e6\u4e00\u4e2a\u65f6\u95f4\u70b9\u901a\u8fc7\u5c06\u4f4dTRx\uff08\u5728TCON\u4e2d\uff09\u8bbe\u7f6e\u4e3a1\u6765\u5b9e\u73b0\u3002 \u8ba1\u65f6\u5668/\u8ba1\u6570\u5668 0 \u00b6 \u4f5c\u4e3a\u8ba1\u65f6\u5668 \u00b6 td { text-align: center; } \u6a21\u5f0f \u8ba1\u65f6\u5668 0 \u529f\u80fd TMOD INTERNAL CONTROL(NOTE 1) EXTERNAL CONTROL(NOTE 2) 0 13-bit Timer 04H 0CH 1 16-bit Timer 05H 0DH 2 8bit Auto-Reload 06H 0EH 3 Two 8-bit Timers 07H 0FH \u4f5c\u4e3a\u8ba1\u6570\u5668 \u00b6 td { text-align: center; } \u6a21\u5f0f \u8ba1\u6570\u5668 0 \u529f\u80fd TMOD INTERNAL CONTROL(NOTE 1) EXTERNAL CONTROL(NOTE 2) 0 13-bit Timer 00H 08H 1 16-bit Timer 01H 09H 2 8bit Auto-Reload 02H 0AH 3 One 8-bit Counter 03H 0BH \u901a\u8fc7\u5728\u8f6f\u4ef6\u4e2d\u8bbe\u7f6e/\u6e05\u9664TR0\u4f4d\u6765\u6253\u5f00/\u5173\u95ed\u5b9a\u65f6\u5668\u3002 \u5f53TR0=1\u65f6\uff0c\u5b9a\u65f6\u5668\u901a\u8fc7 INT0 \uff08P3.2\uff09\u4e0a\u76841-0\u8f6c\u6362\u6765\u6253\u5f00/\u5173\u95ed\uff08\u786c\u4ef6\u63a7\u5236\uff09\u3002 \u8ba1\u65f6\u5668/\u8ba1\u6570\u5668 1 \u00b6 \u4f5c\u4e3a\u8ba1\u65f6\u5668 \u00b6 td { text-align: center; } \u6a21\u5f0f \u8ba1\u65f6\u5668 1 \u529f\u80fd TMOD INTERNAL CONTROL(NOTE 1) EXTERNAL CONTROL(NOTE 2) 0 13-bit Timer 00H 80H 1 16-bit Timer 10H 90H 2 8bit Auto-Reload 20H A0H 3 Two 8-bit Timers 30H B0H \u4f5c\u4e3a\u8ba1\u6570\u5668 \u00b6 td { text-align: center; } \u6a21\u5f0f \u8ba1\u6570\u5668 1 \u529f\u80fd TMOD INTERNAL CONTROL(NOTE 1) EXTERNAL CONTROL(NOTE 2) 0 13-bit Timer 40H C0H 1 16-bit Timer 50H D0H 2 8bit Auto-Reload 60H E0H 3 One 8-bit Counter -- -- \u901a\u8fc7\u5728\u8f6f\u4ef6\u4e2d\u8bbe\u7f6e/\u6e05\u9664 TR1 \u4f4d\u6765\u6253\u5f00/\u5173\u95ed\u5b9a\u65f6\u5668\u3002 \u5f53 TR1=1 \u65f6\uff0c\u5b9a\u65f6\u5668\u901a\u8fc7 INT1 \uff08P3.3\uff09\u4e0a\u76841-0\u8f6c\u6362\u6765\u6253\u5f00/\u5173\u95ed\uff08\u786c\u4ef6\u63a7\u5236\uff09\u3002 T2CON \uff08Timer/Counter 2 Control Register\uff09\u8ba1\u65f6\u5668/\u8ba1\u6570\u5668 2 \u63a7\u5236\u5bc4\u5b58\u5668\uff0c\uff08\u65f6\u5e8f\u63a7\u5236\uff09\uff0c\u53ef\u4f4d\u5bfb\u5740\uff0c\u4ec5\u96508052 \u00b6 TF2 EXF2 RCLK TCLK EXEN2 TR2 C/ T2 CP/ RL2 TF2 T2CON.7 \u8ba1\u65f6\u56682\u7684\u6ea2\u51fa\u6807\u5fd7\uff08Transmit clock flag\uff09\u7531\u786c\u4ef6\u8bbe\u7f6e\uff0c\u7531\u8f6f\u4ef6\u6e05\u9664\u3002TF2\u4e0d\u80fd\u88ab\u8bbe\u7f6e\uff0c\u5f53 RCLK=1\u6216CLK=1\u65f6\uff0c\u4e0d\u80fd\u8bbe\u7f6eTF2\u3002 EXF2 T2CON.6 \u5b9a\u65f6\u56682\u5916\u90e8\u6807\u5fd7\uff08Timer 2 external flag\uff09\u5f53T2EX\u4e0a\u7684\u4e0b\u964d\u6cbf\u5f15\u8d77\u6355\u83b7\u6216\u91cd\u8f7d\u65f6\u88ab\u8bbe\u7f6e\uff0c\u5e76\u4e14EXEN2 = 1\u3002\u5f53\u5b9a\u65f6\u56682\u4e2d\u65ad\u88ab\u542f\u7528\u65f6\uff0cEXF2 e 1\u5c06\u5bfc\u81f4CPU\u5411\u91cf\u5230\u5b9a\u65f6\u56682\u4e2d\u65ad\u7a0b\u5e8f\u3002EXF2\u5fc5\u987b\u7531\u8f6f\u4ef6\u6765\u6e05\u9664 RCLK T2CON.5 \u63a5\u6536\u65f6\u949f\u6807\u5fd7\uff08Receive clock flag\uff09\u3002\u5f53\u8bbe\u7f6e\u65f6\uff0c\u4f7f\u4e32\u884c\u7aef\u53e3\u5728\u6a21\u5f0f1\u548c3\u4e2d\u4f7f\u7528\u5b9a\u65f6\u56682\u7684\u6ea2\u51fa\u8109\u51b2\u4f5c\u4e3a\u5176\u63a5\u6536\u65f6\u949f\u3002RCLK = 0\u4f1a\u4f7f\u5b9a\u65f6\u56681\u7684\u6ea2\u51fa\u7528\u4e8e\u63a5\u6536\u65f6\u949f\u3002 TLCK T2CON.4 \u53d1\u9001\u65f6\u949f\u6807\u5fd7\uff08Transmit clock flag\uff09\u3002\u5f53\u8bbe\u7f6e\u65f6\uff0c\u5bfc\u81f4\u4e32\u884c\u7aef\u53e3\u5728\u6a21\u5f0f1\u548c3\u4e2d\u4f7f\u7528\u5b9a\u65f6\u56682\u7684\u6ea2\u51fa\u8109\u51b2\u4f5c\u4e3a\u5176\u53d1\u9001\u65f6\u949f\u3002TCLK = 0\u4f1a\u4f7f\u5b9a\u65f6\u56681\u7684\u6ea2\u51fa\u8109\u51b2\u88ab\u7528\u4e8e\u53d1\u9001\u65f6\u949f\u3002 EXEN2 T2CON.3 \u5b9a\u65f6\u56682\u5916\u90e8\u4f7f\u80fd\u6807\u5fd7\uff08 Timer 2 external enable flag.\uff09\u3002\u5f53\u8bbe\u7f6e\u65f6\uff0c\u5982\u679c\u5b9a\u65f6\u56682\u6ca1\u6709\u88ab\u7528\u4e8e\u4e32\u884c\u7aef\u53e3\u7684\u65f6\u949f\uff0c\u5219\u5141\u8bb8\u5728T2EX\u7684\u8d1f\u8f6c\u6362\u4e2d\u53d1\u751f\u6355\u83b7\u6216\u91cd\u8f7d\u3002EXEN2 = 0\u4f7f\u5b9a\u65f6\u56682\u5ffd\u7565T2EX\u7684\u4e8b\u4ef6\u3002 TR2 T2CON.2 \u8ba1\u65f6\u56682\u7684\u8f6f\u4ef6\u542f\u52a8/\u505c\u6b62\u63a7\u5236\uff08Software START/STOP control for Timer 2.\uff09\u3002\u4e00\u4e2a \u903b\u8f91 1 \u542f\u52a8\u5b9a\u65f6\u5668\u3002 C/T2 T2CON.1 \u8ba1\u65f6\u5668\u6216\u8ba1\u6570\u5668\u9009\u62e9\u3002 0 = \u5185\u90e8\u5b9a\u65f6\u5668\u3002 1 = \u5916\u90e8\u4e8b\u4ef6\u8ba1\u6570\u5668\uff08\u4e0b\u964d\u6cbf\u89e6\u53d1\uff09\u3002 CP/RL2 T2CON.0 \u6355\u83b7/\u52a0\u8f7d\u6807\u5fd7\u3002\u5f53\u8bbe\u7f6e\u65f6\uff0c\u5982\u679c EXEN2 = 1\uff0c\u6355\u83b7\u5c06\u53d1\u751f\u5728 T2EX \u7684\u4e0b\u964d\u6cbf\u3002\u5f53\u6e05\u96f6\u65f6\uff0c\u81ea\u52a8\u52a0\u8f7d\u5c06\u5728\u5b9a\u65f6\u5668 2 \u6ea2\u51fa\u6216 EXEN2 = 1 \u65f6 T2EX \u7684\u4e0b\u964d\u6cbf\u53d1\u751f\u3002\u5f53RCLK = 1\u6216TCLK = 1\u65f6\uff0c\u8be5\u4f4d\u88ab\u5ffd\u7565\uff0c\u5b9a\u65f6\u5668\u5728\u5b9a\u65f6\u5668 2 \u6ea2\u51fa\u65f6\u88ab\u5f3a\u5236\u81ea\u52a8\u52a0\u8f7d\u3002 \u8ba1\u65f6\u5668/\u8ba1\u6570\u5668 2 \u8bbe\u7f6e \u00b6 \u9664\u4e86\u6ce2\u7279\u7387\u53d1\u751f\u5668\u6a21\u5f0f\uff0cT2CON\u7684\u6570\u503c\u4e0d\u5305\u62ecTR2\u4f4d\u7684\u8bbe\u7f6e\u3002 \u56e0\u6b64\uff0c\u5fc5\u987b\u5355\u72ec\u8bbe\u7f6eTR2\u4f4d\uff0c\u4ee5\u6253\u5f00\u5b9a\u65f6\u5668\u3002 \u4f5c\u4e3a\u8ba1\u65f6\u5668 \u00b6 td { text-align: center; } \u6a21\u5f0f T2CON INTERNAL CONTROL(NOTE 1) EXTERNAL CONTROL(NOTE 2) 16-bit Auto-Reload 00H 08H 16-bit Capture 01H 09H BAUD rate generator receive & transmit same baud rate 34H 36H receive only 24H 26H transmit only 14H 16H \u4f5c\u4e3a\u8ba1\u6570\u5668 \u00b6 td { text-align: center; } \u6a21\u5f0f T2CON INTERNAL CONTROL(NOTE 1) EXTERNAL CONTROL(NOTE 2) 0 16-bit Auto-Reload 02H 0AH 1 16-bit Capture 03H 0BH \u6355\u83b7/\u52a0\u8f7d\u4ec5\u5728\u5b9a\u65f6\u5668/\u8ba1\u6570\u5668\u6ea2\u51fa\u65f6\u53d1\u751f\u3002 \u6355\u83b7/\u52a0\u8f7d\u53d1\u751f\u5728\u5b9a\u65f6\u5668/\u8ba1\u6570\u5668\u6ea2\u51fa\u548cT2EX(P1.1)\u5f15\u811a\u76841\u52300\u8f6c\u6362\uff0c\u9664\u975e\u5b9a\u65f6\u56682\u88ab\u7528\u4e8e\u6ce2\u7279\u7387\u751f\u6210\u6a21\u5f0f\u4e2d\u3002 SCON: \u4e32\u53e3\u8bbe\u7f6e\u5bc4\u5b58\u5668\uff08SERIAL PORT CONTROL REGISTER\uff09\u53ef\u4f4d\u5bfb\u5740 SM0 SM1 SM2 REN TB8 RB8 TI RI SM0 SCON. 7 \u4e32\u53e3\u6a21\u5f0f\u6307\u5b9a\uff08Serial Port mode specifier.\uff09 (NOTE 1). SM1 SCON. 6 \u4e32\u53e3\u6a21\u5f0f\u6307\u5b9a\uff08Serial Port mode specifier.\uff09(NOTE 1). SM2 SCON. 5 \u542f\u7528\u6a21\u5f0f2\u548c3\u4e2d\u7684\u591a\u5904\u7406\u5668\u901a\u4fe1\u529f\u80fd\u3002\u5728\u6a21\u5f0f2\u62163\u4e2d\uff0c\u5982\u679cSM2\u8bbe\u7f6e\u4e3a1\uff0c\u90a3\u4e48\u5982\u679c\u6536\u5230\u7684\u7b2c9\u4e2a\u6570\u636e\u4f4d\uff08RB8\uff09\u4e3a0\uff0cRI\u5c06\u4e0d\u4f1a\u88ab\u6fc0\u6d3b\u3002\u5728\u6a21\u5f0f1\u4e2d\uff0c\u5982\u679cSM2 e 1\uff0c\u90a3\u4e48\u5982\u679c\u6ca1\u6709\u6536\u5230\u4e00\u4e2a\u6709\u6548\u7684\u505c\u6b62\u4f4d\uff0cRI\u5c06\u4e0d\u4f1a\u88ab\u6fc0\u6d3b\u3002\u5728\u6a21\u5f0f0\u4e2d\uff0cSM2\u5e94\u8be5\u4e3a0\u3002 (\u89c1\u8868 9). REN SCON. 4 \u901a\u8fc7\u8f6f\u4ef6\u8bbe\u7f6e/\u6e05\u9664\uff0c\u542f\u7528/\u7981\u7528\u63a5\u6536\uff08Enable/Disable reception\uff09\u3002 TB8 SCON. 3 \u5c06\u5728\u6a21\u5f0f2\u548c3\u4e2d\u4f20\u8f93\u7684\u7b2c9\u4f4d\uff08The 9th bit that will be transmitted\uff09\u3002\u7531\u8f6f\u4ef6\u8bbe\u7f6e/\u6e05\u9664\u3002 RB8 SCON. 2 \u5728\u6a21\u5f0f2\u548c3\u4e2d\uff0c\u662f\u6536\u5230\u7684\u7b2c9\u4e2a\u6570\u636e\u4f4d\uff089th data bit that was received\uff09\u3002\u5728\u6a21\u5f0f1\u4e2d\uff0c\u5982\u679cSM2 = 0\uff0cRB8\u662f\u63a5\u6536\u7684\u505c\u6b62\u4f4d\u3002\u662f\u6536\u5230\u7684\u505c\u6b62\u4f4d\u3002\u5728\u6a21\u5f0f0\u4e2d\uff0cRB8\u4e0d\u88ab\u4f7f\u7528\u3002 TI SCON. 1 \u53d1\u9001\u4e2d\u65ad\u6807\u5fd7\uff08Transmit interrupt flag\uff09\u3002\u7531\u786c\u4ef6\u5728\u6a21\u5f0f0\u7684\u7b2c8\u4f4d\u65f6\u95f4\u7ed3\u675f\u65f6\u8bbe\u7f6e\uff0c\u6216\u5728\u5176\u4ed6\u6a21\u5f0f\u7684\u505c\u6b62\u4f4d\u5f00\u59cb\u65f6\u8bbe\u7f6e\u3002\u5728\u5176\u4ed6\u6a21\u5f0f\u4e0b\uff0c\u5728\u505c\u6b62\u4f4d\u5f00\u59cb\u65f6\u7531\u786c\u4ef6\u8bbe\u7f6e\u3002\u5fc5\u987b\u7531\u8f6f\u4ef6\u6e05\u9664\u3002 RI SCON. 0 \u63a5\u6536\u4e2d\u65ad\u6807\u5fd7\uff08Receive interrupt flag\uff09\u3002\u5728\u6a21\u5f0f0\u4e2d\u7684\u7b2c8\u4f4d\u65f6\u95f4\u7ed3\u675f\u65f6\u7531\u786c\u4ef6\u8bbe\u7f6e\uff0c\u5728\u5176\u4ed6\u6a21\u5f0f\u4e2d\u7684\u505c\u6b62\u4f4d\u65f6\u95f4\u7684\u4e00\u534a\u65f6\u7531\u786c\u4ef6\u8bbe\u7f6e\u3002\u5728\u5176\u4ed6\u6a21\u5f0f\u4e0b\uff0c\u5728\u505c\u6b62\u4f4d\u65f6\u95f4\u7684\u4e00\u534a\u65f6\u7531\u786c\u4ef6\u8bbe\u7f6e\uff08\u9664\u4e86\u89c1SM2\uff09\u3002\u5fc5\u987b\u7531\u8f6f\u4ef6\u6e05\u9664\u3002 NOTE 1: SM0 SM1 \u6a21\u5f0f \u63cf\u8ff0 \u6ce2\u7279\u7387(Baud Rate) 0 0 0 \u5207\u6362\u5bc4\u5b58\u5668 Fosc./12 0 1 1 8-bit UART \u53ef\u53d8 1 0 2 9-bit UART Fosc/64 \u6216 Fosc./32 1 1 3 9-bit UART \u53ef\u53d8 \u4e32\u53e3\u8bbe\u7f6e \u00b6 \u88689 \u00b6 td { text-align: center; } MODE SCON SM2 \u7684\u53d8\u5316 0 10H \u5355\u5904\u7406\u5668\u73af\u5883\uff08SM2 = 0\uff09 1 50H 2 90H 3 D0H 0 NS \u591a\u5904\u7406\u5668\u73af\u5883\uff08SM2 = 1\uff09 1 70H 2 B0H 3 F0H \u4ea7\u751f\u6ce2\u7279\u7387\uff08GENERATING BAUD RATES\uff09 \u00b6 \u6a21\u5f0f 0 \u7684\u4e32\u53e3\uff08Serial Port in Mode 0\uff09: \u00b6 \u6a21\u5f0f 0 \u6709\u4e00\u4e2a\u56fa\u5b9a\u7684\u6ce2\u7279\u7387\uff0c\u662f\u632f\u8361\u5668\u9891\u7387\u7684 1/12\u3002\u8981\u5728\u8fd9\u79cd\u6a21\u5f0f\u4e0b\u8fd0\u884c\u4e32\u53e3\uff0c\u4e0d\u9700\u8981\u8bbe\u7f6e\u4efb\u4f55\u7684 \u5b9a\u65f6\u5668/\u8ba1\u6570\u5668\u90fd\u4e0d\u9700\u8981\u88ab\u8bbe\u7f6e\u3002\u53ea\u6709 SCON \u5bc4\u5b58\u5668\u9700\u8981\u88ab\u5b9a\u4e49\u3002 \u6a21\u5f0f 1 \u7684\u4e32\u53e3\uff08Serial Port in Mode 0\uff09: \u00b6 \u6a21\u5f0f1\u6709\u4e00\u4e2a\u53ef\u53d8\u7684\u6ce2\u7279\u7387\u3002\u6ce2\u7279\u7387\u53ef\u4ee5\u7531\u5b9a\u65f6\u56681\u6216\u5b9a\u65f6\u56682\u4ea7\u751f\uff08\u4ec58052\uff09\u3002 \u8981\u7528\u4e8e\u6b64\u7528\u9014\uff0c\u5b9a\u65f6\u56681\u88ab\u7528\u4e8e\u6a21\u5f0f2\uff08\u81ea\u52a8\u91cd\u8f7d\uff09\u3002\u8bf7\u53c2\u8003\u672c\u7ae0\u7684\u5b9a\u65f6\u5668\u8bbe\u7f6e\u90e8\u5206\u3002 TH1 \u5fc5\u987b\u662f\u4e00\u4e2a\u6574\u6570\u503c\u3002\u5c06 TH1 \u56db\u820d\u4e94\u5165(Rounding off)\u5230\u6700\u63a5\u8fd1\u7684\u6574\u6570\u53ef\u80fd\u4e0d\u4f1a\u4ea7\u751f\u6240\u9700\u7684\u6ce2\u7279\u7387\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u53ef\u80fd\u4e0d\u5f97\u4e0d\u9009\u62e9\u53e6\u4e00\u79cd\u6676\u4f53\u9891\u7387\u3002 \u7531\u4e8ePCON\u5bc4\u5b58\u5668\u662f\u4e0d\u53ef\u5bfb\u5740\u7684\uff0c\u8bbe\u7f6e\u8be5\u4f4d\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u5bf9PCON\u5bc4\u5b58\u5668\u8fdb\u884c\u903b\u8f91OR\u3002(\u5373ORL PCON,\u00dd 80H)\u3002PCON\u7684\u5730\u5740\u662f87H\u3002 \u4f7f\u7528\u5b9a\u65f6\u5668/\u8ba1\u6570\u56682\u6765\u4ea7\u751f\u6ce2\u7279\u7387\u3002 \u00b6 \u4e3a\u6b64\uff0c\u5fc5\u987b\u5728\u6ce2\u7279\u7387\u4ea7\u751f\u6a21\u5f0f\u4e0b\u4f7f\u7528\u5b9a\u65f6\u56682\u3002\u8bf7\u53c2\u8003\u672c\u7ae0\u7684\u5b9a\u65f6\u56682\u8bbe\u7f6e\u8868\u3002\u5982\u679c\u5b9a\u65f6\u56682\u901a\u8fc7\u5f15\u811aT2\uff08P1.0\uff09\u8fdb\u884c\u65f6\u949f\u63a7\u5236\uff0c\u5219\u6ce2\u7279\u7387\u4e3a\uff1a \u800c\u5982\u679c\u662f\u5185\u90e8\u65f6\u949f\uff0c\u90a3\u4e48\u6ce2\u7279\u7387\u5c31\u662f: \u4e3a\u4e86\u83b7\u5f97RCAP2H\u548cRCAP2L\u7684\u91cd\u8f7d\u503c\uff0c\u4e0a\u8ff0\u516c\u5f0f\u53ef\u4ee5\u6539\u5199\u4e3a\uff1a \u6a21\u5f0f2\u4e2d\u7684\u4e32\u884c\u7aef\u53e3\u3002 \u00b6 \u5728\u8fd9\u79cd\u6a21\u5f0f\u4e0b\uff0c\u6ce2\u7279\u7387\u662f\u56fa\u5b9a\u7684\uff0c\u662f\u632f\u8361\u5668\u9891\u7387\u7684\uff08/32\uff09\u6216\uff08/64\uff09\uff0c\u53d6\u51b3\u4e8ePCON\u5bc4\u5b58\u5668\u4e2dSMOD\u4f4d\u7684\u503c\u3002\u5728\u8fd9\u79cd\u6a21\u5f0f\u4e0b\uff0c\u4e0d\u4f7f\u7528\u4efb\u4f55\u5b9a\u65f6\u5668\uff0c\u65f6\u949f\u6765\u81ea\u5185\u90e8\u7684 2 \u76f8\u65f6\u949f\u3002 SMOD = 1, Baud Rate = 1/32 Osc Freq. SMOD = 0, Baud Rate = 1/64 Osc Freq. \u8981\u8bbe\u7f6eSMOD\u4f4d\u3002ORL PCON,#80H\u3002PCON\u7684\u5730\u5740\u662f87H\u3002 \u6a21\u5f0f3\u4e0b\u7684\u4e32\u884c\u7aef\u53e3\u3002 \u00b6 \u6a21\u5f0f3\u4e2d\u7684\u6ce2\u7279\u7387\u662f\u53ef\u53d8\u7684\uff0c\u5176\u8bbe\u7f6e\u4e0e\u6a21\u5f0f1\u4e2d\u5b8c\u5168\u76f8\u540c\u3002","title":"Intel MCS-51 \u7f16\u7a0b\u53ca\u6307\u4ee4\u96c6\u624b\u518c"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/Intel%20MCS-51%20%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C_%E5%AF%84%E5%AD%98%E5%99%A8%E9%83%A8%E5%88%86/#intel-mcs-51","text":"Intel MCS-51 Programmer\u2019s Guide and Instruction Set \u7684\u7ffb\u8bd1","title":"Intel MCS-51 \u7f16\u7a0b\u53ca\u6307\u4ee4\u96c6\u624b\u518c"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/Intel%20MCS-51%20%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C_%E5%AF%84%E5%AD%98%E5%99%A8%E9%83%A8%E5%88%86/#_1","text":"","title":"\u5b58\u50a8\u5668\u7ed3\u6784"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/Intel%20MCS-51%20%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C_%E5%AF%84%E5%AD%98%E5%99%A8%E9%83%A8%E5%88%86/#_2","text":"8051 \u62e5\u6709\u72ec\u7acb\u5730\u5740\u7a7a\u95f4\uff08address spaces\uff09\u7684\u7a0b\u5e8f\u5b58\u50a8\u5668\uff08Program Memory\uff09\u548c\u6570\u636e\u5b58\u50a8\u5668\uff08Data Memory\uff09\u3002\u7a0b\u5e8f\u5b58\u50a8\u5668\u53ef\u4ee5\u957f\u8fbe 64KB\uff0c \u8f83\u4f4e\uff08\u5730\u5740\uff09\u7684 4K\uff08\u5bf9 8052 \u6765\u8bf4\u662f8K\uff09\u53ef\u80fd\u4f4d\u4e8e\u82af\u7247\u4e0a\uff08reside on-chip\uff09","title":"\u7a0b\u5e8f\u5b58\u50a8\u5668"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/Intel%20MCS-51%20%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C_%E5%AF%84%E5%AD%98%E5%99%A8%E9%83%A8%E5%88%86/#_3","text":"8051 \u53ef\u4ee5\u5bfb\u5740\u591a\u8fbe 64KB \u7684\u7247\u5916\u6570\u636e\u5b58\u50a8\u5668\u3002 MOVX \u6307\u4ee4\u88ab\u7528\u4e8e\u8bbf\u95ee\u5916\u7f6e\u5b58\u50a8\u5668\uff08\u8be6\u7ec6\u63cf\u8ff0\u53c2\u8003 MCS-51 \u6307\u4ee4\u96c6 \u7ae0\u8282\uff09 8051 \u62e5\u6709 128 \u5b57\u8282\u7684\u7247\u4e0a RAM \uff088052 \u662f 256 \u5b57\u8282\uff09 \u4ee5\u53ca\u4e00\u4e9b\u7279\u6b8a\u529f\u80fd\u5bc4\u5b58\u5668\uff08Special Function Registers, SFRs\uff09. \u8f83\u4f4e\uff08\u5730\u5740\uff09\u7684 128 bytes \u65e2\u53ef\u4ee5\u88ab\u76f4\u63a5\u5bfb\u5740\uff08MOV data addr\uff09\u4e5f\u53ef\u4ee5\u88ab\u95f4\u63a5\u5bfb\u5740\uff08MOV @Ri\uff09\uff0c\u56fe 3 \u5c55\u793a\u4e86 8051 \u548c 8052 \u7684\u6570\u636e\u5b58\u50a8\u5668\u7ed3\u6784\u3002","title":"\u6570\u636e\u5b58\u50a8\u5668"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/Intel%20MCS-51%20%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C_%E5%AF%84%E5%AD%98%E5%99%A8%E9%83%A8%E5%88%86/#_4","text":"\u6ce8\u610f\u56fe 3b \u4e2d \uff0c\u7279\u6b8a\u529f\u80fd\u5bc4\u5b58\u5668\uff08SFRs\uff09\u548c\u95f4\u63a5\u5bfb\u5740 RAM \u62e5\u6709\u76f8\u540c\u7684\u5730\u5740\uff0880H-0FFFH\uff09. \u4f46\u662f\u5b83\u4eec\u662f\u7528\u4e24\u79cd\u4e0d\u540c\u65b9\u5f0f\u8bbf\u95ee\u7684\uff0c\u4e24\u5757\u72ec\u7acb\u7684\u533a\u57df \u4f8b\u5982\u6307\u4ee4\uff1a MOV 80H,#0AAH \u5c06\u4f1a\u5199\u5165 0AAH \u5230 Port 0\uff0c\u8fd9\u662f\u4e00\u4e2a\u7279\u6b8a\u529f\u80fd\u5bc4\u5b58\u5668\uff0c\u53e6\u4e00\u79cd\u6307\u4ee4\uff1a MOV R0,#80H MOV @R0,#0BBH \u5c06\u4f1a\u5728\u6570\u636e RAM \u4e2d\u7684 80H \u5199\u5165 0BBBH\uff0c\u56e0\u6b64\uff0c\u5728\u6267\u884c\u4e86\u4e0a\u8ff0\u7684\u4e24\u79cd\u6307\u4ee4\u540e\uff0c\u7aef\u53e3 0 \u5c06\u5305\u542b 0AAH\uff0c RAM\u7684 80 \u4f4d\u7f6e \u5c06\u5305\u542b 0BBH\u3002 \u6ce8\u610f\uff0c\u6808\u64cd\u4f5c\uff08Stack Operation\uff0c\u628a Stack \u7ffb\u8bd1\u6210\u5806\u6808\u8fd9\u5408\u7406\u5417\uff1f\uff09\u662f\u95f4\u63a5\u5bfb\u5740\u7684\u5b9e\u4f8b\uff0c\u6240\u4ee5\u5728\u90a3\u4e9b\u5b9e\u73b0 256 \u5b57\u8282\u5185\u7f6e RAM \u7684\u8bbe\u5907\u4e2d\uff0c\u6570\u636e RAM \u7684\u4e0a\u90e8 128 \u5b57\u8282\u53ef\u7528\u4f5c\u6808\u7a7a\u95f4\u3002","title":"\u95f4\u63a5\u5bfb\u5740\u533a\u57df"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/Intel%20MCS-51%20%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C_%E5%AF%84%E5%AD%98%E5%99%A8%E9%83%A8%E5%88%86/#_5","text":"\u53ef\u4ee5\u901a\u8fc7\u76f4\u63a5\u548c\u95f4\u63a5\u5bfb\u5740\u8bbf\u95ee\u7684128\u5b57\u8282\u7684RAM\u53ef\u4ee5\u5206\u4e3a3\u4e2a\u90e8\u5206\uff08\u5de5\u4f5c\u5bc4\u5b58\u5668\u7ec4\u533a\u3001\u4f4d\u5bfb\u5740\u533a\u3001\u6570\u636e\u7f13\u51b2\u533a\uff09\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002 1. \u5bc4\u5b58\u5668\u7ec4\uff08Register Banks\uff09 0-3 \uff1a\u4f4d\u7f6e\u4ece 0 \u5230 1FH \uff0832\u5b57\u8282\uff09\u3002ASM-51 \u548c\u4ee5\u53ca\u590d\u4f4d\u540e\u7684\u8bbe\u5907\u9ed8\u8ba4\u4e3a\u7ec40\uff08Bank 0\uff09\uff0c\u4f7f\u7528\u5176\u4ed6\u7684\u5bc4\u5b58\u5668\u7ec4\u5fc5\u987b\u5728\u8f6f\u4ef6\uff08\u53c2\u8003 MCS-51 Micro Assembler User's Guide \uff09\u6bcf\u4e2a\u5bc4\u5b58\u5668\u7ec4\u5305\u542b\u4e86 8 \u4e2a\u5355\u5b57\u8282\u5bc4\u5b58\u5668\uff0c\u4ece 0 \u5230 7 \u3002 \u590d\u4f4d\u521d\u59cb\u5316\u6808\u6307\u9488\uff08Stack Pointer\uff0cSP\uff09\u5230\u4f4d\u7f6e 07H \u5e76\u4e14\u4ed6\u88ab\u9012\u589e\u4e00\u6b21\uff0c\u4ece\u4f4d\u7f6e 08H \u5f00\u59cb\uff0c\uff0c\u8fd9\u662f\u7b2c\u4e8c\u4e2a\u5bc4\u5b58\u5668\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5bc4\u5b58\u5668\uff08RO\uff09\u3002\u56e0\u6b64\uff0c\u4e3a\u4e86\u4f7f\u7528\u4e00\u4e2a\u4ee5\u4e0a\u7684\u5bc4\u5b58\u5668\u7ec4\uff0cSP\u5e94\u8be5\u88ab\u521d\u59cb\u5316\u5230RAM\u4e2d\u4e0d\u7528\u4e8e\u6570\u636e\u5b58\u50a8\u7684\u4e0d\u540c\u4f4d\u7f6e\uff08\u5373RAM\u7684\u8f83\u9ad8\u90e8\u5206\uff09\u3002 2. \u4f4d\u5bfb\u5740\u533a\uff08Bit Addressable Area\uff09 \uff1a\u8be5\u6bb5\u670916\u4e2a\u5b57\u8282\uff0c20H-2FH\u3002\u8be5\u6bb5\u7684128\u4f4d\u4e2d\u7684\u6bcf\u4e00\u4f4d\u90fd\u53ef\u4ee5\u88ab\u76f4\u63a5\u5bfb\u5740\uff080-7FH\uff09\u3002 \u8fd9\u4e9b\u4f4d\u53ef\u4ee5\u7528\u4e24\u79cd\u65b9\u5f0f\u6765\u6307\u4ee3\uff0c\u8fd9\u4e24\u79cd\u65b9\u5f0f\u90fd\u662fASM-51\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\u4e00\u79cd\u65b9\u5f0f\u662f\u53c2\u8003\u5b83\u4eec\u7684\u5730\u5740\uff0c\u53730\u52307FH\u3002\u53e6\u4e00\u79cd\u65b9\u5f0f\u662f\u53c2\u8003\u5b57\u828220H\u81f32FH\u3002\u56e0\u6b64\uff0c0-7\u4f4d\u4e5f\u53ef\u4ee5\u79f0\u4e3a20.0-20.7\u4f4d\uff0c8-FH\u4f4d\u4e0e21.0-21.7\u4f4d\u76f8\u540c\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u672c\u6bb516\u4e2a\u5b57\u8282\u4e2d\u7684\u6bcf\u4e00\u4e2a\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u5b57\u8282\u6765\u5bfb\u5740\u3002 3. \u6570\u636e\u7f13\u51b2\u533a\uff08Scrath Pad Area\uff09 \uff1a30H \u5230 7FH \u5b57\u8282\u53ef\u4ee5\u4f5c\u4e3a\u6570\u636eRAM\u63d0\u4f9b\u7ed9\u7528\u6237\u3002\u4f46\u662f\uff0c\u5982\u679c\u5806\u6808\u6307\u9488\u88ab\u521d\u59cb\u5316\u5230\u8fd9\u4e2a\u533a\u57df\uff0c\u5e94\u8be5\u7559\u51fa\u8db3\u591f\u6570\u91cf\u7684\u5b57\u8282\u4ee5\u9632\u6b62 SP \u6570\u636e\u88ab\u7834\u574f\u3002","title":"\u76f4\u63a5\u548c\u95f4\u63a5\u5bfb\u5740\u533a\u57df"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/Intel%20MCS-51%20%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C_%E5%AF%84%E5%AD%98%E5%99%A8%E9%83%A8%E5%88%86/#_6","text":"\u8868 1 \u5305\u542b\u4e86\u6240\u6709 SFR \u53ca\u5176\u5730\u5740\u7684\u5217\u8868\u3002 \u5bf9\u6bd4\u8868 1 \u548c\u56fe 5 \u53ef\u4ee5\u770b\u51fa\uff0c\u6240\u6709\u53ef\u5bfb\u5740\u7684\u5b57\u8282\u548c\u4f4d\u7684 SFR \u90fd\u4f4d\u4e8e\u56fe 5 \u4e2d\u7684\u7b2c\u4e00\u5217(\u53ef\u4ee5\u88ab8\u6574\u9664)\u3002 \u7b26\u53f7 (Symbol\uff09 \u540d\u79f0\uff08Name\uff09 \u5730\u5740\uff08Address\uff09 *ACC \u7d2f\u52a0\u5668\uff08Accumulator\uff09 0E0H *B \u5bc4\u5b58\u5668B 0F0H *PSW \u7a0b\u5e8f\u72b6\u6001\u5b57\uff08Program Status Word\uff09 0D0H SP \u6808\u6307\u9488\uff08Stack Pointer\uff09 81H DPTR \u53cc\u5b57\u8282\u6570\u636e\u6307\u9488\uff08Data Pointer 2 Bytes\uff09 \u2003DPL \u4f4e\u5b57\u8282\uff08Low Byte\uff09 82H \u2003DPH \u9ad8\u5b57\u8282\uff08High Byte\uff09 83H *P0 \u7aef\u53e3 0\uff08Port 0\uff09 80H *P1 \u7aef\u53e3 1\uff08Port 1\uff09 90H *P2 \u7aef\u53e3 2\uff08Port 2\uff09 0A0H *P3 \u7aef\u53e3 3\uff08Port 3\uff09 0B0H *IP \u4e2d\u65ad\u4f18\u5148\u7ea7\u63a7\u5236\uff08Interrupt Priority Control\uff09 0B8H *IE \u4e2d\u65ad\u4f7f\u80fd\u63a7\u5236\uff08Interrupt Enable Control\uff09 0A8H TMOD \u8ba1\u65f6\u5668/\u8ba1\u6570\u5668\u6a21\u5f0f\u63a7\u5236\uff08Timer/Counter Mode Control\uff09 89H *TCON \u8ba1\u65f6\u5668/\u8ba1\u6570\u5668\u63a7\u5236\uff08Timer/Counter Control\uff09 88H *+T2CON \u8ba1\u65f6\u5668/\u8ba1\u6570\u5668 2 \u63a7\u5236\uff08Timer/Counter 2 Control\uff09 0C8H TH0 \u8ba1\u65f6\u5668/\u8ba1\u6570\u5668 0 \u9ad8\u5b57\u8282\uff08Timer/Counter 0 High Byte\uff09 8CH TL0 \u8ba1\u65f6\u5668/\u8ba1\u6570\u5668 0 \u4f4e\u5b57\u8282\uff08Timer/Counter 0 Low Byte\uff09 8AH TH1 \u8ba1\u65f6\u5668/\u8ba1\u6570\u5668 1 \u9ad8\u5b57\u8282\uff08Timer/Counter 1 High Byte\uff09 8DH TL1 \u8ba1\u65f6\u5668/\u8ba1\u6570\u5668 1 \u4f4e\u5b57\u8282\uff08Timer/Counter 1 Low Byte\uff09 8BH +TH2 \u8ba1\u65f6\u5668/\u8ba1\u6570\u5668 2 \u9ad8\u5b57\u8282\uff08Timer/Counter 2 High Byte\uff09 0CDH +TL2 \u8ba1\u65f6\u5668/\u8ba1\u6570\u5668 2 \u4f4e\u5b57\u8282\uff08Timer/Counter 2 Low Byte\uff09 0CCH +RCAP2H T/C 2 \u6355\u83b7\u5bc4\u5b58\u5668\u9ad8\u5b57\u8282\uff08T/C 2 Capture Reg High Byte) 0CBH +RCAP2L T/C 2 \u6355\u83b7\u5bc4\u5b58\u5668\u4f4e\u5b57\u8282\uff08T/C 2 Capture Reg Low Byte) 0CAH *SCON \u4e32\u53e3\u63a7\u5236\uff08Serial Control\uff09 98H *SBUF \u4e32\u53e3\u6570\u636e\u7f13\u51b2\uff08Serial Data Buffer\uff09 99H PCON Power Control 87H > * \u8868\u793a\u53ef\u4f4d\u5bfb\u5740\uff08Bit addressable\uff09 > + \u8868\u793a\u4ec5 8052 \u53ef\u7528\uff088052 only\uff09 ### \u4e0a\u7535\u6216\u590d\u4f4d\u540e\uff0cSFR\u5305\u542b\u4ec0\u4e48\u5185\u5bb9\uff1f \u8868 2 \u5217\u51fa\u4e86\u7279\u6b8a\u529f\u80fd\u5bc4\u5b58\u5668\u5728\u4e0a\u7535\u6216\u8005\u786c\u4ef6\u590d\u4f4d\u540e\u7684\u5185\u5bb9\uff1a \u672c\u8282\u5217\u51fa\u4e86\u90a3\u4e9b\u4e3a\u5404\u79cd\u529f\u80fd\u5206\u914d\u4e86\u4f4d\u7684 SFR\u3002\u63d0\u4f9b\u6bcf\u4e2a\u4f4d\u7684\u7b80\u8981\u8bf4\u660e\u4ee5\u4f9b\u5feb\u901f\u53c2\u8003\u3002\u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u672c\u4e66\u7684\u67b6\u6784\u7ae0\u8282\u3002","title":"\u7279\u6b8a\u529f\u80fd\u5bc4\u5b58\u5668"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/Intel%20MCS-51%20%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C_%E5%AF%84%E5%AD%98%E5%99%A8%E9%83%A8%E5%88%86/#pswprogram-status-word","text":"CY AC F0 RS1 RS0 OV \u2014\u2014 P CY PSW.7 \u8fdb\u4f4d\u6807\u5fd7\u4f4d\uff08Carry Flag\uff09 AC PSW.6 \u8f85\u52a9\u8fdb\u4f4d\u6807\u5fd7\u4f4d\uff08Auxiliary Carray Flag\uff09 F0 PSW.5 \u6807\u5fd7\u4f4d0\uff08Flag 0\uff09\uff0c\u53ef\u4f9b\u7528\u6237\u7528\u4e8e\u4e00\u822c\u7528\u9014 RS1 PSW.4 \u5bc4\u5b58\u5668\u7ec4\u9009\u62e9\u4f4d 1\uff08Register Bank selector bit 1\uff09\uff08\u89c1\u9644\u6ce8 1\uff09 RS0 PSW.3 \u5bc4\u5b58\u5668\u7ec4\u9009\u62e9\u4f4d 0 \uff08\u89c1\u9644\u6ce8 1\uff09 OV PSW.2 \u6ea2\u51fa\u6807\u5fd7\uff08Overflow Flag\uff09 \u2014\u2014 PSW.1 \u7528\u6237\u53ef\u5b9a\u4e49\u6807\u5fd7\uff08User definable flag\uff09 P PSW.0 \u5947\u5076\u6821\u9a8c\u6807\u5fd7\uff0c\u7531\u786c\u4ef6\u5728\u6bcf\u4e2a\u6307\u4ee4\u5468\u671f\u5185\u8bbe\u7f6e/\u6e05\u9664\uff0c\u4ee5\u6307\u793a\u7d2f\u52a0\u5668\u4e2d\u7684\u5947\u6570/\u5076\u6570\u7684'1'\u4f4d\u3002 \u9644\u6ce81\uff1a \u7531 RS0 \u548c RS1 \u7684\u503c\u9009\u62e9\u76f8\u5e94\u7684\u5bc4\u5b58\u5668\u7ec4\u3002 RS1 RS0 \u5bc4\u5b58\u5668\u7ec4\uff08Register Bank\uff09 \u5730\u5740 0 0 0 00H-07H 0 1 1 08H-0FH 1 0 2 10H-17H 1 1 3 18H-1FH","title":"PSW\uff1a\u7a0b\u5e8f\u72b6\u6001\u5b57\uff08PROGRAM STATUS WORD\uff09\u53ef\u4f4d\u5bfb\u5740"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/Intel%20MCS-51%20%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C_%E5%AF%84%E5%AD%98%E5%99%A8%E9%83%A8%E5%88%86/#pcon-power-control-register","text":"SMOD \u2014\u2014 \u2014\u2014 \u2014\u2014 GF1 GF0 PD IDL SMOD \u53cc\u500d\u6ce2\u7279\u7387\u4f4d\uff08doble baud rate bit\uff09\u3002\u5982\u679c\u5b9a\u65f6\u56681\u500d\u7528\u4e8e\u751f\u6210\u6ce2\u7279\u7387\u4e14SMOD=1\uff0c\u5f53\u4e32\u53e3\u88ab\u7528\u4e8e\u6a21\u5f0f1,2,3\u65f6\uff0c\u6ce2\u7279\u7387\u7ffb\u500d \u2014\u2014 \u6ca1\u6709\u5b9e\u73b0\uff0c\u4fdd\u7559\u7ed9\u672a\u6765\u4f7f\u7528\uff08Not implemented, reserved for future use.*\uff09 \u2014\u2014 \u6ca1\u6709\u5b9e\u73b0\uff0c\u4fdd\u7559\u7ed9\u672a\u6765\u4f7f\u7528 \u2014\u2014 \u6ca1\u6709\u5b9e\u73b0\uff0c\u4fdd\u7559\u7ed9\u672a\u6765\u4f7f\u7528 GF1 \u901a\u7528\u7528\u9014\u6807\u5fd7\u4f4d\u3002\uff08general purpose flag bit\uff09 GF0 \u901a\u7528\u7528\u9014\u6807\u5fd7\u4f4d\u3002 PD \u6389\u7535\u6a21\u5f0f\u4f4d\uff08Power Down bit\uff09\u3002\u8bbe\u7f6e\u8fd9\u4e2a\u4f4d\u53ef\u4ee5\u6fc0\u6d3b 80C51BH \u7684\u6389\u7535\u6a21\u5f0f\u64cd\u4f5c\uff08\u4ec5\u5728\u91c7\u7528CHMOS\u5de5\u827a\u7684\u578b\u53f7\u4e2d\u53ef\u7528\uff09 IDL \u7a7a\u95f2\u6a21\u5f0f\u4f4d\uff08idle Mode bit\uff09\u3002\u8bbe\u7f6e\u8fd9\u4e2a\u4f4d\u6fc0\u6d3b 80C51BH \u4e2d\u7684\u7a7a\u95f2\u6a21\u5f0f\u64cd\u4f5c\u3002\uff08\u4ec5\u5728\u91c7\u7528CHMOS\u5de5\u827a\u7684\u578b\u53f7\u4e2d\u53ef\u7528\uff09 \u5982\u679c\u540c\u65f6\u5411 PD \u548c IDL \u5199\u5165 1\uff0cPD \u4f18\u5148 *\u7528\u6237\u8f6f\u4ef6\u4e0d\u5e94\u5f53\u5411\u4fdd\u7559\u4f4d\u5199\u51651\uff0c\u8fd9\u4e9b\u4f4d\u53ef\u80fd\u5728\u672a\u6765\u7684 MCS-51 \u4ea7\u54c1\u4e2d\u88ab\u7528\u6765\u8c03\u7528\u65b0\u7684\u529f\u80fd\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u65b0\u7684\u590d\u4f4d\u6216\u65e0\u6548\u7684\u503c\u5c06\u4e3a 0\uff0c\u5176\u6709\u6548\u503c\u5c06\u4e3a 1\u3002","title":"PCON \u7535\u6e90\u63a7\u5236\u5bc4\u5b58\u5668\uff08POWER CONTROL REGISTER\uff09\uff0c\u4e0d\u53ef\u4f4d\u5bfb\u5740"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/Intel%20MCS-51%20%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C_%E5%AF%84%E5%AD%98%E5%99%A8%E9%83%A8%E5%88%86/#_7","text":"\u4e3a\u4f7f\u7528 MCS-51 \u4e2d\u65ad\u4efb\u4f55\u4e2d\u65ad\uff0c\u9700\u8981\u4e00\u4e0b\u4e09\u6b65\uff1a 1. \u8bbe\u7f6e IE \u5bc4\u5b58\u5668\u4e2d\u7684 EA\uff08enable all\uff09\u4f4d\u4e3a 1 2. \u5c06IE\u5bc4\u5b58\u5668\u4e2d\u7684\u5bf9\u5e94\u7684\u72ec\u7acb\u7684\u4e2d\u65ad\u4f7f\u80fd\u4f4d\u8bbe\u4e3a 1 3. \u5728\u8be5\u4e2d\u65ad\u7684\u5bf9\u5e94\u7684\u5411\u91cf\u5730\u5740\u5904\u5f00\u59cb\u4e2d\u65ad\u670d\u52a1\u4f8b\u7a0b\u3002\u89c1\u4e0b\u8868\u3002 \u4e2d\u65ad\u6e90 \u5411\u91cf\u5730\u5740 IE0 0003H TF0 000BH IE1 0013H TF1 001BH RI & TI 0023H TF2 & EXF2 002BH \u6b64\u5916\uff0c\u4e3a\u4e86\u5916\u90e8\u4e2d\u65ad\uff08external interrupt\uff09\uff0c\u5f15\u811a INT0 \u548c INT1 \uff08P3.2 \u548c P3.3\uff09\uff0c\u5fc5\u987b\u88ab\u8bbe\u4e3a 1\uff0c\u5e76\u4e14\u53d6\u51b3\u4e8e\u4e2d\u65ad\u662f\u7535\u5e73\uff08level\uff09\u8fd8\u662f\u8fb9\u6cbf\u89e6\u53d1\uff08transition activated\uff0c\u7535\u5e73\u8f6c\u6362\u89e6\u53d1\uff1f\u610f\u601d\u5e94\u8be5\u5c31\u662f edge triggered\uff0c\u8fb9\u6cbf\u89e6\u53d1\uff09\uff0cTCON \uff08Timer/Counter Control\uff0c\u8ba1\u65f6\u5668/\u8ba1\u6570\u5668\u63a7\u5236\uff09\u5bc4\u5b58\u5668\u4e2d\u7684 IT0\uff08Inerrupt 0 type control bit. \u4e2d\u65ad 0 \u7c7b\u578b\u63a7\u5236\u4f4d\uff09 \u6216 IT1 \uff08Inerrupt 1 type control bit. \u4e2d\u65ad 1 \u7c7b\u578b\u63a7\u5236\u4f4d\uff09\u4f4d\u53ef\u80fd\u88ab\u8bbe\u4e3a 1\u3002 ITx = 0 \u7535\u5e73\u89e6\u53d1\uff08level activated\uff09 ITx = 1 \u8fb9\u6cbf\u89e6\u53d1\uff08transition activated\uff0c\u6709\u4eba\u4e5f\u8bf4\u8df3\u53d8\u89e6\u53d1\uff09\uff0c\u5b9e\u9645\u4e0a\u662f\u4e0b\u964d\u6cbf\u89e6\u53d1\uff08\u8d1f\u8df3\u53d8\u89e6\u53d1\uff09","title":"\u4e2d\u65ad\uff1a"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/Intel%20MCS-51%20%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C_%E5%AF%84%E5%AD%98%E5%99%A8%E9%83%A8%E5%88%86/#ie-interrupt-enable-register","text":"\u5982\u679c\u4f4d\u4e3a 0\uff0c\u5219\u7981\u7528\u76f8\u5e94\u7684\u4e2d\u65ad\u3002\u5982\u679c\u4f4d\u662f 1\uff0c\u5219\u542f\u7528\u76f8\u5e94\u7684\u4e2d\u65ad\u3002 EA \u2014\u2014 ET2 ES ET1 EX1 ET0 EX0 EA IE.7 \u7981\u7528\u6240\u6709\u4e2d\u65ad\uff0c\u5982\u679cEA = 0\uff0c\u6ca1\u6709\u4e2d\u65ad\u5c06\u4f1a\u88ab\u786e\u8ba4\uff0c\u5982\u679c EA = 1\uff0c\u6bcf\u4e2a\u4e2d\u65ad\u6e90\u5730\u53ef\u72ec\u7acb\u5730\u901a\u8fc7\u8bbe\u5b9a\u6216\u5176\u4f7f\u80fd\u4f4d\u5f00\u542f\u6216\u5173\u95ed \u2014\u2014 IE.6 \u6ca1\u6709\u5b9e\u73b0\uff0c\u4fdd\u7559\u7ed9\u672a\u6765\u4f7f\u7528* ET2 IE.5 \u542f\u7528\u6216\u7981\u7528\u8ba1\u65f6\u5668 2 \u6ea2\u51fa\u6216\u6355\u83b7\u4e2d\u65ad\uff08Timer 1 overflow interrupt\uff09\uff08\u4ec5 8052 \u53ef\u7528\uff09 ES IE.4 \u542f\u7528\u6216\u7981\u7528\u4e32\u53e3\u4e2d\u65ad\uff08serial port interrupt\uff09 ET1 IE.3 \u542f\u7528\u6216\u7981\u7528\u8ba1\u65f6\u5668 1 \u6ea2\u51fa\u4e2d\u65ad\uff08Timer 1 overflow interrupt\uff09 EX1 IE.2 \u542f\u7528\u6216\u7981\u7528\u5916\u90e8\u4e2d\u65ad 1 \uff08External Interrupt 1\uff09 ET0 IE.1 \u542f\u7528\u6216\u7981\u7528\u8ba1\u65f6\u5668 0 \u6ea2\u51fa\u4e2d\u65ad\uff08Timer 0 overflow interrupt\uff09 EX0 IE.0 \u542f\u7528\u6216\u7981\u7528\u5916\u90e8\u4e2d\u65ad\uff08External Interrupt 0\uff09 *\u7528\u6237\u8f6f\u4ef6\u4e0d\u5e94\u5f53\u5411\u4fdd\u7559\u4f4d\u5199\u51651\uff0c\u8fd9\u4e9b\u4f4d\u53ef\u80fd\u5728\u672a\u6765\u7684 MCS-51 \u4ea7\u54c1\u4e2d\u88ab\u7528\u6765\u8c03\u7528\u65b0\u7684\u529f\u80fd\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u65b0\u7684\u590d\u4f4d\u6216\u65e0\u6548\u7684\u503c\u5c06\u4e3a 0\uff0c\u5176\u6709\u6548\u503c\u5c06\u4e3a 1\u3002","title":"IE \u4e2d\u65ad\u4f7f\u80fd\u5bc4\u5b58\u5668\uff08INTERRUPT ENABLE REGISTER\uff09\uff0c\u53ef\u4f4d\u5bfb\u5740"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/Intel%20MCS-51%20%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C_%E5%AF%84%E5%AD%98%E5%99%A8%E9%83%A8%E5%88%86/#_8","text":"\u4e3a\u7ed9\u4e00\u4e2a\u4e2d\u65ad\u8bbe\u7f6e\u66f4\u9ad8\u7684\u4f18\u5148\u7ea7\uff0cIP \uff08Interrupt Priority Control\uff0c\u4e2d\u65ad\u4f18\u5148\u7ea7\u63a7\u5236\uff09\u5bc4\u5b58\u5668\u5fc5\u987b\u88ab\u8bbe\u4e3a1 \u8bf7\u8bb0\u4f4f\uff0c\u5f53\u4e00\u4e2a\u4e2d\u65ad\u670d\u52a1\u6b63\u5728\u8fdb\u884c\u65f6\uff0c\u5b83\u4e0d\u80fd\u88ab\u8f83\u4f4e\u6216\u540c\u7ea7\u522b\u7684\u4e2d\u65ad\u6240\u6253\u65ad\u3002","title":"\u4e3a\u4e00\u4e2a\u6216\u8005\u66f4\u591a\u7684\u4e2d\u65ad\u8bbe\u7f6e\u66f4\u9ad8\u4f18\u5148\u7ea7"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/Intel%20MCS-51%20%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C_%E5%AF%84%E5%AD%98%E5%99%A8%E9%83%A8%E5%88%86/#priority-within-level","text":"\u7ea7\u522b\u5185\u7684\u4f18\u5148\u7ea7\u53ea\u662f\u4e3a\u4e86\u89e3\u51b3\u540c\u4e00\u4f18\u5148\u7ea7\u7684\u540c\u65f6\u8bf7\u6c42\u3002 \u4ece\u9ad8\u5230\u4f4e\uff0c\u4e2d\u65ad\u6e90\u5217\u4e3e\u5982\u4e0b\uff1a IE0\uff08External Interrupt 0 edge flag\uff0c\u5916\u90e8\u4e2d\u65ad 0 \u8fb9\u6cbf\u6807\u5fd7\uff0c\u4f4d\u4e8e TCON \u5bc4\u5b58\u5668 \uff09 TF0\uff08Timer 0 Overflow Flag\uff0c\u8ba1\u65f6\u5668 0 \u6ea2\u51fa\u6807\u5fd7\uff0c\u4f4d\u4e8e TCON \u5bc4\u5b58\u5668 \uff09 IE1\uff08External Interrupt 1 edge flag\uff0c\u5916\u90e8\u4e2d\u65ad 1 \u8fb9\u6cbf\u6807\u5fd7\uff0c\u4f4d\u4e8e TCON \u5bc4\u5b58\u5668\uff09 TF1 \uff08Timer 1 Overflow Flag\uff0c\u8ba1\u65f6\u5668 0 \u6ea2\u51fa\u6807\u5fd7\uff0c\u4f4d\u4e8e TCON \u5bc4\u5b58\u5668\uff09 RI \u6216 TI\uff08Receive Interrupt Flag/Transmit Interrupt Flag \u4e32\u53e3\u63a5\u6536/\u53d1\u5c04\u4e2d\u65ad\u6807\u5fd7\uff0c\u4f4d\u4e8e SCON \u5bc4\u5b58\u5668\uff09 TF2 \u6216 EXF2\uff08Timer 2 Overflow Flag/Timer 2 External Flag\uff0c\u8ba1\u65f6\u5668 2 \u6ea2\u51fa/\u5916\u90e8\u6807\u5fd7\u4f4d\uff0c\u4f4d\u4e8e T2CON \u5bc4\u5b58\u5668\uff0c\u4ec5 8052 \u53ef\u7528\uff09","title":"\u7ea7\u522b\u5185\u4f18\u5148\u7ea7 (PRIORITY WITHIN LEVEL)"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/Intel%20MCS-51%20%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C_%E5%AF%84%E5%AD%98%E5%99%A8%E9%83%A8%E5%88%86/#ip-interrupt-priority-register","text":"\u5982\u679c\u8be5\u4f4d\u4e3a 0\uff0c\u76f8\u5e94\u7684\u4e2d\u65ad\u5177\u6709\u8f83\u4f4e\u7684\u4f18\u5148\u7ea7\uff0c\u5982\u679c\u8be5\u4f4d\u4e3a 1\uff0c\u76f8\u5e94\u7684\u4e2d\u65ad\u5177\u6709\u8f83\u9ad8\u7684\u4f18\u5148\u7ea7\u3002 \u2014\u2014 \u2014\u2014 PT2 PS PT1 PX1 PT0 PX0 \u2014\u2014 IP.7 \u6ca1\u6709\u5b9e\u73b0\uff0c\u4fdd\u7559\u7ed9\u672a\u6765\u4f7f\u7528* \u2014\u2014 IP.6 \u6ca1\u6709\u5b9e\u73b0\uff0c\u4fdd\u7559\u7ed9\u672a\u6765\u4f7f\u7528* PT2 IP.5 \u5b9a\u4e49\u4e86\u8ba1\u65f6\u5668 2 \u4e2d\u65ad\u7684\u4f18\u5148\u7ea7\uff08\u4ec5\u9650 8052\uff09 PS IP.4 \u5b9a\u4e49\u4e86\u4e32\u53e3\u4e2d\u65ad\u7684\u4f18\u5148\u7ea7 PT1 IP.3 \u5b9a\u4e49\u4e86\u8ba1\u65f6\u5668 1 \u4e2d\u65ad\u7684\u4f18\u5148\u7ea7 PX1 IP.2 \u5b9a\u4e49\u4e86\u5916\u90e8\u4e2d\u65ad 1 \u7684\u4f18\u5148\u7ea7 PT0 IP.1 \u5b9a\u4e49\u4e86\u8ba1\u65f6\u5668 0 \u4e2d\u65ad\u7684\u4f18\u5148\u7ea7 PX0 IP.0 \u5b9a\u4e49\u4e86\u5916\u90e8\u4e2d\u65ad 0 \u7684\u4f18\u5148\u7ea7 *\u7528\u6237\u8f6f\u4ef6\u4e0d\u5e94\u5f53\u5411\u4fdd\u7559\u4f4d\u5199\u51651\uff0c\u8fd9\u4e9b\u4f4d\u53ef\u80fd\u5728\u672a\u6765\u7684 MCS-51 \u4ea7\u54c1\u4e2d\u88ab\u7528\u6765\u8c03\u7528\u65b0\u7684\u529f\u80fd\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u65b0\u7684\u590d\u4f4d\u6216\u65e0\u6548\u7684\u503c\u5c06\u4e3a 0\uff0c\u5176\u6709\u6548\u503c\u5c06\u4e3a 1\u3002","title":"IP \uff08Interrupt Priority Register\uff09\u4e2d\u65ad\u4f18\u5148\u7ea7\u5bc4\u5b58\u5668\uff0c\u53ef\u4f4d\u5bfb\u5740"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/Intel%20MCS-51%20%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C_%E5%AF%84%E5%AD%98%E5%99%A8%E9%83%A8%E5%88%86/#tcon-timercounter-control-register","text":"TF1 TR1 TF0 TR0 IE1 IT1 IE0 IT0 TF1 TCON.7 \u8ba1\u65f6\u5668 1 \u6ea2\u51fa\u6807\u793a\u503c\uff08Timer 1 overflow flag\uff09\uff0c\u5f53\u8ba1\u65f6\u5668/\u8ba1\u6570\u5668 1 \u6ea2\u51fa\u65f6\u7531\u786c\u4ef6\u8bbe\u7f6e\u3002\u5f53\u5904\u7406\u5668\u8f6c\u5230\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\uff08Interrupt Service Routine\uff0cISR\uff09\uff0c\u7531\u786c\u8f6f\u4ef6\u6e05\u9664\u3002\uff08\u539f\u53e5\u662f Cleared by hard-ware as processor vectors to the interrupt service routine.\uff09 TR1 TCON.6 \u8ba1\u65f6\u5668 1 \u8fd0\u884c\u63a7\u5236\u4f4d\uff08Timer 1 run control bit.\uff09\uff0c\u7531\u8f6f\u4ef6\u8bbe\u7f6e/\u6e05\u96f6\u6765\u6253\u5f00/\u5173\u95ed \u8ba1\u65f6\u5668/\u8ba1\u6570\u5668 1 TF0 TCON.5 \u8ba1\u65f6\u5668 1 \u6ea2\u51fa\u6807\u793a\u503c\uff08Timer 0 overflow flag\uff09\uff0c\u5f53\u8ba1\u65f6\u5668/\u8ba1\u6570\u5668 1 \u6ea2\u51fa\u65f6\u7531\u786c\u4ef6\u8bbe\u7f6e\u3002\u5728\u5904\u7406\u5668\u5411\u4e2d\u65ad\u670d\u52a1\u4f8b\u7a0b\u8f6c\u79fb\u65f6\uff0c\u7531\u786c\u8f6f\u4ef6\u6e05\u9664\u3002 TR0 TCON.4 \u8ba1\u65f6\u5668 1 \u8fd0\u884c\u63a7\u5236\u4f4d\uff08Timer 0 run control bit.\uff09\uff0c\u7531\u8f6f\u4ef6\u8bbe\u7f6e/\u6e05\u96f6\u6765\u6253\u5f00/\u5173\u95ed \u8ba1\u65f6\u5668/\u8ba1\u6570\u5668 1 IE1 TCON.3 \u5916\u90e8\u4e2d\u65ad 1 \u8fb9\u6cbf\u6807\u5fd7\uff08External Interrupt 1 edge flag\uff09\uff0c\u5f53\u5916\u90e8\u4e2d\u65ad\u8fb9\u6cbf\u88ab\u68c0\u6d4b\u5230\u65f6\u7531\u786c\u4ef6\u8bbe\u7f6e\uff0c\u5f53\u4e2d\u65ad\u88ab\u5904\u7406\u65f6\u7531\u786c\u4ef6\u6e05\u96f6 IT1 TCON.2 \u4e2d\u65ad 1 \u7c7b\u578b\u63a7\u5236\u4f4d\uff08Interrupt 1\uff09\uff0c\u7531\u8f6f\u4ef6\u8bbe\u7f6e/\u6e05\u695a\u6765\u6307\u5b9a\u4e0b\u964d\u6cbf/\u4f4e\u7535\u5e73\u89e6\u53d1\u7684\u4e2d\u65ad IE0 TCON.1 \u5916\u90e8\u4e2d\u65ad 0 \u8fb9\u6cbf\u6807\u5fd7\uff08External Interrupt 0 edge flag\uff09\uff0c\u5f53\u5916\u90e8\u4e2d\u65ad\u8fb9\u6cbf\u88ab\u68c0\u6d4b\u5230\u65f6\u7531\u786c\u4ef6\u8bbe\u7f6e\uff0c\u5f53\u4e2d\u65ad\u88ab\u5904\u7406\u65f6\u7531\u786c\u4ef6\u6e05\u96f6 IT0 TCON.0 \u4e2d\u65ad 0 \u7c7b\u578b\u63a7\u5236\u4f4d\uff0c\u7531\u8f6f\u4ef6\u8bbe\u7f6e/\u6e05\u695a\u6765\u6307\u5b9a\u4e0b\u964d\u6cbf/\u4f4e\u7535\u5e73\u89e6\u53d1\u7684\u4e2d\u65ad","title":"TCON \uff08Timer/Counter Control Register\uff09\u8ba1\u65f6\u5668/\u8ba1\u6570\u5668\u63a7\u5236\u5bc4\u5b58\u5668\uff0c\uff08\u65f6\u5e8f\u63a7\u5236\uff09\uff0c\u53ef\u4f4d\u5bfb\u5740"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/Intel%20MCS-51%20%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C_%E5%AF%84%E5%AD%98%E5%99%A8%E9%83%A8%E5%88%86/#tmodtimercounter-mode-control-register","text":"TIMER 1 TIMER 0 GATE C/ T M1 M0 GATE C/ T M1 M0 GATE \u5f53 TCON \u5bc4\u5b58\u5668\u4e2d\u7684 TRx \u88ab\u8bbe\u7f6e\uff0c\u5e76\u4e14 GATE = 1\uff0c\u8ba1\u65f6\u5668/\u8ba1\u6570\u5668x \u4ec5\u5728 INTx \u4f4d\u9ad8\u7535\u5e73\uff08\u786c\u4ef6\u63a7\u5236\uff09\u65f6\u8fd0\u884c\uff0c\u5f53 GATE = 0\uff0c\u8ba1\u65f6\u5668/\u8ba1\u6570\u5668 x \u4ec5\u5728 TRx = 1 \u65f6\u8fd0\u884c\uff08\u8f6f\u4ef6\u63a7\u5236\uff09 C/T \u8ba1\u65f6\u5668\u8ba1\u6570\u5668\u9009\u62e9(Timer or Counter selector)\uff0c\u6e05\u96f6\u4e3a\u8ba1\u65f6\u5668\u64cd\u4f5c\uff08\u8f93\u5165\u6765\u81ea\u5185\u90e8\u7cfb\u7edf\u65f6\u949f\uff09\uff0c\u8bbe\u7f6e\u4e3a\u8ba1\u6570\u5668\u7cfb\u7edf\uff08\u8f93\u5165\u6765\u81ea Tx \u8f93\u5165\u811a\uff09 M1 \u6a21\u5f0f\u9009\u62e9\u4f4d\uff08Mode selector bit\uff09\uff08\u9644\u6ce81\uff09 M0 \u6a21\u5f0f\u9009\u62e9\u4f4d\uff08Mode selector bit\uff09\uff08\u9644\u6ce81\uff09 M1 M0 \u64cd\u4f5c\u6a21\u5f0f\uff08Operating Mode\uff09 0 0 0 13 \u4f4d\u8ba1\u65f6\u5668\uff08\u517c\u5bb9 MCS-48\uff09 0 1 1 16 \u4f4d\u8ba1\u65f6\u5668/\u8ba1\u6570\u5668 1 0 2 8 \u4f4d\u81ea\u52a8\u91cd\u8f7d\u8ba1\u65f6\u5668/\u8ba1\u6570\u5668 1 1 3 \uff08\u8ba1\u65f6\u5668 0\uff09 TL0 \u662f\u4e00\u4e2a\u7531 \u6807\u51c6\u8ba1\u65f6\u5668 0 \u63a7\u5236\u4f4d\u63a7\u5236\u7684 8 \u4f4d\u8ba1\u65f6\u5668/\u8ba1\u6570\u5668 TH0 \u662f\u4e00\u4e2a\u7531\u6807\u51c6\u8ba1\u65f6\u5668 1 \u63a7\u5236\u4f4d\u63a7\u5236\u7684 8 \u4f4d\u8ba1\u65f6\u5668 1 1 3 (\u8ba1\u65f6\u56681) \u8ba1\u65f6\u5668/\u8ba1\u6570\u5668 \u505c\u6b62","title":"TMOD\uff1a\u8ba1\u65f6\u5668/\u8ba1\u6570\u5668\u6a21\u5f0f\u9009\u62e9\u5bc4\u5b58\u5668\uff08TIMER/COUNTER MODE CONTROL REGISTER\uff09\u4e0d\u53ef\u4f4d\u5bfb\u5740"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/Intel%20MCS-51%20%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C_%E5%AF%84%E5%AD%98%E5%99%A8%E9%83%A8%E5%88%86/#_9","text":"\u88683\u81f3\u88686\u7ed9\u51fa\u4e86\u4e00\u4e9bTMOD\u7684\u503c\uff0c\u53ef\u4ee5\u7528\u6765\u5728\u4e0d\u540c\u6a21\u5f0f\u4e0b\u8bbe\u7f6e\u5b9a\u65f6\u56680\u3002 \u8fd9\u91cc\u5047\u5b9a\u4e00\u6b21\u53ea\u4f7f\u7528\u4e00\u4e2a\u5b9a\u65f6\u5668\u3002\u5982\u679c\u5e0c\u671b\u5728\u4efb\u4f55\u6a21\u5f0f\u4e0b\u540c\u65f6\u8fd0\u884c\u5b9a\u65f6\u56680\u548c1\uff0c\u5b9a\u65f6\u56680\u7684TMOD\u503c\u5fc5\u987b\u4e0e\u5b9a\u65f6\u56681\u7684\u503c\u8fdb\u884cOR\uff08\u88685\u548c6\uff09\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u5e0c\u671b\u5728\u6a21\u5f0f1 GATE\uff08\u5916\u90e8\u63a7\u5236\uff09\u4e0b\u8fd0\u884c\u5b9a\u65f6\u56680\uff0c\u5728\u6a21\u5f0f2 COUNTER\u4e0b\u8fd0\u884c\u5b9a\u65f6\u56681\uff0c\u90a3\u4e48\u5fc5\u987b\u8f7d\u5165TMOD\u7684\u503c\u662f69H\uff08\u88683\u768409H\u4e0e\u88686\u768460H\u7684OR\uff09\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u5047\u8bbe\u7528\u6237\u5728\u6b64\u65f6\u8fd8\u6ca1\u6709\u51c6\u5907\u597d\u6253\u5f00\u5b9a\u65f6\u5668\uff0c\u800c\u662f\u5728\u7a0b\u5e8f\u4e2d\u7684\u53e6\u4e00\u4e2a\u65f6\u95f4\u70b9\u901a\u8fc7\u5c06\u4f4dTRx\uff08\u5728TCON\u4e2d\uff09\u8bbe\u7f6e\u4e3a1\u6765\u5b9e\u73b0\u3002","title":"\u8ba1\u65f6\u5668\u8bbe\u7f6e"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/Intel%20MCS-51%20%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C_%E5%AF%84%E5%AD%98%E5%99%A8%E9%83%A8%E5%88%86/#0","text":"","title":"\u8ba1\u65f6\u5668/\u8ba1\u6570\u5668 0"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/Intel%20MCS-51%20%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C_%E5%AF%84%E5%AD%98%E5%99%A8%E9%83%A8%E5%88%86/#_10","text":"td { text-align: center; } \u6a21\u5f0f \u8ba1\u65f6\u5668 0 \u529f\u80fd TMOD INTERNAL CONTROL(NOTE 1) EXTERNAL CONTROL(NOTE 2) 0 13-bit Timer 04H 0CH 1 16-bit Timer 05H 0DH 2 8bit Auto-Reload 06H 0EH 3 Two 8-bit Timers 07H 0FH","title":"\u4f5c\u4e3a\u8ba1\u65f6\u5668"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/Intel%20MCS-51%20%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C_%E5%AF%84%E5%AD%98%E5%99%A8%E9%83%A8%E5%88%86/#_11","text":"td { text-align: center; } \u6a21\u5f0f \u8ba1\u6570\u5668 0 \u529f\u80fd TMOD INTERNAL CONTROL(NOTE 1) EXTERNAL CONTROL(NOTE 2) 0 13-bit Timer 00H 08H 1 16-bit Timer 01H 09H 2 8bit Auto-Reload 02H 0AH 3 One 8-bit Counter 03H 0BH \u901a\u8fc7\u5728\u8f6f\u4ef6\u4e2d\u8bbe\u7f6e/\u6e05\u9664TR0\u4f4d\u6765\u6253\u5f00/\u5173\u95ed\u5b9a\u65f6\u5668\u3002 \u5f53TR0=1\u65f6\uff0c\u5b9a\u65f6\u5668\u901a\u8fc7 INT0 \uff08P3.2\uff09\u4e0a\u76841-0\u8f6c\u6362\u6765\u6253\u5f00/\u5173\u95ed\uff08\u786c\u4ef6\u63a7\u5236\uff09\u3002","title":"\u4f5c\u4e3a\u8ba1\u6570\u5668"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/Intel%20MCS-51%20%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C_%E5%AF%84%E5%AD%98%E5%99%A8%E9%83%A8%E5%88%86/#1","text":"","title":"\u8ba1\u65f6\u5668/\u8ba1\u6570\u5668 1"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/Intel%20MCS-51%20%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C_%E5%AF%84%E5%AD%98%E5%99%A8%E9%83%A8%E5%88%86/#_12","text":"td { text-align: center; } \u6a21\u5f0f \u8ba1\u65f6\u5668 1 \u529f\u80fd TMOD INTERNAL CONTROL(NOTE 1) EXTERNAL CONTROL(NOTE 2) 0 13-bit Timer 00H 80H 1 16-bit Timer 10H 90H 2 8bit Auto-Reload 20H A0H 3 Two 8-bit Timers 30H B0H","title":"\u4f5c\u4e3a\u8ba1\u65f6\u5668"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/Intel%20MCS-51%20%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C_%E5%AF%84%E5%AD%98%E5%99%A8%E9%83%A8%E5%88%86/#_13","text":"td { text-align: center; } \u6a21\u5f0f \u8ba1\u6570\u5668 1 \u529f\u80fd TMOD INTERNAL CONTROL(NOTE 1) EXTERNAL CONTROL(NOTE 2) 0 13-bit Timer 40H C0H 1 16-bit Timer 50H D0H 2 8bit Auto-Reload 60H E0H 3 One 8-bit Counter -- -- \u901a\u8fc7\u5728\u8f6f\u4ef6\u4e2d\u8bbe\u7f6e/\u6e05\u9664 TR1 \u4f4d\u6765\u6253\u5f00/\u5173\u95ed\u5b9a\u65f6\u5668\u3002 \u5f53 TR1=1 \u65f6\uff0c\u5b9a\u65f6\u5668\u901a\u8fc7 INT1 \uff08P3.3\uff09\u4e0a\u76841-0\u8f6c\u6362\u6765\u6253\u5f00/\u5173\u95ed\uff08\u786c\u4ef6\u63a7\u5236\uff09\u3002","title":"\u4f5c\u4e3a\u8ba1\u6570\u5668"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/Intel%20MCS-51%20%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C_%E5%AF%84%E5%AD%98%E5%99%A8%E9%83%A8%E5%88%86/#t2con-timercounter-2-control-register-2-8052","text":"TF2 EXF2 RCLK TCLK EXEN2 TR2 C/ T2 CP/ RL2 TF2 T2CON.7 \u8ba1\u65f6\u56682\u7684\u6ea2\u51fa\u6807\u5fd7\uff08Transmit clock flag\uff09\u7531\u786c\u4ef6\u8bbe\u7f6e\uff0c\u7531\u8f6f\u4ef6\u6e05\u9664\u3002TF2\u4e0d\u80fd\u88ab\u8bbe\u7f6e\uff0c\u5f53 RCLK=1\u6216CLK=1\u65f6\uff0c\u4e0d\u80fd\u8bbe\u7f6eTF2\u3002 EXF2 T2CON.6 \u5b9a\u65f6\u56682\u5916\u90e8\u6807\u5fd7\uff08Timer 2 external flag\uff09\u5f53T2EX\u4e0a\u7684\u4e0b\u964d\u6cbf\u5f15\u8d77\u6355\u83b7\u6216\u91cd\u8f7d\u65f6\u88ab\u8bbe\u7f6e\uff0c\u5e76\u4e14EXEN2 = 1\u3002\u5f53\u5b9a\u65f6\u56682\u4e2d\u65ad\u88ab\u542f\u7528\u65f6\uff0cEXF2 e 1\u5c06\u5bfc\u81f4CPU\u5411\u91cf\u5230\u5b9a\u65f6\u56682\u4e2d\u65ad\u7a0b\u5e8f\u3002EXF2\u5fc5\u987b\u7531\u8f6f\u4ef6\u6765\u6e05\u9664 RCLK T2CON.5 \u63a5\u6536\u65f6\u949f\u6807\u5fd7\uff08Receive clock flag\uff09\u3002\u5f53\u8bbe\u7f6e\u65f6\uff0c\u4f7f\u4e32\u884c\u7aef\u53e3\u5728\u6a21\u5f0f1\u548c3\u4e2d\u4f7f\u7528\u5b9a\u65f6\u56682\u7684\u6ea2\u51fa\u8109\u51b2\u4f5c\u4e3a\u5176\u63a5\u6536\u65f6\u949f\u3002RCLK = 0\u4f1a\u4f7f\u5b9a\u65f6\u56681\u7684\u6ea2\u51fa\u7528\u4e8e\u63a5\u6536\u65f6\u949f\u3002 TLCK T2CON.4 \u53d1\u9001\u65f6\u949f\u6807\u5fd7\uff08Transmit clock flag\uff09\u3002\u5f53\u8bbe\u7f6e\u65f6\uff0c\u5bfc\u81f4\u4e32\u884c\u7aef\u53e3\u5728\u6a21\u5f0f1\u548c3\u4e2d\u4f7f\u7528\u5b9a\u65f6\u56682\u7684\u6ea2\u51fa\u8109\u51b2\u4f5c\u4e3a\u5176\u53d1\u9001\u65f6\u949f\u3002TCLK = 0\u4f1a\u4f7f\u5b9a\u65f6\u56681\u7684\u6ea2\u51fa\u8109\u51b2\u88ab\u7528\u4e8e\u53d1\u9001\u65f6\u949f\u3002 EXEN2 T2CON.3 \u5b9a\u65f6\u56682\u5916\u90e8\u4f7f\u80fd\u6807\u5fd7\uff08 Timer 2 external enable flag.\uff09\u3002\u5f53\u8bbe\u7f6e\u65f6\uff0c\u5982\u679c\u5b9a\u65f6\u56682\u6ca1\u6709\u88ab\u7528\u4e8e\u4e32\u884c\u7aef\u53e3\u7684\u65f6\u949f\uff0c\u5219\u5141\u8bb8\u5728T2EX\u7684\u8d1f\u8f6c\u6362\u4e2d\u53d1\u751f\u6355\u83b7\u6216\u91cd\u8f7d\u3002EXEN2 = 0\u4f7f\u5b9a\u65f6\u56682\u5ffd\u7565T2EX\u7684\u4e8b\u4ef6\u3002 TR2 T2CON.2 \u8ba1\u65f6\u56682\u7684\u8f6f\u4ef6\u542f\u52a8/\u505c\u6b62\u63a7\u5236\uff08Software START/STOP control for Timer 2.\uff09\u3002\u4e00\u4e2a \u903b\u8f91 1 \u542f\u52a8\u5b9a\u65f6\u5668\u3002 C/T2 T2CON.1 \u8ba1\u65f6\u5668\u6216\u8ba1\u6570\u5668\u9009\u62e9\u3002 0 = \u5185\u90e8\u5b9a\u65f6\u5668\u3002 1 = \u5916\u90e8\u4e8b\u4ef6\u8ba1\u6570\u5668\uff08\u4e0b\u964d\u6cbf\u89e6\u53d1\uff09\u3002 CP/RL2 T2CON.0 \u6355\u83b7/\u52a0\u8f7d\u6807\u5fd7\u3002\u5f53\u8bbe\u7f6e\u65f6\uff0c\u5982\u679c EXEN2 = 1\uff0c\u6355\u83b7\u5c06\u53d1\u751f\u5728 T2EX \u7684\u4e0b\u964d\u6cbf\u3002\u5f53\u6e05\u96f6\u65f6\uff0c\u81ea\u52a8\u52a0\u8f7d\u5c06\u5728\u5b9a\u65f6\u5668 2 \u6ea2\u51fa\u6216 EXEN2 = 1 \u65f6 T2EX \u7684\u4e0b\u964d\u6cbf\u53d1\u751f\u3002\u5f53RCLK = 1\u6216TCLK = 1\u65f6\uff0c\u8be5\u4f4d\u88ab\u5ffd\u7565\uff0c\u5b9a\u65f6\u5668\u5728\u5b9a\u65f6\u5668 2 \u6ea2\u51fa\u65f6\u88ab\u5f3a\u5236\u81ea\u52a8\u52a0\u8f7d\u3002","title":"T2CON \uff08Timer/Counter 2 Control Register\uff09\u8ba1\u65f6\u5668/\u8ba1\u6570\u5668 2 \u63a7\u5236\u5bc4\u5b58\u5668\uff0c\uff08\u65f6\u5e8f\u63a7\u5236\uff09\uff0c\u53ef\u4f4d\u5bfb\u5740\uff0c\u4ec5\u96508052"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/Intel%20MCS-51%20%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C_%E5%AF%84%E5%AD%98%E5%99%A8%E9%83%A8%E5%88%86/#2","text":"\u9664\u4e86\u6ce2\u7279\u7387\u53d1\u751f\u5668\u6a21\u5f0f\uff0cT2CON\u7684\u6570\u503c\u4e0d\u5305\u62ecTR2\u4f4d\u7684\u8bbe\u7f6e\u3002 \u56e0\u6b64\uff0c\u5fc5\u987b\u5355\u72ec\u8bbe\u7f6eTR2\u4f4d\uff0c\u4ee5\u6253\u5f00\u5b9a\u65f6\u5668\u3002","title":"\u8ba1\u65f6\u5668/\u8ba1\u6570\u5668 2 \u8bbe\u7f6e"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/Intel%20MCS-51%20%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C_%E5%AF%84%E5%AD%98%E5%99%A8%E9%83%A8%E5%88%86/#_14","text":"td { text-align: center; } \u6a21\u5f0f T2CON INTERNAL CONTROL(NOTE 1) EXTERNAL CONTROL(NOTE 2) 16-bit Auto-Reload 00H 08H 16-bit Capture 01H 09H BAUD rate generator receive & transmit same baud rate 34H 36H receive only 24H 26H transmit only 14H 16H","title":"\u4f5c\u4e3a\u8ba1\u65f6\u5668"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/Intel%20MCS-51%20%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C_%E5%AF%84%E5%AD%98%E5%99%A8%E9%83%A8%E5%88%86/#_15","text":"td { text-align: center; } \u6a21\u5f0f T2CON INTERNAL CONTROL(NOTE 1) EXTERNAL CONTROL(NOTE 2) 0 16-bit Auto-Reload 02H 0AH 1 16-bit Capture 03H 0BH \u6355\u83b7/\u52a0\u8f7d\u4ec5\u5728\u5b9a\u65f6\u5668/\u8ba1\u6570\u5668\u6ea2\u51fa\u65f6\u53d1\u751f\u3002 \u6355\u83b7/\u52a0\u8f7d\u53d1\u751f\u5728\u5b9a\u65f6\u5668/\u8ba1\u6570\u5668\u6ea2\u51fa\u548cT2EX(P1.1)\u5f15\u811a\u76841\u52300\u8f6c\u6362\uff0c\u9664\u975e\u5b9a\u65f6\u56682\u88ab\u7528\u4e8e\u6ce2\u7279\u7387\u751f\u6210\u6a21\u5f0f\u4e2d\u3002 SCON: \u4e32\u53e3\u8bbe\u7f6e\u5bc4\u5b58\u5668\uff08SERIAL PORT CONTROL REGISTER\uff09\u53ef\u4f4d\u5bfb\u5740 SM0 SM1 SM2 REN TB8 RB8 TI RI SM0 SCON. 7 \u4e32\u53e3\u6a21\u5f0f\u6307\u5b9a\uff08Serial Port mode specifier.\uff09 (NOTE 1). SM1 SCON. 6 \u4e32\u53e3\u6a21\u5f0f\u6307\u5b9a\uff08Serial Port mode specifier.\uff09(NOTE 1). SM2 SCON. 5 \u542f\u7528\u6a21\u5f0f2\u548c3\u4e2d\u7684\u591a\u5904\u7406\u5668\u901a\u4fe1\u529f\u80fd\u3002\u5728\u6a21\u5f0f2\u62163\u4e2d\uff0c\u5982\u679cSM2\u8bbe\u7f6e\u4e3a1\uff0c\u90a3\u4e48\u5982\u679c\u6536\u5230\u7684\u7b2c9\u4e2a\u6570\u636e\u4f4d\uff08RB8\uff09\u4e3a0\uff0cRI\u5c06\u4e0d\u4f1a\u88ab\u6fc0\u6d3b\u3002\u5728\u6a21\u5f0f1\u4e2d\uff0c\u5982\u679cSM2 e 1\uff0c\u90a3\u4e48\u5982\u679c\u6ca1\u6709\u6536\u5230\u4e00\u4e2a\u6709\u6548\u7684\u505c\u6b62\u4f4d\uff0cRI\u5c06\u4e0d\u4f1a\u88ab\u6fc0\u6d3b\u3002\u5728\u6a21\u5f0f0\u4e2d\uff0cSM2\u5e94\u8be5\u4e3a0\u3002 (\u89c1\u8868 9). REN SCON. 4 \u901a\u8fc7\u8f6f\u4ef6\u8bbe\u7f6e/\u6e05\u9664\uff0c\u542f\u7528/\u7981\u7528\u63a5\u6536\uff08Enable/Disable reception\uff09\u3002 TB8 SCON. 3 \u5c06\u5728\u6a21\u5f0f2\u548c3\u4e2d\u4f20\u8f93\u7684\u7b2c9\u4f4d\uff08The 9th bit that will be transmitted\uff09\u3002\u7531\u8f6f\u4ef6\u8bbe\u7f6e/\u6e05\u9664\u3002 RB8 SCON. 2 \u5728\u6a21\u5f0f2\u548c3\u4e2d\uff0c\u662f\u6536\u5230\u7684\u7b2c9\u4e2a\u6570\u636e\u4f4d\uff089th data bit that was received\uff09\u3002\u5728\u6a21\u5f0f1\u4e2d\uff0c\u5982\u679cSM2 = 0\uff0cRB8\u662f\u63a5\u6536\u7684\u505c\u6b62\u4f4d\u3002\u662f\u6536\u5230\u7684\u505c\u6b62\u4f4d\u3002\u5728\u6a21\u5f0f0\u4e2d\uff0cRB8\u4e0d\u88ab\u4f7f\u7528\u3002 TI SCON. 1 \u53d1\u9001\u4e2d\u65ad\u6807\u5fd7\uff08Transmit interrupt flag\uff09\u3002\u7531\u786c\u4ef6\u5728\u6a21\u5f0f0\u7684\u7b2c8\u4f4d\u65f6\u95f4\u7ed3\u675f\u65f6\u8bbe\u7f6e\uff0c\u6216\u5728\u5176\u4ed6\u6a21\u5f0f\u7684\u505c\u6b62\u4f4d\u5f00\u59cb\u65f6\u8bbe\u7f6e\u3002\u5728\u5176\u4ed6\u6a21\u5f0f\u4e0b\uff0c\u5728\u505c\u6b62\u4f4d\u5f00\u59cb\u65f6\u7531\u786c\u4ef6\u8bbe\u7f6e\u3002\u5fc5\u987b\u7531\u8f6f\u4ef6\u6e05\u9664\u3002 RI SCON. 0 \u63a5\u6536\u4e2d\u65ad\u6807\u5fd7\uff08Receive interrupt flag\uff09\u3002\u5728\u6a21\u5f0f0\u4e2d\u7684\u7b2c8\u4f4d\u65f6\u95f4\u7ed3\u675f\u65f6\u7531\u786c\u4ef6\u8bbe\u7f6e\uff0c\u5728\u5176\u4ed6\u6a21\u5f0f\u4e2d\u7684\u505c\u6b62\u4f4d\u65f6\u95f4\u7684\u4e00\u534a\u65f6\u7531\u786c\u4ef6\u8bbe\u7f6e\u3002\u5728\u5176\u4ed6\u6a21\u5f0f\u4e0b\uff0c\u5728\u505c\u6b62\u4f4d\u65f6\u95f4\u7684\u4e00\u534a\u65f6\u7531\u786c\u4ef6\u8bbe\u7f6e\uff08\u9664\u4e86\u89c1SM2\uff09\u3002\u5fc5\u987b\u7531\u8f6f\u4ef6\u6e05\u9664\u3002 NOTE 1: SM0 SM1 \u6a21\u5f0f \u63cf\u8ff0 \u6ce2\u7279\u7387(Baud Rate) 0 0 0 \u5207\u6362\u5bc4\u5b58\u5668 Fosc./12 0 1 1 8-bit UART \u53ef\u53d8 1 0 2 9-bit UART Fosc/64 \u6216 Fosc./32 1 1 3 9-bit UART \u53ef\u53d8","title":"\u4f5c\u4e3a\u8ba1\u6570\u5668"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/Intel%20MCS-51%20%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C_%E5%AF%84%E5%AD%98%E5%99%A8%E9%83%A8%E5%88%86/#_16","text":"","title":"\u4e32\u53e3\u8bbe\u7f6e"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/Intel%20MCS-51%20%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C_%E5%AF%84%E5%AD%98%E5%99%A8%E9%83%A8%E5%88%86/#9","text":"td { text-align: center; } MODE SCON SM2 \u7684\u53d8\u5316 0 10H \u5355\u5904\u7406\u5668\u73af\u5883\uff08SM2 = 0\uff09 1 50H 2 90H 3 D0H 0 NS \u591a\u5904\u7406\u5668\u73af\u5883\uff08SM2 = 1\uff09 1 70H 2 B0H 3 F0H","title":"\u88689"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/Intel%20MCS-51%20%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C_%E5%AF%84%E5%AD%98%E5%99%A8%E9%83%A8%E5%88%86/#generating-baud-rates","text":"","title":"\u4ea7\u751f\u6ce2\u7279\u7387\uff08GENERATING BAUD RATES\uff09"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/Intel%20MCS-51%20%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C_%E5%AF%84%E5%AD%98%E5%99%A8%E9%83%A8%E5%88%86/#0-serial-port-in-mode-0","text":"\u6a21\u5f0f 0 \u6709\u4e00\u4e2a\u56fa\u5b9a\u7684\u6ce2\u7279\u7387\uff0c\u662f\u632f\u8361\u5668\u9891\u7387\u7684 1/12\u3002\u8981\u5728\u8fd9\u79cd\u6a21\u5f0f\u4e0b\u8fd0\u884c\u4e32\u53e3\uff0c\u4e0d\u9700\u8981\u8bbe\u7f6e\u4efb\u4f55\u7684 \u5b9a\u65f6\u5668/\u8ba1\u6570\u5668\u90fd\u4e0d\u9700\u8981\u88ab\u8bbe\u7f6e\u3002\u53ea\u6709 SCON \u5bc4\u5b58\u5668\u9700\u8981\u88ab\u5b9a\u4e49\u3002","title":"\u6a21\u5f0f 0 \u7684\u4e32\u53e3\uff08Serial Port in Mode 0\uff09:"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/Intel%20MCS-51%20%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C_%E5%AF%84%E5%AD%98%E5%99%A8%E9%83%A8%E5%88%86/#1-serial-port-in-mode-0","text":"\u6a21\u5f0f1\u6709\u4e00\u4e2a\u53ef\u53d8\u7684\u6ce2\u7279\u7387\u3002\u6ce2\u7279\u7387\u53ef\u4ee5\u7531\u5b9a\u65f6\u56681\u6216\u5b9a\u65f6\u56682\u4ea7\u751f\uff08\u4ec58052\uff09\u3002 \u8981\u7528\u4e8e\u6b64\u7528\u9014\uff0c\u5b9a\u65f6\u56681\u88ab\u7528\u4e8e\u6a21\u5f0f2\uff08\u81ea\u52a8\u91cd\u8f7d\uff09\u3002\u8bf7\u53c2\u8003\u672c\u7ae0\u7684\u5b9a\u65f6\u5668\u8bbe\u7f6e\u90e8\u5206\u3002 TH1 \u5fc5\u987b\u662f\u4e00\u4e2a\u6574\u6570\u503c\u3002\u5c06 TH1 \u56db\u820d\u4e94\u5165(Rounding off)\u5230\u6700\u63a5\u8fd1\u7684\u6574\u6570\u53ef\u80fd\u4e0d\u4f1a\u4ea7\u751f\u6240\u9700\u7684\u6ce2\u7279\u7387\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u53ef\u80fd\u4e0d\u5f97\u4e0d\u9009\u62e9\u53e6\u4e00\u79cd\u6676\u4f53\u9891\u7387\u3002 \u7531\u4e8ePCON\u5bc4\u5b58\u5668\u662f\u4e0d\u53ef\u5bfb\u5740\u7684\uff0c\u8bbe\u7f6e\u8be5\u4f4d\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u5bf9PCON\u5bc4\u5b58\u5668\u8fdb\u884c\u903b\u8f91OR\u3002(\u5373ORL PCON,\u00dd 80H)\u3002PCON\u7684\u5730\u5740\u662f87H\u3002","title":"\u6a21\u5f0f 1 \u7684\u4e32\u53e3\uff08Serial Port in Mode 0\uff09:"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/Intel%20MCS-51%20%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C_%E5%AF%84%E5%AD%98%E5%99%A8%E9%83%A8%E5%88%86/#2_1","text":"\u4e3a\u6b64\uff0c\u5fc5\u987b\u5728\u6ce2\u7279\u7387\u4ea7\u751f\u6a21\u5f0f\u4e0b\u4f7f\u7528\u5b9a\u65f6\u56682\u3002\u8bf7\u53c2\u8003\u672c\u7ae0\u7684\u5b9a\u65f6\u56682\u8bbe\u7f6e\u8868\u3002\u5982\u679c\u5b9a\u65f6\u56682\u901a\u8fc7\u5f15\u811aT2\uff08P1.0\uff09\u8fdb\u884c\u65f6\u949f\u63a7\u5236\uff0c\u5219\u6ce2\u7279\u7387\u4e3a\uff1a \u800c\u5982\u679c\u662f\u5185\u90e8\u65f6\u949f\uff0c\u90a3\u4e48\u6ce2\u7279\u7387\u5c31\u662f: \u4e3a\u4e86\u83b7\u5f97RCAP2H\u548cRCAP2L\u7684\u91cd\u8f7d\u503c\uff0c\u4e0a\u8ff0\u516c\u5f0f\u53ef\u4ee5\u6539\u5199\u4e3a\uff1a","title":"\u4f7f\u7528\u5b9a\u65f6\u5668/\u8ba1\u6570\u56682\u6765\u4ea7\u751f\u6ce2\u7279\u7387\u3002"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/Intel%20MCS-51%20%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C_%E5%AF%84%E5%AD%98%E5%99%A8%E9%83%A8%E5%88%86/#2_2","text":"\u5728\u8fd9\u79cd\u6a21\u5f0f\u4e0b\uff0c\u6ce2\u7279\u7387\u662f\u56fa\u5b9a\u7684\uff0c\u662f\u632f\u8361\u5668\u9891\u7387\u7684\uff08/32\uff09\u6216\uff08/64\uff09\uff0c\u53d6\u51b3\u4e8ePCON\u5bc4\u5b58\u5668\u4e2dSMOD\u4f4d\u7684\u503c\u3002\u5728\u8fd9\u79cd\u6a21\u5f0f\u4e0b\uff0c\u4e0d\u4f7f\u7528\u4efb\u4f55\u5b9a\u65f6\u5668\uff0c\u65f6\u949f\u6765\u81ea\u5185\u90e8\u7684 2 \u76f8\u65f6\u949f\u3002 SMOD = 1, Baud Rate = 1/32 Osc Freq. SMOD = 0, Baud Rate = 1/64 Osc Freq. \u8981\u8bbe\u7f6eSMOD\u4f4d\u3002ORL PCON,#80H\u3002PCON\u7684\u5730\u5740\u662f87H\u3002","title":"\u6a21\u5f0f2\u4e2d\u7684\u4e32\u884c\u7aef\u53e3\u3002"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/8051/Intel%20MCS-51%20%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C_%E5%AF%84%E5%AD%98%E5%99%A8%E9%83%A8%E5%88%86/#3","text":"\u6a21\u5f0f3\u4e2d\u7684\u6ce2\u7279\u7387\u662f\u53ef\u53d8\u7684\uff0c\u5176\u8bbe\u7f6e\u4e0e\u6a21\u5f0f1\u4e2d\u5b8c\u5168\u76f8\u540c\u3002","title":"\u6a21\u5f0f3\u4e0b\u7684\u4e32\u884c\u7aef\u53e3\u3002"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/ESP32/ESP32C3%E5%85%A5%E9%97%A8/","text":"ESP32-C3\u5165\u95e8 \u00b6 \u53c2\u8003 ESP-IDF \u7f16\u7a0b\u6307\u5357","title":"ESP32-C3\u5165\u95e8"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/ESP32/ESP32C3%E5%85%A5%E9%97%A8/#esp32-c3","text":"\u53c2\u8003 ESP-IDF \u7f16\u7a0b\u6307\u5357","title":"ESP32-C3\u5165\u95e8"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/RP2040/RP2040/","text":"","title":"RP2040"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E6%89%8B%E5%B7%A5%E7%84%8A%E6%8E%A5%E5%9F%BA%E7%A1%80/%E7%83%AD%E9%A3%8E%E6%9E%AA/","text":"\u70ed\u98ce\u67aa \u00b6 \u70ed\u98ce\u67aa\u7684\u9009\u62e9 \u00b6 \u5929\u8760 \u6587\u5b87WY815P \u94c1\u677f\u70e7 \u00b6 \u7528\u4e8e\u4e0d\u80fd\u4f7f\u7528\u70ed\u98ce\u67aa\u7684\u60c5\u51b5\u4e0b\u52a0\u70ed\uff0c\u6216\u8005\u52a0\u70ed + ptc\u52a0\u70ed\u677f \u6216\u8005 \u94dd\u57fa\u677f \u9521\u6d46\uff0c\u94a2\u7f51\uff0c\u52a9\u710a\u5242 \u00b6 AMTECH\uff08\u5047\u8d27\u548c\u8fc7\u671f\u8d27\u76f8\u5f53\u591a\uff09\u7684 RMA \u514d\u6e05\u6d17\u52a9\u710a\u5242\uff08\u4e0d\u5efa\u8bae\u4f7f\u7528\u6c34\u6eb6\u6027\u52a9\u710a\u5242\uff09 \u89c6\u9891\u6559\u7a0b \u00b6 How to Solder QFN MLF chips Using Hot Air without Solder Paste and Stencils \u5b57\u5e55\u642c\u8fd0 \u8981\u70b9 \u00b6 SAC\u65e0\u94c5\u710a\u6599\u5728217\u6444\u6c0f\u5ea6\u5f00\u59cb\u878d\u5316 FR4 PCB\u7684\u73bb\u7483\u8f6c\u5316\u6e29\u5ea6\uff08glass transition temperature\uff09\u4e3a120\u5230190\u6444\u6c0f\u5ea6\uff0c\u4f46\u53ea\u8981\u4e0d\u8d85\u8fc7\u592a\u591a\u6216\u8005\u52a0\u70ed\u65f6\u95f4\u8fc7\u957f\u4e5f\u6ca1\u4e8b\u3002\u8d85\u8fc7\u73bb\u7483\u8f6c\u5316\u6e29\u5ea6\u65f6\uff0c\u73af\u6c27\u6811\u8102\u5f00\u59cb\u81a8\u80c0\uff0c\u81a8\u80c0\u7684\u901f\u5ea6\u6bd4\u5176\u4ed6\u90e8\u5206\u5feb\u5f97\u591a\uff0c\u8fd9\u4f1a\u5bfc\u81f4 PCB \u8fc7\u5b54\u65ad\u88c2\uff08Crack vias\uff09PCB\u5c42\u53d8\u8272\u751a\u81f3\u5206\u79bb\uff0c\u7fd8\u8d77\u3002 \u5c06\u98ce\u5634\u653e\u52302-3\u82f1\u5bf8\uff085.08-7.62mm\uff09\u7684\u5730\u65b9\uff0c\u6162\u6162\u79fb\u52301-2\u82f1\u5bf8\uff082.54-5.08mm\uff09,\u7528\u70ed\u7a7a\u6c14\u4e0d\u65ad\u753b\u5708\uff0c\u4f7f\u6e29\u5ea6\u4e0a\u5347\u5230\u5927\u7ea6150\u5ea6 \u6d78\u6da6\u533a\uff08soak zone\uff09\uff1a\u4fdd\u6301\u6e29\u5ea61-2\u5206\u949f\uff0c\u4f7f\u5143\u4ef6\u6162\u6162\u5347\u6e29\uff0c\u52a9\u710a\u5242\u6d3b\u5316\uff0c\u907f\u514d\u70ed\u51b2\u51fb\u5bfc\u81f4\u5143\u4ef6\u635f\u574f \u56de\u6d41\u710a\uff1a\u5f85\u6d78\u6da6\u9636\u6bb5\u8fc7\u540e\uff0c\u5c06\u98ce\u5634\u79fb\u52a8\u5230\u56db\u5206\u4e4b\u4e00\u5230\u534a\u82f1\u5bf8\uff080.635-1.27cm\uff09\u7684\u5730\u65b9\uff0c\u4f7f\u6e29\u5ea6\u4e0a\u5347\u5230\u710a\u6599\u7684\u7194\u70b9\uff08217\u6444\u6c0f\u5ea6\uff09\u7136\u540e\u4e0a\u5347\u5230\u7ea6260\uff0c\u5e76\u5728\u4e0d\u5230\u4e0d\u8d85\u8fc730-90\u79d2\u7684\u65f6\u95f4\u5185\u518d\u6b21\u964d\u5230\u7194\u70b9\u4ee5\u4e0b\u3002\u6db2\u6001\u7684\u710a\u6599\u7684\u8868\u9762\u5f20\u529b\u4f7f\u5f97\u5143\u4ef6\u7528\u954a\u5b50\u8f7b\u6572\u4f1a\u5f39\u56de\u53bb\u3002\u518d15\u523030\u79d2\u5185\u6162\u6162\u5c06\u98ce\u5634\u4ece\u82af\u7247\u4e0a\u79fb\u5f00\uff0c\u5f53\u82af\u7247\u51b7\u5374\u5230150\u5ea6\u5de6\u53f3\uff0c\u5c31\u53ef\u4ee5\u628a\u6240\u6709\u7684\u70ed\u7a7a\u6c14\u90fd\u79fb\u5f00","title":"\u70ed\u98ce\u67aa"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E6%89%8B%E5%B7%A5%E7%84%8A%E6%8E%A5%E5%9F%BA%E7%A1%80/%E7%83%AD%E9%A3%8E%E6%9E%AA/#_1","text":"","title":"\u70ed\u98ce\u67aa"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E6%89%8B%E5%B7%A5%E7%84%8A%E6%8E%A5%E5%9F%BA%E7%A1%80/%E7%83%AD%E9%A3%8E%E6%9E%AA/#_2","text":"\u5929\u8760 \u6587\u5b87WY815P","title":"\u70ed\u98ce\u67aa\u7684\u9009\u62e9"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E6%89%8B%E5%B7%A5%E7%84%8A%E6%8E%A5%E5%9F%BA%E7%A1%80/%E7%83%AD%E9%A3%8E%E6%9E%AA/#_3","text":"\u7528\u4e8e\u4e0d\u80fd\u4f7f\u7528\u70ed\u98ce\u67aa\u7684\u60c5\u51b5\u4e0b\u52a0\u70ed\uff0c\u6216\u8005\u52a0\u70ed + ptc\u52a0\u70ed\u677f \u6216\u8005 \u94dd\u57fa\u677f","title":"\u94c1\u677f\u70e7"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E6%89%8B%E5%B7%A5%E7%84%8A%E6%8E%A5%E5%9F%BA%E7%A1%80/%E7%83%AD%E9%A3%8E%E6%9E%AA/#_4","text":"AMTECH\uff08\u5047\u8d27\u548c\u8fc7\u671f\u8d27\u76f8\u5f53\u591a\uff09\u7684 RMA \u514d\u6e05\u6d17\u52a9\u710a\u5242\uff08\u4e0d\u5efa\u8bae\u4f7f\u7528\u6c34\u6eb6\u6027\u52a9\u710a\u5242\uff09","title":"\u9521\u6d46\uff0c\u94a2\u7f51\uff0c\u52a9\u710a\u5242"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E6%89%8B%E5%B7%A5%E7%84%8A%E6%8E%A5%E5%9F%BA%E7%A1%80/%E7%83%AD%E9%A3%8E%E6%9E%AA/#_5","text":"How to Solder QFN MLF chips Using Hot Air without Solder Paste and Stencils \u5b57\u5e55\u642c\u8fd0","title":"\u89c6\u9891\u6559\u7a0b"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E6%89%8B%E5%B7%A5%E7%84%8A%E6%8E%A5%E5%9F%BA%E7%A1%80/%E7%83%AD%E9%A3%8E%E6%9E%AA/#_6","text":"SAC\u65e0\u94c5\u710a\u6599\u5728217\u6444\u6c0f\u5ea6\u5f00\u59cb\u878d\u5316 FR4 PCB\u7684\u73bb\u7483\u8f6c\u5316\u6e29\u5ea6\uff08glass transition temperature\uff09\u4e3a120\u5230190\u6444\u6c0f\u5ea6\uff0c\u4f46\u53ea\u8981\u4e0d\u8d85\u8fc7\u592a\u591a\u6216\u8005\u52a0\u70ed\u65f6\u95f4\u8fc7\u957f\u4e5f\u6ca1\u4e8b\u3002\u8d85\u8fc7\u73bb\u7483\u8f6c\u5316\u6e29\u5ea6\u65f6\uff0c\u73af\u6c27\u6811\u8102\u5f00\u59cb\u81a8\u80c0\uff0c\u81a8\u80c0\u7684\u901f\u5ea6\u6bd4\u5176\u4ed6\u90e8\u5206\u5feb\u5f97\u591a\uff0c\u8fd9\u4f1a\u5bfc\u81f4 PCB \u8fc7\u5b54\u65ad\u88c2\uff08Crack vias\uff09PCB\u5c42\u53d8\u8272\u751a\u81f3\u5206\u79bb\uff0c\u7fd8\u8d77\u3002 \u5c06\u98ce\u5634\u653e\u52302-3\u82f1\u5bf8\uff085.08-7.62mm\uff09\u7684\u5730\u65b9\uff0c\u6162\u6162\u79fb\u52301-2\u82f1\u5bf8\uff082.54-5.08mm\uff09,\u7528\u70ed\u7a7a\u6c14\u4e0d\u65ad\u753b\u5708\uff0c\u4f7f\u6e29\u5ea6\u4e0a\u5347\u5230\u5927\u7ea6150\u5ea6 \u6d78\u6da6\u533a\uff08soak zone\uff09\uff1a\u4fdd\u6301\u6e29\u5ea61-2\u5206\u949f\uff0c\u4f7f\u5143\u4ef6\u6162\u6162\u5347\u6e29\uff0c\u52a9\u710a\u5242\u6d3b\u5316\uff0c\u907f\u514d\u70ed\u51b2\u51fb\u5bfc\u81f4\u5143\u4ef6\u635f\u574f \u56de\u6d41\u710a\uff1a\u5f85\u6d78\u6da6\u9636\u6bb5\u8fc7\u540e\uff0c\u5c06\u98ce\u5634\u79fb\u52a8\u5230\u56db\u5206\u4e4b\u4e00\u5230\u534a\u82f1\u5bf8\uff080.635-1.27cm\uff09\u7684\u5730\u65b9\uff0c\u4f7f\u6e29\u5ea6\u4e0a\u5347\u5230\u710a\u6599\u7684\u7194\u70b9\uff08217\u6444\u6c0f\u5ea6\uff09\u7136\u540e\u4e0a\u5347\u5230\u7ea6260\uff0c\u5e76\u5728\u4e0d\u5230\u4e0d\u8d85\u8fc730-90\u79d2\u7684\u65f6\u95f4\u5185\u518d\u6b21\u964d\u5230\u7194\u70b9\u4ee5\u4e0b\u3002\u6db2\u6001\u7684\u710a\u6599\u7684\u8868\u9762\u5f20\u529b\u4f7f\u5f97\u5143\u4ef6\u7528\u954a\u5b50\u8f7b\u6572\u4f1a\u5f39\u56de\u53bb\u3002\u518d15\u523030\u79d2\u5185\u6162\u6162\u5c06\u98ce\u5634\u4ece\u82af\u7247\u4e0a\u79fb\u5f00\uff0c\u5f53\u82af\u7247\u51b7\u5374\u5230150\u5ea6\u5de6\u53f3\uff0c\u5c31\u53ef\u4ee5\u628a\u6240\u6709\u7684\u70ed\u7a7a\u6c14\u90fd\u79fb\u5f00","title":"\u8981\u70b9"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E6%89%8B%E5%B7%A5%E7%84%8A%E6%8E%A5%E5%9F%BA%E7%A1%80/%E7%94%B5%E7%83%99%E9%93%81/","text":"\u7535\u70d9\u94c1 \u00b6 \u9009\u62e9\u5408\u9002\u7684\u7535\u70d9\u94c1 \u00b6 \u4e0d\u5230\u767e\u5143\u7684 T12 \uff08\u6709\u7684\u751a\u81f3\u652f\u6301PD\u4f9b\u7535\uff09\uff0c\u5982\u679c\u81ea\u5236\u6210\u672c\u4e5f\u4e0d\u7b97\u9ad8 \uff08\u4f46\u662f\u5236\u4f5c\u70d9\u94c1\u9700\u8981\u4f60\u6709\u4e2a\u70d9\u94c1 \u6587\u5b87WY815\uff08\u8fd9\u4e2a\u662f\u9ad8\u9891\u710a\u53f0\uff09 \u710a\u63a5\u89c6\u9891\u6559\u7a0b \u00b6 PACE\u57fa\u7840\u710a\u63a5\u6559\u7a0b \u5176\u5b9e\u5b83\u7684\u53e6\u4e00\u4e2a\u540d\u5b57\uff0c\u662f NASA\u710a\u63a5\u57fa\u7840 \u624b\u5de5\u710a\u63a5\u7684\u4e03\u5927\u6076\u4e60 \u624b\u5de5\u710a\u9521\u57fa\u7840\u6559\u5b66 NASA\u7684\u710a\u63a5\u6807\u51c6 (\u540e\u6765 NASA \u8f6c\u800c\u91c7\u7528 IPC \u89c4\u8303\u4e86) Youtube \u4e0a\u9762\u4e5f\u6709\u5f88\u591a\u9ad8\u8d28\u91cf\u7684\u710a\u63a5\u6559\u7a0b \u5173\u4e8e\u65e0\u94c5\u710a\u9521 \u00b6 \u5982\u679c\u9009\u62e9\u4f7f\u7528\u65e0\u94c5\u710a\u9521\uff0c\u5efa\u8bae\u4f7f\u7528SAC305(SnAg3Cu0.5)\u7ec4\u5206\u710a\u6599 \u542b\u94f6\u662f\u4e3a\u4e86\u786e\u4fdd\u710a\u63a5\u5f3a\u5ea6\uff08\u542b\u94cb\u6216\u8005\u53ea\u542b\u94dc\u5f3a\u5ea6\u4f1a\u6bd4\u8f83\u5dee\uff09\uff0c\u800c\u4e0d\u662f\u4ec0\u4e48\u5bfc\u7535\u6027\u66f4\u597d \u66f4 HiFi \u4e4b\u7c7b\u7684 \u89c1 NASA \u5173\u4e8e\u65e0\u94c5\u710a\u6599\u7684 \u6587\u6863 \u710a\u63a5\u57fa\u7840 \u00b6 \u7535\u5b50\u710a\u63a5\uff08\u8f6f\u948e\u710a\uff09\u662f\u5bf9\u7535\u5b50\u5143\u4ef6\u8fdb\u884c\u53ef\u9760\u7684\u8fde\u63a5\u548c\u56fa\u5b9a\u7684\u65b9\u5f0f\uff0c\u5176\u539f\u7406\u662f\u6d78\u6da6\u4f5c\u7528 \u710a\u9521\u662f\u4e00\u79cd\u5408\u91d1\uff0c\u5bf9\u4e8e\u6709\u94c5\u710a\u9521\u6765\u8bf4\uff0c\u5176\u6210\u5206\u662f\u9521\u548c\u94c5\uff0c\u5bf9\u4e8e\u65e0\u94c5\u710a\u6599\u6765\u8bf4\u901a\u5e38\u662f\u9521\uff0c\u94f6\u548c\u94dc\uff0c\u4f4e\u7194\u70b9\u7684\u710a\u9521\u5219\u542b\u6709\u94cb \u4e0d\u540c\u6210\u5206\uff0c\u76f8\u540c\u6210\u5206\u7684\u4e0d\u540c\u6bd4\u4f8b\u4f1a\u8ba9\u710a\u9521\u5177\u6709\u4e0d\u540c\u7684\u7279\u6027\u3002 Sn63Pb37\u7684\u710a\u6599\u662f\u6613\u878d\u710a\u6599\uff0c\u5f53\u8fbe\u5230\u7194\u70b9\u65f6\u710a\u9521\u7acb\u523b\u5c31\u53d8\u6210\u4e86\u6db2\u6001 \u5f53\u710a\u9521\u878d\u5316\u65f6\uff0c\u70ed\u7684\u52a9\u710a\u5242\u4f1a\u6e05\u9664\u7535\u8def\u677f\u94dc\u5c42\u7684\u6c27\u5316\u819c\uff0c \u800c\u6d78\u6da6\u4f5c\u7528\u5219\u4f7f\u710a\u9521\u5728\u94dc\u5c42\u8868\u9762\u5f62\u6210\u4e00\u79cd\u65e2\u4e0d\u662f\u94dc\u548c\u9521\u7ec4\u6210\u7684\u65b0\u7684\u5408\u91d1\uff0c\u7ebf\u8def\u677f\u56e0\u6b64\u800c\u6cbe\u9521 \u5f53\u710a\u6599\u518d\u4e00\u6b21\u51b7\u5374\u5e76\u51dd\u56fa\uff0c\u5143\u5668\u4ef6\u5c31\u53ef\u4ee5\u88ab\u710a\u63a5 \u624b\u5de5\u710a\u63a5\u7684\u4e03\u5927\u6076\u4e60\uff1a \u00b6 \u7528\u529b\u8fc7\u5927 \u710a\u6599\u70ed\u6865\u4e0d\u5408\u9002 \u9519\u8bef\u7684\u70d9\u94c1\u5934\u5c3a\u5bf8 \u8fc7\u9ad8\u7684\u6e29\u5ea6 \u52a9\u710a\u5242\u4f7f\u7528\u4e0d\u5f53 \u8f6c\u79fb\u710a\u63a5 \u4e0d\u5fc5\u8981\u7684\u4fee\u9970\u6216\u8fd4\u5de5","title":"\u7535\u70d9\u94c1"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E6%89%8B%E5%B7%A5%E7%84%8A%E6%8E%A5%E5%9F%BA%E7%A1%80/%E7%94%B5%E7%83%99%E9%93%81/#_1","text":"","title":"\u7535\u70d9\u94c1"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E6%89%8B%E5%B7%A5%E7%84%8A%E6%8E%A5%E5%9F%BA%E7%A1%80/%E7%94%B5%E7%83%99%E9%93%81/#_2","text":"\u4e0d\u5230\u767e\u5143\u7684 T12 \uff08\u6709\u7684\u751a\u81f3\u652f\u6301PD\u4f9b\u7535\uff09\uff0c\u5982\u679c\u81ea\u5236\u6210\u672c\u4e5f\u4e0d\u7b97\u9ad8 \uff08\u4f46\u662f\u5236\u4f5c\u70d9\u94c1\u9700\u8981\u4f60\u6709\u4e2a\u70d9\u94c1 \u6587\u5b87WY815\uff08\u8fd9\u4e2a\u662f\u9ad8\u9891\u710a\u53f0\uff09","title":"\u9009\u62e9\u5408\u9002\u7684\u7535\u70d9\u94c1"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E6%89%8B%E5%B7%A5%E7%84%8A%E6%8E%A5%E5%9F%BA%E7%A1%80/%E7%94%B5%E7%83%99%E9%93%81/#_3","text":"PACE\u57fa\u7840\u710a\u63a5\u6559\u7a0b \u5176\u5b9e\u5b83\u7684\u53e6\u4e00\u4e2a\u540d\u5b57\uff0c\u662f NASA\u710a\u63a5\u57fa\u7840 \u624b\u5de5\u710a\u63a5\u7684\u4e03\u5927\u6076\u4e60 \u624b\u5de5\u710a\u9521\u57fa\u7840\u6559\u5b66 NASA\u7684\u710a\u63a5\u6807\u51c6 (\u540e\u6765 NASA \u8f6c\u800c\u91c7\u7528 IPC \u89c4\u8303\u4e86) Youtube \u4e0a\u9762\u4e5f\u6709\u5f88\u591a\u9ad8\u8d28\u91cf\u7684\u710a\u63a5\u6559\u7a0b","title":"\u710a\u63a5\u89c6\u9891\u6559\u7a0b"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E6%89%8B%E5%B7%A5%E7%84%8A%E6%8E%A5%E5%9F%BA%E7%A1%80/%E7%94%B5%E7%83%99%E9%93%81/#_4","text":"\u5982\u679c\u9009\u62e9\u4f7f\u7528\u65e0\u94c5\u710a\u9521\uff0c\u5efa\u8bae\u4f7f\u7528SAC305(SnAg3Cu0.5)\u7ec4\u5206\u710a\u6599 \u542b\u94f6\u662f\u4e3a\u4e86\u786e\u4fdd\u710a\u63a5\u5f3a\u5ea6\uff08\u542b\u94cb\u6216\u8005\u53ea\u542b\u94dc\u5f3a\u5ea6\u4f1a\u6bd4\u8f83\u5dee\uff09\uff0c\u800c\u4e0d\u662f\u4ec0\u4e48\u5bfc\u7535\u6027\u66f4\u597d \u66f4 HiFi \u4e4b\u7c7b\u7684 \u89c1 NASA \u5173\u4e8e\u65e0\u94c5\u710a\u6599\u7684 \u6587\u6863","title":"\u5173\u4e8e\u65e0\u94c5\u710a\u9521"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E6%89%8B%E5%B7%A5%E7%84%8A%E6%8E%A5%E5%9F%BA%E7%A1%80/%E7%94%B5%E7%83%99%E9%93%81/#_5","text":"\u7535\u5b50\u710a\u63a5\uff08\u8f6f\u948e\u710a\uff09\u662f\u5bf9\u7535\u5b50\u5143\u4ef6\u8fdb\u884c\u53ef\u9760\u7684\u8fde\u63a5\u548c\u56fa\u5b9a\u7684\u65b9\u5f0f\uff0c\u5176\u539f\u7406\u662f\u6d78\u6da6\u4f5c\u7528 \u710a\u9521\u662f\u4e00\u79cd\u5408\u91d1\uff0c\u5bf9\u4e8e\u6709\u94c5\u710a\u9521\u6765\u8bf4\uff0c\u5176\u6210\u5206\u662f\u9521\u548c\u94c5\uff0c\u5bf9\u4e8e\u65e0\u94c5\u710a\u6599\u6765\u8bf4\u901a\u5e38\u662f\u9521\uff0c\u94f6\u548c\u94dc\uff0c\u4f4e\u7194\u70b9\u7684\u710a\u9521\u5219\u542b\u6709\u94cb \u4e0d\u540c\u6210\u5206\uff0c\u76f8\u540c\u6210\u5206\u7684\u4e0d\u540c\u6bd4\u4f8b\u4f1a\u8ba9\u710a\u9521\u5177\u6709\u4e0d\u540c\u7684\u7279\u6027\u3002 Sn63Pb37\u7684\u710a\u6599\u662f\u6613\u878d\u710a\u6599\uff0c\u5f53\u8fbe\u5230\u7194\u70b9\u65f6\u710a\u9521\u7acb\u523b\u5c31\u53d8\u6210\u4e86\u6db2\u6001 \u5f53\u710a\u9521\u878d\u5316\u65f6\uff0c\u70ed\u7684\u52a9\u710a\u5242\u4f1a\u6e05\u9664\u7535\u8def\u677f\u94dc\u5c42\u7684\u6c27\u5316\u819c\uff0c \u800c\u6d78\u6da6\u4f5c\u7528\u5219\u4f7f\u710a\u9521\u5728\u94dc\u5c42\u8868\u9762\u5f62\u6210\u4e00\u79cd\u65e2\u4e0d\u662f\u94dc\u548c\u9521\u7ec4\u6210\u7684\u65b0\u7684\u5408\u91d1\uff0c\u7ebf\u8def\u677f\u56e0\u6b64\u800c\u6cbe\u9521 \u5f53\u710a\u6599\u518d\u4e00\u6b21\u51b7\u5374\u5e76\u51dd\u56fa\uff0c\u5143\u5668\u4ef6\u5c31\u53ef\u4ee5\u88ab\u710a\u63a5","title":"\u710a\u63a5\u57fa\u7840"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E6%89%8B%E5%B7%A5%E7%84%8A%E6%8E%A5%E5%9F%BA%E7%A1%80/%E7%94%B5%E7%83%99%E9%93%81/#_6","text":"\u7528\u529b\u8fc7\u5927 \u710a\u6599\u70ed\u6865\u4e0d\u5408\u9002 \u9519\u8bef\u7684\u70d9\u94c1\u5934\u5c3a\u5bf8 \u8fc7\u9ad8\u7684\u6e29\u5ea6 \u52a9\u710a\u5242\u4f7f\u7528\u4e0d\u5f53 \u8f6c\u79fb\u710a\u63a5 \u4e0d\u5fc5\u8981\u7684\u4fee\u9970\u6216\u8fd4\u5de5","title":"\u624b\u5de5\u710a\u63a5\u7684\u4e03\u5927\u6076\u4e60\uff1a"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E6%89%8B%E5%B7%A5%E7%84%8A%E6%8E%A5%E5%9F%BA%E7%A1%80/%E8%87%AA%E5%88%B6%E9%92%A2%E7%BD%91/","text":"\u81ea\u5236\u94a2\u7f51 \u00b6 \u4f7f\u7528\u6fc0\u5149\u96d5\u523b\u673a\u81ea\u5236\u9ea6\u62c9\u7247\u6750\u8d28\u7684\u94a2\u7f51\uff08PCB\u6a21\u677f\uff09 \u00b6 https://lowpowerlab.com/2015/03/27/laser-etching-smt-stencils-tutorial/ \u901a\u8fc7\u70ed\u8f6c\u5370\u81ea\u5236\u6613\u62c9\u7f50\u94a2\u7f51 \u00b6 https://lowpowerlab.com/2013/02/11/diy-smd-metal-stencils-the-definitive-tutorial/","title":"\u81ea\u5236\u94a2\u7f51"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E6%89%8B%E5%B7%A5%E7%84%8A%E6%8E%A5%E5%9F%BA%E7%A1%80/%E8%87%AA%E5%88%B6%E9%92%A2%E7%BD%91/#_1","text":"","title":"\u81ea\u5236\u94a2\u7f51"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E6%89%8B%E5%B7%A5%E7%84%8A%E6%8E%A5%E5%9F%BA%E7%A1%80/%E8%87%AA%E5%88%B6%E9%92%A2%E7%BD%91/#pcb","text":"https://lowpowerlab.com/2015/03/27/laser-etching-smt-stencils-tutorial/","title":"\u4f7f\u7528\u6fc0\u5149\u96d5\u523b\u673a\u81ea\u5236\u9ea6\u62c9\u7247\u6750\u8d28\u7684\u94a2\u7f51\uff08PCB\u6a21\u677f\uff09"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E6%89%8B%E5%B7%A5%E7%84%8A%E6%8E%A5%E5%9F%BA%E7%A1%80/%E8%87%AA%E5%88%B6%E9%92%A2%E7%BD%91/#_2","text":"https://lowpowerlab.com/2013/02/11/diy-smd-metal-stencils-the-definitive-tutorial/","title":"\u901a\u8fc7\u70ed\u8f6c\u5370\u81ea\u5236\u6613\u62c9\u7f50\u94a2\u7f51"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E6%B5%8B%E9%87%8F%E8%AE%BE%E5%A4%87%E7%9A%84%E4%BD%BF%E7%94%A8/%E4%B8%87%E7%94%A8%E8%A1%A8/","text":"","title":"\u4e07\u7528\u8868"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E6%B5%8B%E9%87%8F%E8%AE%BE%E5%A4%87%E7%9A%84%E4%BD%BF%E7%94%A8/%E7%A4%BA%E6%B3%A2%E5%99%A8/","text":"\u53c2\u8003\uff1a \u9009\u62e9\u57fa\u7840\u793a\u6ce2\u5668\u768410\u4e2a\u56e0\u7d20 Tektronix \u793a\u6ce2\u5668\u57fa\u7840\u53ca\u57fa\u672c\u529f\u80fd\u4ecb\u7ecd (\u53ef\u60dc\u6211\u4e70\u4e0d\u8d77\u6cf0\u514b \u63a2\u5934 ABC \u5165\u95e8\u624b\u518c \u6df1\u5165\u4e86\u89e3\u4fe1\u53f7\u53d1\u751f\u5668 \u5b9e\u65f6\u9891\u8c31\u5206\u6790\u57fa\u7840\u77e5\u8bc6 \u5de5\u79d1\u7537\u5b59\u8001\u5e08","title":"\u793a\u6ce2\u5668"},{"location":"%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B/%E6%B5%8B%E9%87%8F%E8%AE%BE%E5%A4%87%E7%9A%84%E4%BD%BF%E7%94%A8/%E9%80%BB%E8%BE%91%E5%88%86%E6%9E%90%E4%BB%AA/","text":"","title":"\u903b\u8f91\u5206\u6790\u4eea"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA/Web%20%E5%BC%80%E5%8F%91/%E5%BB%BA%E7%AB%99/","text":"\u5e74\u8f7b\u4eba\u7684\u7b2c\u4e00\u6b21\u5efa\u7ad9 \u00b6 \u6240\u4ee5\u4e00\u4e9b\u96f6\u788e\u7684\u4e1c\u897f\u4f1a\u8bb0\u5f55\u5728\u8fd9\u91cc\uff0c\u6240\u6709\u5185\u5bb9\u53c2\u8003\u81ea\u7f51\u7edc\uff0c\u4ec5\u7559\u4f5c\u4e2a\u4eba\u7b14\u8bb0\uff0c\u5982\u679c\u6267\u610f\u7ffb\u9605\uff0c\u8bf7\u81ea\u884c\u5224\u65ad\u5185\u5bb9\u53ef\u9760\u6027 \u4e00.\u6311\u9009\u4e91\u4e3b\u673a\u670d\u52a1\u5546 \u00b6 \u5982\u679c\u670d\u52a1\u5546\u4e0d\u9760\u8c31\uff0c\u7528\u6237\uff08\u4f60\u81ea\u5df1\uff09\u5c06\u9762\u4e34\u4ece\u6570\u636e\u4e22\u5931\u5230\u5377\u94b1\u8dd1\u8def\u4e0d\u7b49\u7684\u98ce\u9669\u3002 \u7531\u4e8e\u4e4b\u524d\u5076\u7136\u4ece\u5fae\u535a \u52a8\u6f2b\u535a\u4e3b\uff08\u00bf\uff09 \u90a3\u91cc\u770b\u5230\u8fc7\uff0c\u5c31\u6574\u4e86\u4e2a\u52a0\u62ff\u5927\u7684\u670d\u52a1\u5546\uff08\u5e0c\u671b\u522b\u8dd1\u8def\uff09 \u56fd\u5185\u7684\u817e\u8baf\u4e91\uff0c\u963f\u91cc\u4e91\uff0c\u56fd\u5916\u7684\u50cf vultr\uff0cdigiocean \u90a3\u79cd\u5e94\u8be5\u6bd4\u8f83\u9760\u8c31\uff0c\u81f3\u5c11\u4e0d\u81f3\u4e8e\u8dd1\u8def\uff0c\u9009\u62e9\u4e00\u4e9b\u4e0d\u592a\u77e5\u540d\u7684\u5e94\u8be5\u591a Google \u4e00\u4e0b\u5b83\u4eec\u7684\u98ce\u8bc4\uff08\u4f46\u662f\u4e0d\u8981\u76f8\u4fe1\u8f6f\u6587\uff09 \u56fd\u5185VPS\u5efa\u7ad9\u65f6\u9700\u8981**\u5907\u6848**\u7684\uff0c\u672c\u6765\u6211\u4e5f\u662f\u60f3\u79df\u4e2a\u4fbf\u5b9c\u5b66\u751f\u673a\uff08\u6bd5\u7adf\u4ef7\u683c\u4f4e\u7684\u79bb\u8c31\uff09\uff0c\u5907\u6848\u4e5f\u4e0d\u662f\u4e0d\u884c\uff0c \u4f46\u4e4b\u524d\u770b\u5230\u6709\u524d\u7aef\u5927\u4f6c\u79df\u67d0\u9e45\u5382\u7684 VPS\uff0c\u4e5f\u5907\u6848\u4e86\uff0c\u7ed3\u679c\u9e45\u5382\u6253\u7535\u8bdd\u8fc7\u6765\u8bf4 blog \u4e0d\u80fd\u8f6c\u8f7d\u4efb\u4f55\u65b0\u95fb\uff0c\u4e5f\u4e0d\u80fd\u8bbe\u7f6e\u8bc4\u8bba\u7cfb\u7edf\uff08\uff1f\uff1f\uff1f\uff09 \u6240\u4ee5\uff0c\u6478\u4e86 \u7ebf\u8def \u00b6 \u53c2\u8003 \u56fd\u5185\u4e3b\u6d41\u7f51\u7edc\u8fd0\u8425\u5546\u56fd\u9645\u8fde\u63a5\u7ebf\u8def\u7b80\u8c08--\u77e5\u4e4e\u4e13\u680f \u4fdd\u8bc1\u56fd\u5185\u7684\u8bbf\u95ee\u8d28\u91cf\uff0c\u6700\u597d\u8fd8\u662f\u6ce8\u610f\u4e00\u4e0b VPS \u7684**\u7ebf\u8def**\uff0c \u4f46\u662f\u6211\u7b2c\u4e00\u6b21\u8d2d\u4e70\u6ca1\u6709\u7ecf\u9a8c\u641e\u5fd8\u4e86\u3002 \u8d2d\u4e70\u4e0e\u6ce8\u518c \u00b6 \u9009\u62e9\u5408\u9002\u7684\u5957\u9910\uff0c\u586b\u5199\u5fc5\u8981\u7684\u4fe1\u606f\u5e76\u4ed8\u6b3e\u5373\u53ef \u5982\u679c\u670d\u52a1\u5546\u5df2\u7ecf\u63d0\u4f9b\u4e86\u652f\u4ed8\u5b9d\u652f\u6301\uff0c\u90a3\u5c31\u65b9\u4fbf\u4e86\uff0c\u6709\u4e9b\u670d\u52a1\u5546\u5219\u9700\u8981\u4f60\u6709 paypal \u6216\u8005\u4fe1\u7528\u5361 \u6b64\u5916\uff0c\u90e8\u5206\u670d\u52a1\u5546\u4e3a\u4e86\u9632\u6b62\u6076\u610f\u6ce8\u518c\uff0c\u53ef\u80fd\u4f1a\u8981\u6c42\u7981\u6b62\u4f7f\u7528\u7f51\u7edc\u4ee3\u7406\uff0c\u5e76\u4e14\u5fc5\u987b\u586b\u5199\u771f\u5b9e\u7684\u533a\u57df\uff08\u5176\u4ed6\u4fe1\u606f\u5012\u662f\u53ef\u80fd\u65e0\u8db3\u8f7b\u91cd\uff09\u3002 \u7b80\u5355\u7684\u914d\u7f6e \u00b6 VPS \u4ed8\u6b3e\u540e\u53ef\u80fd\u9700\u8981\u4e00\u6bb5\u65f6\u95f4\u521d\u59cb\u5316\u624d\u53ef\u7528\uff0c\u4f46\u6211\u7b49\u4e86\u4e00\u4e2a\u5c0f\u65f6\u8fd8\u662f pending\uff08\u51c6\u5907\u4e2d\uff09\uff0c\u76f4\u63a5\u4e0e\u5ba2\u670d\u8054\u7cfb\u5f97\u77e5\u662f\u8054\u7cfb\u5730\u5740\u4e0d\u591f\u8be6\u7ec6\uff0c\u8865\u5168\u540e\u5c31\u51c6\u5907\u597d\u4e86 \u6211\u9009\u62e9\u7684\u9ed8\u8ba4\u7cfb\u7edf\u662f Debian 11\uff0cVPS \u63d0\u4f9b\u4e86\u9ed8\u8ba4\u7684 root\u5bc6\u7801 (\u867d\u7136\u9ed8\u8ba4\u7684\u5bc6\u7801\u4e5f\u662f\u5f3a\u5bc6\u7801\uff0c\u4f46\u5b89\u5168\u8d77\u89c1\u8fd8\u662f\u81ea\u5df1\u6539\u4e00\u4e0b\uff0c\u800c\u4e14\u8981\u5f3a\u5bc6\u7801\uff0c\u5341\u51e0\u4f4d\u5927\u5c0f\u5199\u52a0\u6570\u5b57\u7279\u6b8a\u7b26\u53f7\u7684\u90a3\u79cd\uff01\uff01\uff01) \u4e4b\u540e\u7528 SSH \u8fde\u63a5\u5c31\u597d\u4e86 \u6dfb\u52a0\u65b0\u7684\u7528\u6237\uff0c\u5e76\u5c06\u7528\u6237\u6dfb\u52a0\u5230 sudo \u7ec4\uff0c\u4ee5\u540e\u5c31\u7528\u8fd9\u4e2a\u7528\u6237\u767b\u5f55\u4e86\uff08\u514d\u5f97 rm -rf / \uff09 \u7f51\u7edc\u4e0e\u6d4b\u901f \u00b6 \u7531\u4e8e\u8d2d\u4e70\u7684\u662f\u4e91\u670d\u52a1\u5668\uff0c\u6d4b\u901f\u662f\u7406\u6240\u5f53\u7136\u7684\uff0c\u8c01\u4e5f\u4e0d\u5e0c\u671b\u81ea\u5df1\u7684\u670d\u52a1\u5668\u4e0a\u7f51\u5361\u6210doge\uff0c\u901a\u5e38\uff0c VPS \u670d\u52a1\u5546\u4f1a\u63d0\u4f9b \u6d4b\u8bd5IP\u548c\u6d4b\u901f\u6587\u4ef6\uff0c\u5728\u8d2d\u4e70\u4e4b\u524d\u5c31\u53ef\u4ee5\u6d4b\u4e00\u4e0b \uff0c\u7136\u800c\u6211\u5fd8\u4e86\u3002 \u6709\u5927\u91cf\u7684\u6d4b\u901f\u811a\u672c\u53ef\u4ee5\u4f7f\u7528 \u50cf\u662f bench.sh \u6216\u8005 UnixBench.sh \u4e4b\u7c7b\u7684\uff0c\u8fd9\u4e9b\u5de5\u5177\u901a\u8fc7 wget \u6216 crul \u547d\u4ee4\u4e0b\u8f7d\u540e\u8fd0\u884c\u5c31\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u4f7f\u7528 \u5bf9\u4e8eVPS\u7684\u7ebf\u8def\u4e5f\u53ef\u4ee5\u8fdb\u884c\u6d4b\u8bd5 \u67e5\u770b VPS \u6240\u4f7f\u7528\u7684\u865a\u62df\u5316\u6280\u672f \u00b6 $ sudo apt install virt-what $ virt-what hyperv xen xen-domU \u672c\u6765\u770b\u5230\u6709 \u4f7f\u7528 Hyper-V \u865a\u62df\u5316\u6280\u672f\u7684 VPS \u4e0d\u9002\u5408\u88c5 Linux \u7684\u8bf4\u6cd5 \u540e\u6765\u4e00\u60f3\uff1a\u4e0d\u5bf9\uff0cWSL2 \u4e0d\u662f\u57fa\u4e8e Hyper-V \u5417\uff1f \u53c8\u4e0d\u662f\u4e0d\u80fd\u7528.jpg \u4fee\u6539\u9ed8\u8ba4 SSH \u7aef\u53e3\u5e76\u914d\u7f6e Fail2Ban \u9632\u6b62\u66b4\u529b\u7834\u89e3 \u00b6 \u53c2\u8003 https://www.zatp.com/post/modify-ssh-port/ $ sudo vim /etc/ssh/sshd_config \u5728 #Port 22 \u4e0b\u9762\u6dfb\u52a0\u4f60\u60f3\u8bbe\u7f6e\u7684\u7aef\u53e3\uff0c\u5c31\u50cf\u8fd9\u6837 #Port 22 Port [\u7aef\u53e3\u53f7] \u7aef\u53e3\u53f7\u7684\u8303\u56f4\u5c3d\u53ef\u80fd\u5927\u4e00\u70b9\uff0c\u4f46\u8981\u968f\u673a \u4f7f\u7528 Fail2Ban \u963b\u6b62\u574f\u4e1c\u897f \u00b6 \u53c2\u8003 Debian \u4e0b Nginx \u914d\u5408 Fail2Ban \u51cf\u5c11\u6076\u610f\u626b\u63cf\u548c\u653b\u51fb \u5982\u679c\u60f3\u8981\u4e86\u89e3\u66f4\u591a\u76f8\u5173\u670d\u52a1\u5668\u5b89\u5168\u77e5\u8bc6\uff0ccloudflare\u63d0\u4f9b\u4e86 \u8be6\u5c3d\u7684\u6587\u6863 \u66b4\u9732\u5728\u516c\u7f51\u7684 SSH \u53ef\u80fd\u88ab\u7a77\u4e3e\u7834\u89e3\uff0cFail2Ban \u4f1a\"\u7981\u6b62\u5bfc\u81f4\u591a\u6b21\u8ba4\u8bc1\u9519\u8bef\u7684\u4e3b\u673a(ban hosts that cause multiple authentication errors)\" \u4ece\u800c\u7f13\u89e3\u8fd9\u6837\u7684\u653b\u51fb\u3002\u4e0b\u9762\u662f\u5b98\u65b9\u7684\u7b80\u4ecb Fail2Ban \u626b\u63cf\u65e5\u5fd7\u6587\u4ef6\uff0c\u5e76\u7981\u6b62 IP \u5730\u5740\u8fdb\u884c\u8fc7\u591a\u7684\u5931\u8d25\u767b\u5f55\u5c1d\u8bd5\u3002\u5b83\u901a\u8fc7\u66f4\u65b0\u7cfb\u7edf\u7684\u9632\u706b\u5899\u89c4\u5219\uff0c\u62d2\u7edd\u6765\u81ea\u8fd9\u4e9bIP\u5730\u5740\u7684\u65b0\u8fde\u63a5\uff0c\u5e76\u5728\u53ef\u914d\u7f6e\u7684\u65f6\u95f4\u5185\u5b8c\u6210\u8fd9\u4e00\u64cd\u4f5c\u3002Fail2Ban\u5f00\u7bb1\u5373\u7528\uff0c\u53ef\u4ee5\u8bfb\u53d6\u8bb8\u591a\u6807\u51c6\u7684\u65e5\u5fd7\u6587\u4ef6\uff0c\u5982sshd\u548cApache\u7684\u65e5\u5fd7\u6587\u4ef6\uff0c\u4e5f\u53ef\u4ee5\u8f7b\u677e\u914d\u7f6e\u4e3a\u8bfb\u53d6\u60a8\u9009\u62e9\u7684\u4efb\u4f55\u65e5\u5fd7\u6587\u4ef6\uff0c\u4ee5\u5904\u7406\u60a8\u5e0c\u671b\u7684\u4efb\u4f55\u9519\u8bef\u3002 /var/log/auth.log \u5c3d\u7ba1 Fail2Ban \u80fd\u591f\u964d\u4f4e\u9519\u8bef\u7684\u8ba4\u8bc1\u5c1d\u8bd5\u7387\uff0c\u4f46\u5b83\u4e0d\u80fd\u6d88\u9664\u5f31\u8ba4\u8bc1\u5e26\u6765\u7684\u98ce\u9669\u3002\u5982\u679c\u4f60\u771f\u7684\u60f3\u4fdd\u62a4\u670d\u52a1\uff0c\u8bf7\u5c06\u670d\u52a1\u8bbe\u7f6e\u4e3a\u4ec5\u4f7f\u7528\u53cc\u56e0\u7d20\u8ba4\u8bc1\uff0c\u6216\u516c\u94a5/\u79c1\u94a5\u8ba4\u8bc1\u673a\u5236\u3002 ----\u901a\u8fc7DeepL\u7ffb\u8bd1 \u5b89\u88c5 (\u4ee5 debian \u4e3a\u4f8b): \u00b6 $ sudo apt install -y fail2ban $ sudo aptitude install nftables $ sudo systemctl enable nftables.service \u914d\u7f6e jail(\u5750\u7262?) \u89c4\u5219\uff1a \u00b6 \u53c2\u8003 ArchWiki sudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local .conf \u662f Fail2Ban \u7684\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\u3002\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\u65f6\uff0cFail2Ban \u4f1a\u4f18\u5148\u8bfb\u53d6 .local \u6587\u4ef6 \u4e0d\u8981\u76f4\u63a5\u4fee\u6539.conf\u6587\u4ef6\uff0c\u8fd9\u6837\u4e00\u66f4\u65b0\u5c31\u65e0\u4e86 \u5728\u5bf9\u5e94\u7684\u89c4\u5219\u4e0b\u6dfb\u52a0 enabled = true \u6ce8\u610f\uff1a\u7531\u4e8e\u4e4b\u524d\u4fee\u6539\u4e86 ssh \u7aef\u53e3\u53f7\uff0c\u914d\u7f6e\u6587\u4ef6\u91cc\u9762\u7684 port = ssh \u5b9e\u9645\u4e0a\u8fd8\u662f port = 22 (\u914d\u7f6e\u6587\u4ef6\u91cc ssh \u7684\u610f\u601d\u662f SSH \u7684\u5468\u77e5\u7aef\u53e3\u53f7 )\uff0c\u9700\u8981\u81ea\u884c\u4fee\u6539\u4e3a 0:65535 \uff08\u5373ban\u6389\u7684\u6240\u6709\u7684\u7aef\u53e3\uff09 \u5728\u6b64\u611f\u8c22 debiancn \u7fa4\u7ec4\uff0c\u4ee5\u53ca\u4e0d\u4f1a\u50cf\u67d0 IM \u8f6f\u4ef6\u90a3\u6837\u4e22\u804a\u5929\u8bb0\u5f55\u7684 telegram \u4e4b\u540e $ sudo fail2ban-client status \u5e94\u5f53\u80fd\u770b\u5230\u5bf9\u5e94\u7684\u89c4\u5219\u542f\u7528 -> % sudo fail2ban-client status Status |- Number of jail: 1 `- Jail list: sshd \u5982\u679c\u8981\u67e5\u770b\u7279\u5b9a\u89c4\u5219\u7684\u5c01\u7981\u72b6\u6001\uff0c\u4ee5\u53ca\u8fd9\u6761\u89c4\u5219 ban \u6389\u7684 IP Status for the jail: sshd |- Filter | |- Currently failed: 0 | |- Total failed: 5 | `- File list: /var/log/auth.log `- Actions |- Currently banned: 0 |- Total banned: 2 `- Banned IP list: \u6d4b\u8bd5 Fail2Ban \u662f\u5426\u6709\u6548 \u00b6 \u80af\u5b9a\u5f97\u8bd5\u8bd5\uff0c\u4e07\u4e00\u6839\u672c\u4e0d\u7075\u5c82\u4e0d\u662f\u5f88\u5c34\u5c2c \u4f46\u662f\u4e0d\u80fd\u7528\u81ea\u5df1\u672c\u673a\u8bd5\uff0c\u4e0d\u7136\u81ea\u5df1\u628a\u81ea\u5df1ban\u4e86\u8fde\u4e0d\u4e0a\u5c31\u5bc4\u4e86 \u7f51\u4e0a\u7684\u529e\u6cd5\u662f\u7528\u53e6\u4e00\u53f0VPS\u8bd5\uff0c\u4f46\u6211\u53ea\u6709\u4e00\u53f0\uff0c\u4e8e\u662f\u60f3\u5230\u7528\u5728\u624b\u673a\u4f7f\u7528\u6d41\u91cf\u7684\u60c5\u51b5\u4e0b\uff0c\u901a\u8fc7 Termux \u7684 SSH \u5c1d\u8bd5 \u7ed3\u679c\u8bd5\u8bd5\u5c31\u901d\u901d\uff0c\u5c3d\u7ba1\u770b\u7740\u81ea\u5df1\u624b\u673a\u7684IP\u8fdb\u4e86Jail\u9ed1\u540d\u5355\uff0c\u4f46\u662fSSH\u4f9d\u7136\u53ef\u4ee5\u7ee7\u7eed\u5c1d\u8bd5\uff0c\u751a\u81f3\u8f93\u5bf9\u5bc6\u7801\u53ef\u4ee5\u6b63\u5e38\u8fde\u63a5 \u8fd9\u5176\u5b9e\u662f\u914d\u7f6e\u6587\u4ef6\u9ed8\u8ba4 ssh = 22 \u7684\u9505 \u4f7f\u7528\u5bc6\u94a5\u767b\u5f55 SSH \u00b6 \u53c2\u8003 ArchWiki \u53ca SSH Mastery:OpenSSH, Putty, Tunnels and Keys \u5c06 SSH \u914d\u7f6e\u4e3a\u4ec5\u5141\u8bb8\u901a\u8fc7\u5bc6\u94a5\u767b\u5f55\u53ef\u4ee5\u66f4\u597d\u7684\u4fdd\u8bc1\u5b89\u5168 \u5728\u672c\u673a\u751f\u6210 SSH \u5bc6\u94a5 \u00b6 $ ssh-keygen -t ed25519 -f ssh_host_ed25519_key -N '' -t --------\u6307\u5b9a\u5bc6\u94a5\u7c7b\u578b\uff0ced25519\u7684\u5b89\u5168\u6027\u4ecb\u4e8eRSA2048\u548cRSA4096\u4e4b\u95f4\uff08\u76f8\u5f53\u4e8eRSA3072\uff09\uff0c\u4f46\u6027\u80fd\u66f4\u9ad8\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\u5bc6\u94a5\u7c7b\u578b\uff0cSSH\u9ed8\u8ba4\u4f7f\u75283072\u4f4d\u7684RSA\u5bc6\u94a5 -f --------\u5236\u5b9a\u79c1\u94a5\u7684\u6587\u4ef6\u540d -N --------\u6307\u5b9a\u53e3\u4ee4 \u5bf9\u6bd4\u4e00\u4e0b GitHub \u5b98\u65b9\u6587\u6863 \u00b6 $ ssh-keygen -t ed25519 -C \"your_email@example.com\" -C --------\u6dfb\u52a0\u6ce8\u91ca\uff0c\u6ce8\u91ca\u5f53\u7136\u662f\u53ef\u9009\u7684\uff0c\u4e3a\u7684\u662f\u907f\u514d\u4f60\u6709\u591a\u4e2aSSH\u5bc6\u94a5\u800c\u4e0d\u77e5\u9053\u54ea\u4e2a\u662f\u54ea\u4e2a\u4e86 Fail2Ban\u5bf9\u4e8e\u5bc6\u94a5\u767b\u9646\u5931\u8d25\u9ed8\u8ba4\u662f\u6ca1\u6709\u52a8\u4f5c\u7684\uff0c\u4f60\u4e5f\u53ef\u4ee5\u81ea\u884c\u4fee\u6539\u8bbe\u7f6e \u5173\u4e8e\u5b9d\u5854\u9762\u677f \u00b6 \u7531\u4e8e\u4e4b\u524d\u51fa\u8fc7\u4e8b\uff0c\u8fd8\u662f\u4e0d\u7528\u7b97\u4e86 \u7136\u800c\u5077\u61d2\u4e86\uff0c\u8fd8\u662f\u7528\u4e86aapanel","title":"\u5e74\u8f7b\u4eba\u7684\u7b2c\u4e00\u6b21\u5efa\u7ad9"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA/Web%20%E5%BC%80%E5%8F%91/%E5%BB%BA%E7%AB%99/#_1","text":"\u6240\u4ee5\u4e00\u4e9b\u96f6\u788e\u7684\u4e1c\u897f\u4f1a\u8bb0\u5f55\u5728\u8fd9\u91cc\uff0c\u6240\u6709\u5185\u5bb9\u53c2\u8003\u81ea\u7f51\u7edc\uff0c\u4ec5\u7559\u4f5c\u4e2a\u4eba\u7b14\u8bb0\uff0c\u5982\u679c\u6267\u610f\u7ffb\u9605\uff0c\u8bf7\u81ea\u884c\u5224\u65ad\u5185\u5bb9\u53ef\u9760\u6027","title":"\u5e74\u8f7b\u4eba\u7684\u7b2c\u4e00\u6b21\u5efa\u7ad9"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA/Web%20%E5%BC%80%E5%8F%91/%E5%BB%BA%E7%AB%99/#_2","text":"\u5982\u679c\u670d\u52a1\u5546\u4e0d\u9760\u8c31\uff0c\u7528\u6237\uff08\u4f60\u81ea\u5df1\uff09\u5c06\u9762\u4e34\u4ece\u6570\u636e\u4e22\u5931\u5230\u5377\u94b1\u8dd1\u8def\u4e0d\u7b49\u7684\u98ce\u9669\u3002 \u7531\u4e8e\u4e4b\u524d\u5076\u7136\u4ece\u5fae\u535a \u52a8\u6f2b\u535a\u4e3b\uff08\u00bf\uff09 \u90a3\u91cc\u770b\u5230\u8fc7\uff0c\u5c31\u6574\u4e86\u4e2a\u52a0\u62ff\u5927\u7684\u670d\u52a1\u5546\uff08\u5e0c\u671b\u522b\u8dd1\u8def\uff09 \u56fd\u5185\u7684\u817e\u8baf\u4e91\uff0c\u963f\u91cc\u4e91\uff0c\u56fd\u5916\u7684\u50cf vultr\uff0cdigiocean \u90a3\u79cd\u5e94\u8be5\u6bd4\u8f83\u9760\u8c31\uff0c\u81f3\u5c11\u4e0d\u81f3\u4e8e\u8dd1\u8def\uff0c\u9009\u62e9\u4e00\u4e9b\u4e0d\u592a\u77e5\u540d\u7684\u5e94\u8be5\u591a Google \u4e00\u4e0b\u5b83\u4eec\u7684\u98ce\u8bc4\uff08\u4f46\u662f\u4e0d\u8981\u76f8\u4fe1\u8f6f\u6587\uff09 \u56fd\u5185VPS\u5efa\u7ad9\u65f6\u9700\u8981**\u5907\u6848**\u7684\uff0c\u672c\u6765\u6211\u4e5f\u662f\u60f3\u79df\u4e2a\u4fbf\u5b9c\u5b66\u751f\u673a\uff08\u6bd5\u7adf\u4ef7\u683c\u4f4e\u7684\u79bb\u8c31\uff09\uff0c\u5907\u6848\u4e5f\u4e0d\u662f\u4e0d\u884c\uff0c \u4f46\u4e4b\u524d\u770b\u5230\u6709\u524d\u7aef\u5927\u4f6c\u79df\u67d0\u9e45\u5382\u7684 VPS\uff0c\u4e5f\u5907\u6848\u4e86\uff0c\u7ed3\u679c\u9e45\u5382\u6253\u7535\u8bdd\u8fc7\u6765\u8bf4 blog \u4e0d\u80fd\u8f6c\u8f7d\u4efb\u4f55\u65b0\u95fb\uff0c\u4e5f\u4e0d\u80fd\u8bbe\u7f6e\u8bc4\u8bba\u7cfb\u7edf\uff08\uff1f\uff1f\uff1f\uff09 \u6240\u4ee5\uff0c\u6478\u4e86","title":"\u4e00.\u6311\u9009\u4e91\u4e3b\u673a\u670d\u52a1\u5546"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA/Web%20%E5%BC%80%E5%8F%91/%E5%BB%BA%E7%AB%99/#_3","text":"\u53c2\u8003 \u56fd\u5185\u4e3b\u6d41\u7f51\u7edc\u8fd0\u8425\u5546\u56fd\u9645\u8fde\u63a5\u7ebf\u8def\u7b80\u8c08--\u77e5\u4e4e\u4e13\u680f \u4fdd\u8bc1\u56fd\u5185\u7684\u8bbf\u95ee\u8d28\u91cf\uff0c\u6700\u597d\u8fd8\u662f\u6ce8\u610f\u4e00\u4e0b VPS \u7684**\u7ebf\u8def**\uff0c \u4f46\u662f\u6211\u7b2c\u4e00\u6b21\u8d2d\u4e70\u6ca1\u6709\u7ecf\u9a8c\u641e\u5fd8\u4e86\u3002","title":"\u7ebf\u8def"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA/Web%20%E5%BC%80%E5%8F%91/%E5%BB%BA%E7%AB%99/#_4","text":"\u9009\u62e9\u5408\u9002\u7684\u5957\u9910\uff0c\u586b\u5199\u5fc5\u8981\u7684\u4fe1\u606f\u5e76\u4ed8\u6b3e\u5373\u53ef \u5982\u679c\u670d\u52a1\u5546\u5df2\u7ecf\u63d0\u4f9b\u4e86\u652f\u4ed8\u5b9d\u652f\u6301\uff0c\u90a3\u5c31\u65b9\u4fbf\u4e86\uff0c\u6709\u4e9b\u670d\u52a1\u5546\u5219\u9700\u8981\u4f60\u6709 paypal \u6216\u8005\u4fe1\u7528\u5361 \u6b64\u5916\uff0c\u90e8\u5206\u670d\u52a1\u5546\u4e3a\u4e86\u9632\u6b62\u6076\u610f\u6ce8\u518c\uff0c\u53ef\u80fd\u4f1a\u8981\u6c42\u7981\u6b62\u4f7f\u7528\u7f51\u7edc\u4ee3\u7406\uff0c\u5e76\u4e14\u5fc5\u987b\u586b\u5199\u771f\u5b9e\u7684\u533a\u57df\uff08\u5176\u4ed6\u4fe1\u606f\u5012\u662f\u53ef\u80fd\u65e0\u8db3\u8f7b\u91cd\uff09\u3002","title":"\u8d2d\u4e70\u4e0e\u6ce8\u518c"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA/Web%20%E5%BC%80%E5%8F%91/%E5%BB%BA%E7%AB%99/#_5","text":"VPS \u4ed8\u6b3e\u540e\u53ef\u80fd\u9700\u8981\u4e00\u6bb5\u65f6\u95f4\u521d\u59cb\u5316\u624d\u53ef\u7528\uff0c\u4f46\u6211\u7b49\u4e86\u4e00\u4e2a\u5c0f\u65f6\u8fd8\u662f pending\uff08\u51c6\u5907\u4e2d\uff09\uff0c\u76f4\u63a5\u4e0e\u5ba2\u670d\u8054\u7cfb\u5f97\u77e5\u662f\u8054\u7cfb\u5730\u5740\u4e0d\u591f\u8be6\u7ec6\uff0c\u8865\u5168\u540e\u5c31\u51c6\u5907\u597d\u4e86 \u6211\u9009\u62e9\u7684\u9ed8\u8ba4\u7cfb\u7edf\u662f Debian 11\uff0cVPS \u63d0\u4f9b\u4e86\u9ed8\u8ba4\u7684 root\u5bc6\u7801 (\u867d\u7136\u9ed8\u8ba4\u7684\u5bc6\u7801\u4e5f\u662f\u5f3a\u5bc6\u7801\uff0c\u4f46\u5b89\u5168\u8d77\u89c1\u8fd8\u662f\u81ea\u5df1\u6539\u4e00\u4e0b\uff0c\u800c\u4e14\u8981\u5f3a\u5bc6\u7801\uff0c\u5341\u51e0\u4f4d\u5927\u5c0f\u5199\u52a0\u6570\u5b57\u7279\u6b8a\u7b26\u53f7\u7684\u90a3\u79cd\uff01\uff01\uff01) \u4e4b\u540e\u7528 SSH \u8fde\u63a5\u5c31\u597d\u4e86 \u6dfb\u52a0\u65b0\u7684\u7528\u6237\uff0c\u5e76\u5c06\u7528\u6237\u6dfb\u52a0\u5230 sudo \u7ec4\uff0c\u4ee5\u540e\u5c31\u7528\u8fd9\u4e2a\u7528\u6237\u767b\u5f55\u4e86\uff08\u514d\u5f97 rm -rf / \uff09","title":"\u7b80\u5355\u7684\u914d\u7f6e"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA/Web%20%E5%BC%80%E5%8F%91/%E5%BB%BA%E7%AB%99/#_6","text":"\u7531\u4e8e\u8d2d\u4e70\u7684\u662f\u4e91\u670d\u52a1\u5668\uff0c\u6d4b\u901f\u662f\u7406\u6240\u5f53\u7136\u7684\uff0c\u8c01\u4e5f\u4e0d\u5e0c\u671b\u81ea\u5df1\u7684\u670d\u52a1\u5668\u4e0a\u7f51\u5361\u6210doge\uff0c\u901a\u5e38\uff0c VPS \u670d\u52a1\u5546\u4f1a\u63d0\u4f9b \u6d4b\u8bd5IP\u548c\u6d4b\u901f\u6587\u4ef6\uff0c\u5728\u8d2d\u4e70\u4e4b\u524d\u5c31\u53ef\u4ee5\u6d4b\u4e00\u4e0b \uff0c\u7136\u800c\u6211\u5fd8\u4e86\u3002 \u6709\u5927\u91cf\u7684\u6d4b\u901f\u811a\u672c\u53ef\u4ee5\u4f7f\u7528 \u50cf\u662f bench.sh \u6216\u8005 UnixBench.sh \u4e4b\u7c7b\u7684\uff0c\u8fd9\u4e9b\u5de5\u5177\u901a\u8fc7 wget \u6216 crul \u547d\u4ee4\u4e0b\u8f7d\u540e\u8fd0\u884c\u5c31\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u4f7f\u7528 \u5bf9\u4e8eVPS\u7684\u7ebf\u8def\u4e5f\u53ef\u4ee5\u8fdb\u884c\u6d4b\u8bd5","title":"\u7f51\u7edc\u4e0e\u6d4b\u901f"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA/Web%20%E5%BC%80%E5%8F%91/%E5%BB%BA%E7%AB%99/#vps","text":"$ sudo apt install virt-what $ virt-what hyperv xen xen-domU \u672c\u6765\u770b\u5230\u6709 \u4f7f\u7528 Hyper-V \u865a\u62df\u5316\u6280\u672f\u7684 VPS \u4e0d\u9002\u5408\u88c5 Linux \u7684\u8bf4\u6cd5 \u540e\u6765\u4e00\u60f3\uff1a\u4e0d\u5bf9\uff0cWSL2 \u4e0d\u662f\u57fa\u4e8e Hyper-V \u5417\uff1f \u53c8\u4e0d\u662f\u4e0d\u80fd\u7528.jpg","title":"\u67e5\u770b VPS \u6240\u4f7f\u7528\u7684\u865a\u62df\u5316\u6280\u672f"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA/Web%20%E5%BC%80%E5%8F%91/%E5%BB%BA%E7%AB%99/#ssh-fail2ban","text":"\u53c2\u8003 https://www.zatp.com/post/modify-ssh-port/ $ sudo vim /etc/ssh/sshd_config \u5728 #Port 22 \u4e0b\u9762\u6dfb\u52a0\u4f60\u60f3\u8bbe\u7f6e\u7684\u7aef\u53e3\uff0c\u5c31\u50cf\u8fd9\u6837 #Port 22 Port [\u7aef\u53e3\u53f7] \u7aef\u53e3\u53f7\u7684\u8303\u56f4\u5c3d\u53ef\u80fd\u5927\u4e00\u70b9\uff0c\u4f46\u8981\u968f\u673a","title":"\u4fee\u6539\u9ed8\u8ba4 SSH \u7aef\u53e3\u5e76\u914d\u7f6e Fail2Ban \u9632\u6b62\u66b4\u529b\u7834\u89e3"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA/Web%20%E5%BC%80%E5%8F%91/%E5%BB%BA%E7%AB%99/#fail2ban","text":"\u53c2\u8003 Debian \u4e0b Nginx \u914d\u5408 Fail2Ban \u51cf\u5c11\u6076\u610f\u626b\u63cf\u548c\u653b\u51fb \u5982\u679c\u60f3\u8981\u4e86\u89e3\u66f4\u591a\u76f8\u5173\u670d\u52a1\u5668\u5b89\u5168\u77e5\u8bc6\uff0ccloudflare\u63d0\u4f9b\u4e86 \u8be6\u5c3d\u7684\u6587\u6863 \u66b4\u9732\u5728\u516c\u7f51\u7684 SSH \u53ef\u80fd\u88ab\u7a77\u4e3e\u7834\u89e3\uff0cFail2Ban \u4f1a\"\u7981\u6b62\u5bfc\u81f4\u591a\u6b21\u8ba4\u8bc1\u9519\u8bef\u7684\u4e3b\u673a(ban hosts that cause multiple authentication errors)\" \u4ece\u800c\u7f13\u89e3\u8fd9\u6837\u7684\u653b\u51fb\u3002\u4e0b\u9762\u662f\u5b98\u65b9\u7684\u7b80\u4ecb Fail2Ban \u626b\u63cf\u65e5\u5fd7\u6587\u4ef6\uff0c\u5e76\u7981\u6b62 IP \u5730\u5740\u8fdb\u884c\u8fc7\u591a\u7684\u5931\u8d25\u767b\u5f55\u5c1d\u8bd5\u3002\u5b83\u901a\u8fc7\u66f4\u65b0\u7cfb\u7edf\u7684\u9632\u706b\u5899\u89c4\u5219\uff0c\u62d2\u7edd\u6765\u81ea\u8fd9\u4e9bIP\u5730\u5740\u7684\u65b0\u8fde\u63a5\uff0c\u5e76\u5728\u53ef\u914d\u7f6e\u7684\u65f6\u95f4\u5185\u5b8c\u6210\u8fd9\u4e00\u64cd\u4f5c\u3002Fail2Ban\u5f00\u7bb1\u5373\u7528\uff0c\u53ef\u4ee5\u8bfb\u53d6\u8bb8\u591a\u6807\u51c6\u7684\u65e5\u5fd7\u6587\u4ef6\uff0c\u5982sshd\u548cApache\u7684\u65e5\u5fd7\u6587\u4ef6\uff0c\u4e5f\u53ef\u4ee5\u8f7b\u677e\u914d\u7f6e\u4e3a\u8bfb\u53d6\u60a8\u9009\u62e9\u7684\u4efb\u4f55\u65e5\u5fd7\u6587\u4ef6\uff0c\u4ee5\u5904\u7406\u60a8\u5e0c\u671b\u7684\u4efb\u4f55\u9519\u8bef\u3002 /var/log/auth.log \u5c3d\u7ba1 Fail2Ban \u80fd\u591f\u964d\u4f4e\u9519\u8bef\u7684\u8ba4\u8bc1\u5c1d\u8bd5\u7387\uff0c\u4f46\u5b83\u4e0d\u80fd\u6d88\u9664\u5f31\u8ba4\u8bc1\u5e26\u6765\u7684\u98ce\u9669\u3002\u5982\u679c\u4f60\u771f\u7684\u60f3\u4fdd\u62a4\u670d\u52a1\uff0c\u8bf7\u5c06\u670d\u52a1\u8bbe\u7f6e\u4e3a\u4ec5\u4f7f\u7528\u53cc\u56e0\u7d20\u8ba4\u8bc1\uff0c\u6216\u516c\u94a5/\u79c1\u94a5\u8ba4\u8bc1\u673a\u5236\u3002 ----\u901a\u8fc7DeepL\u7ffb\u8bd1","title":"\u4f7f\u7528 Fail2Ban \u963b\u6b62\u574f\u4e1c\u897f"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA/Web%20%E5%BC%80%E5%8F%91/%E5%BB%BA%E7%AB%99/#debian","text":"$ sudo apt install -y fail2ban $ sudo aptitude install nftables $ sudo systemctl enable nftables.service","title":"\u5b89\u88c5 (\u4ee5 debian \u4e3a\u4f8b):"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA/Web%20%E5%BC%80%E5%8F%91/%E5%BB%BA%E7%AB%99/#jail","text":"\u53c2\u8003 ArchWiki sudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local .conf \u662f Fail2Ban \u7684\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\u3002\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\u65f6\uff0cFail2Ban \u4f1a\u4f18\u5148\u8bfb\u53d6 .local \u6587\u4ef6 \u4e0d\u8981\u76f4\u63a5\u4fee\u6539.conf\u6587\u4ef6\uff0c\u8fd9\u6837\u4e00\u66f4\u65b0\u5c31\u65e0\u4e86 \u5728\u5bf9\u5e94\u7684\u89c4\u5219\u4e0b\u6dfb\u52a0 enabled = true \u6ce8\u610f\uff1a\u7531\u4e8e\u4e4b\u524d\u4fee\u6539\u4e86 ssh \u7aef\u53e3\u53f7\uff0c\u914d\u7f6e\u6587\u4ef6\u91cc\u9762\u7684 port = ssh \u5b9e\u9645\u4e0a\u8fd8\u662f port = 22 (\u914d\u7f6e\u6587\u4ef6\u91cc ssh \u7684\u610f\u601d\u662f SSH \u7684\u5468\u77e5\u7aef\u53e3\u53f7 )\uff0c\u9700\u8981\u81ea\u884c\u4fee\u6539\u4e3a 0:65535 \uff08\u5373ban\u6389\u7684\u6240\u6709\u7684\u7aef\u53e3\uff09 \u5728\u6b64\u611f\u8c22 debiancn \u7fa4\u7ec4\uff0c\u4ee5\u53ca\u4e0d\u4f1a\u50cf\u67d0 IM \u8f6f\u4ef6\u90a3\u6837\u4e22\u804a\u5929\u8bb0\u5f55\u7684 telegram \u4e4b\u540e $ sudo fail2ban-client status \u5e94\u5f53\u80fd\u770b\u5230\u5bf9\u5e94\u7684\u89c4\u5219\u542f\u7528 -> % sudo fail2ban-client status Status |- Number of jail: 1 `- Jail list: sshd \u5982\u679c\u8981\u67e5\u770b\u7279\u5b9a\u89c4\u5219\u7684\u5c01\u7981\u72b6\u6001\uff0c\u4ee5\u53ca\u8fd9\u6761\u89c4\u5219 ban \u6389\u7684 IP Status for the jail: sshd |- Filter | |- Currently failed: 0 | |- Total failed: 5 | `- File list: /var/log/auth.log `- Actions |- Currently banned: 0 |- Total banned: 2 `- Banned IP list:","title":"\u914d\u7f6e jail(\u5750\u7262?) \u89c4\u5219\uff1a"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA/Web%20%E5%BC%80%E5%8F%91/%E5%BB%BA%E7%AB%99/#fail2ban_1","text":"\u80af\u5b9a\u5f97\u8bd5\u8bd5\uff0c\u4e07\u4e00\u6839\u672c\u4e0d\u7075\u5c82\u4e0d\u662f\u5f88\u5c34\u5c2c \u4f46\u662f\u4e0d\u80fd\u7528\u81ea\u5df1\u672c\u673a\u8bd5\uff0c\u4e0d\u7136\u81ea\u5df1\u628a\u81ea\u5df1ban\u4e86\u8fde\u4e0d\u4e0a\u5c31\u5bc4\u4e86 \u7f51\u4e0a\u7684\u529e\u6cd5\u662f\u7528\u53e6\u4e00\u53f0VPS\u8bd5\uff0c\u4f46\u6211\u53ea\u6709\u4e00\u53f0\uff0c\u4e8e\u662f\u60f3\u5230\u7528\u5728\u624b\u673a\u4f7f\u7528\u6d41\u91cf\u7684\u60c5\u51b5\u4e0b\uff0c\u901a\u8fc7 Termux \u7684 SSH \u5c1d\u8bd5 \u7ed3\u679c\u8bd5\u8bd5\u5c31\u901d\u901d\uff0c\u5c3d\u7ba1\u770b\u7740\u81ea\u5df1\u624b\u673a\u7684IP\u8fdb\u4e86Jail\u9ed1\u540d\u5355\uff0c\u4f46\u662fSSH\u4f9d\u7136\u53ef\u4ee5\u7ee7\u7eed\u5c1d\u8bd5\uff0c\u751a\u81f3\u8f93\u5bf9\u5bc6\u7801\u53ef\u4ee5\u6b63\u5e38\u8fde\u63a5 \u8fd9\u5176\u5b9e\u662f\u914d\u7f6e\u6587\u4ef6\u9ed8\u8ba4 ssh = 22 \u7684\u9505","title":"\u6d4b\u8bd5 Fail2Ban \u662f\u5426\u6709\u6548"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA/Web%20%E5%BC%80%E5%8F%91/%E5%BB%BA%E7%AB%99/#ssh","text":"\u53c2\u8003 ArchWiki \u53ca SSH Mastery:OpenSSH, Putty, Tunnels and Keys \u5c06 SSH \u914d\u7f6e\u4e3a\u4ec5\u5141\u8bb8\u901a\u8fc7\u5bc6\u94a5\u767b\u5f55\u53ef\u4ee5\u66f4\u597d\u7684\u4fdd\u8bc1\u5b89\u5168","title":"\u4f7f\u7528\u5bc6\u94a5\u767b\u5f55 SSH"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA/Web%20%E5%BC%80%E5%8F%91/%E5%BB%BA%E7%AB%99/#ssh_1","text":"$ ssh-keygen -t ed25519 -f ssh_host_ed25519_key -N '' -t --------\u6307\u5b9a\u5bc6\u94a5\u7c7b\u578b\uff0ced25519\u7684\u5b89\u5168\u6027\u4ecb\u4e8eRSA2048\u548cRSA4096\u4e4b\u95f4\uff08\u76f8\u5f53\u4e8eRSA3072\uff09\uff0c\u4f46\u6027\u80fd\u66f4\u9ad8\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\u5bc6\u94a5\u7c7b\u578b\uff0cSSH\u9ed8\u8ba4\u4f7f\u75283072\u4f4d\u7684RSA\u5bc6\u94a5 -f --------\u5236\u5b9a\u79c1\u94a5\u7684\u6587\u4ef6\u540d -N --------\u6307\u5b9a\u53e3\u4ee4","title":"\u5728\u672c\u673a\u751f\u6210 SSH \u5bc6\u94a5"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA/Web%20%E5%BC%80%E5%8F%91/%E5%BB%BA%E7%AB%99/#github","text":"$ ssh-keygen -t ed25519 -C \"your_email@example.com\" -C --------\u6dfb\u52a0\u6ce8\u91ca\uff0c\u6ce8\u91ca\u5f53\u7136\u662f\u53ef\u9009\u7684\uff0c\u4e3a\u7684\u662f\u907f\u514d\u4f60\u6709\u591a\u4e2aSSH\u5bc6\u94a5\u800c\u4e0d\u77e5\u9053\u54ea\u4e2a\u662f\u54ea\u4e2a\u4e86 Fail2Ban\u5bf9\u4e8e\u5bc6\u94a5\u767b\u9646\u5931\u8d25\u9ed8\u8ba4\u662f\u6ca1\u6709\u52a8\u4f5c\u7684\uff0c\u4f60\u4e5f\u53ef\u4ee5\u81ea\u884c\u4fee\u6539\u8bbe\u7f6e","title":"\u5bf9\u6bd4\u4e00\u4e0b GitHub \u5b98\u65b9\u6587\u6863"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA/Web%20%E5%BC%80%E5%8F%91/%E5%BB%BA%E7%AB%99/#_7","text":"\u7531\u4e8e\u4e4b\u524d\u51fa\u8fc7\u4e8b\uff0c\u8fd8\u662f\u4e0d\u7528\u7b97\u4e86 \u7136\u800c\u5077\u61d2\u4e86\uff0c\u8fd8\u662f\u7528\u4e86aapanel","title":"\u5173\u4e8e\u5b9d\u5854\u9762\u677f"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/","text":"","title":"Linux"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA/%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/","text":"C \u00b6 \u6765\u6e90 Learn X in Y minutes // \u5355\u884c\u6ce8\u91ca\u4ee5 // \u5f00\u59cb\uff0c\u4ec5\u9002\u7528\u4e8eC99\u53ca\u4ee5\u540e\u3002 /* \u591a\u884c\u6ce8\u91ca\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff0c\u5bf9\u4e8e C89 \u4e5f\u9002\u7528 */ /* \u591a\u884c\u6ce8\u91ca\u4e0d\u80fd\u88ab\u5d4c\u5957 /* \u52a1\u5fc5\u5c0f\u5fc3 */ // \u8fd9\u6761\u6ce8\u91ca\u5728\u8fd9\u4e00\u884c\u5c31\u7ec8\u6b62\u4e86 */ // \u800c\u4e0d\u662f\u8fd9\u4e00\u884c\uff01 // \u5e38\u91cf\uff1a #define <\u5173\u952e\u5b57> // \u5e38\u91cf\u5b8c\u5168\u5199\u6210\u5927\u5199\u5b57\u6bcd\u662f\u60ef\u4f8b\uff0c\u4e0d\u662f\u5fc5\u987b\u7684\u8981\u6c42 #define DAYS_IN_YEAR 365 // \u679a\u4e3e\u5e38\u91cf\u4e5f\u662f\u58f0\u660e\u5e38\u91cf\u7684\u65b9\u6cd5\u3002 // \u6240\u6709\u7684\u8bed\u53e5\u5fc5\u987b\u4ee5\u5206\u53f7\u7ed3\u675f\u3002 enum days {SUN, MON, TUE, WED, THU, FRI, SAT}; // SUN \u88ab\u8d4b\u503c\u4e3a 0, MON \u88ab\u8d4b\u503c\u4e3a 1, TUE \u88ab\u8d4b\u503c\u4e3a 2, \u4ee5\u6b64\u7c7b\u63a8. // \u679a\u4e3e\u7684\u503c\u662f\u53ef\u4ee5\u88ab\u6307\u5b9a\u7684 enum days {SUN = 1, MON, TUE, WED = 99, THU, FRI, SAT}; // MON \u88ab\u81ea\u52a8\u8d4b\u503c\u4e3a 2, TUE \u88ab\u8d4b\u503c\u4e3a 3, \u4ee5\u6b64\u7c7b\u63a8. // WED \u88ab\u8d4b\u503c\u4e3a 99, THU \u88ab\u8d4b\u503c\u4e3a 100, FRI \u88ab\u8d4b\u503c\u4e3a 101, \u4ee5\u6b64\u7c7b\u63a8. // \u4f7f\u7528 #include \u5bfc\u5165\u5934\u6587\u4ef6 #include <stdlib.h> #include <stdio.h> #include <string.h> // \u5728<\u5c16\u62ec\u53f7>\u4e4b\u95f4\u7684\u6587\u4ef6\u540d\u544a\u8bc9\u7f16\u8bd1\u5668\u8981\u5728\u4f60\u7684\u7cfb\u7edf\u4e2d\u5bfb\u627e // \u5e93\u6216\u8005\u5934\u6587\u4ef6 // \u5bf9\u4e8e\u4f60\u81ea\u5df1\u7684\u5934\u6587\u4ef6\uff0c\u5e94\u8be5\u4f7f\u7528\u53cc\u5f15\u53f7\u800c\u4e0d\u662f\u5c16\u62ec\u53f7\uff0c\u4e14 // \u5e94\u8be5\u63d0\u4f9b\u8def\u5f84 #include \"my_header.h\" // \u672c\u5730\u6587\u4ef6 #include \"../my_lib/my_lib_header.h\" //\u76f8\u5bf9\u8def\u5f84 // \u5728 .h \u6587\u4ef6\u4e2d\u63d0\u524d\u58f0\u660e\u51fd\u6570\u7b7e\u540di\u6216\u8005 // \u5728\u4f60 .c \u6587\u4ef6\u7684\u4e0a\u65b9 void function_1(); int function_2(void); // \u81f3\u5c11\uff0c\u4f60\u5fc5\u987b\u5728\u4efb\u4f55\u51fd\u6570\u4e2d\u4f7f\u7528 \"\u51fd\u6570\u539f\u578b \"\u4e4b\u524d\u58f0\u660e\u5b83\u3002 // \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u539f\u578b\u88ab\u653e\u7f6e\u5728\u6587\u4ef6\u7684\u9876\u90e8\uff0c\u5728\u4efb\u4f55\u51fd\u6570\u5b9a\u4e49\u4e4b\u524d\u3002 int add_two_ints(int x1, int x2); // function prototype // \u5c3d\u7ba1`int add_two_ints(int, int);`\u4e5f\u662f\u6709\u6548\u7684\uff08\u4e0d\u9700\u8981\u7ed9\u53c2\u6570\u547d\u540d\uff09\u3002 // \u5efa\u8bae\u5728\u539f\u578b\u4e2d\u4e5f\u4e3a\u53c2\u6570\u547d\u540d\uff0c\u4ece\u800c\u65b9\u4fbf\u68c0\u67e5\u3002 // \u5982\u679c\u51fd\u6570\u5b9a\u4e49\u5728\u8c03\u7528\u8be5\u51fd\u6570\u7684\u4efb\u4f55\u5176\u4ed6\u51fd\u6570\u4e4b\u524d // \u90a3\u4e48\u51fd\u6570\u539f\u578b\u5c31\u4e0d\u662f\u5fc5\u987b\u7684\u3002\u7136\u800c\uff0c\u6807\u51c6\u7684\u505a\u6cd5\u662f // \u59cb\u7ec8\u5c06\u51fd\u6570\u539f\u578b\u6dfb\u52a0\u5230\u5934\u6587\u4ef6(*.h)\u4e2d\uff0c\u7136\u540e\u5728\u5934\u6587\u4ef6\u4e2d#include\u8be5\u6587\u4ef6\u3002 // \u8fd9\u53ef\u4ee5\u9632\u6b62\u5728\u7f16\u8bd1\u5668\u77e5\u9053\u4e00\u4e2a\u51fd\u6570\u7684\u540d\u5b57\u4e4b\u524d\uff0c\u8be5\u51fd\u6570\u5c31\u88ab\u8c03\u7528\u7684\u95ee\u9898\u3002 // \u9664\u6b64\u4e4b\u5916\uff0c\u5b83\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5e72\u51c0\u7684\u5934\u6587\u4ef6 // \u4ece\u800c\u53ef\u4ee5\u548c\u9879\u76ee\u7684\u5176\u4ed6\u90e8\u5206\u5171\u4eab // \u4f60\u7684\u7a0b\u5e8f\u7684\u5165\u53e3\u662f\u4e00\u4e2a main \u51fd\u6570\uff0c\u5b83\u7684\u8fd4\u56de\u7c7b\u578b\u53ef\u4ee5\u4e3a\u4efb\u610f\u7c7b\u578b // \u7136\u800c\uff0c\u591a\u6570\u64cd\u4f5c\u7cfb\u7edf\u5e0c\u671b\u5b83\u7684\u8fd4\u56de\u503c\u4e3a int \u7c7b\u578b\uff0c\u4ece\u800c // \u7528\u4e8e\u5904\u7406\u9519\u8bef\u4ee3\u7801 int main(void) { // your program } // \u7528\u4e8e\u8fd0\u884c\u4f60\u7684\u7a0b\u5e8f\u7684\u547d\u4ee4\u884c\u53c2\u6570\u4e5f\u88ab\u4f20\u9012\u7ed9 main // argc\u662f\u53c2\u6570\u7684\u6570\u91cf--\u4f60\u7684\u7a0b\u5e8f\u540d\u79f0\u7b97\u4f5c 1 // argv\u662f\u4e00\u4e2a\u5b57\u7b26\u6570\u7ec4--\u5305\u542b\u53c2\u6570\u672c\u8eab // argv[0] = \u4f60\u7684\u7a0b\u5e8f\u540d\u79f0\uff0cargv[1] = \u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u4ee5\u6b64\u7c7b\u63a8 int main (int argc, char** argv) { // \u6253\u5370\u8f93\u51fa\u4f7f\u7528 printf \u610f\u601d\u662f\"\u683c\u5f0f\u5316\u6253\u5370\" // %d \u4ee3\u8868\u6574\u6570, \\n \u4ee3\u8868\u6362\u884c printf(\"%d\\n\", 0); // => \u6253\u5370 0 /////////////////////////////////////// // \u7c7b\u578b /////////////////////////////////////// // \u4e0d\u7b26\u5408 C99 \u6807\u51c6\u7684\u7f16\u8bd1\u5668\u8981\u6c42\u53d8\u91cf\u5fc5\u987b\u5728\u5f53\u524d\u5757\u8303\u56f4\u7684\u9876\u90e8\u58f0\u660e // \u7b26\u5408 C99 \u6807\u51c6\u7684\u7f16\u8bd1\u5668\u5141\u8bb8\u5728\u4f7f\u7528\u6570\u503c\u7684\u5730\u65b9\u8fdb\u884c\u58f0\u660e // \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u53d8\u91cf\u5728\u7b26\u5408 C99 \u6807\u51c6\u7684\u60c5\u51b5\u4e0b\u662f\u52a8\u6001\u58f0\u660e\u7684\u3002 // int\u578b\uff08\u6574\u578b\uff09\u53d8\u91cf\u4e00\u822c\u5360\u7528 4 \u4e2a\u5b57\u8282 (\u4f7f\u7528`sizeof`\u8fd0\u7b97\u7b26\u53ef\u4ee5\u68c0\u67e5) int x_int = 0; // short\u578b\uff08\u77ed\u6574\u578b\uff09\u53d8\u91cf\u4e00\u822c\u5360\u7528 2 \u4e2a\u5b57\u8282 (\u4f7f\u7528`sizeof`\u8fd0\u7b97\u7b26\u53ef\u4ee5\u68c0\u67e5) short x_short = 0; // \u5b57\u7b26\u7c7b\u578b\u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u5904\u7406\u5668\u7684\u6700\u5c0f\u53ef\u5bfb\u5740\u5355\u4f4d\u3002 // \u901a\u5e38\u662f 1 \u4e2a\u5b57\u8282, \u4f46\u5728\u67d0\u4e9b\u7cfb\u7edf\u4e2d\u5b83\u53ef\u4ee5\u66f4\u591a (\u4f8b\u5982\uff0c\u5728\u5fb7\u5dde\u4eea\u5668\u7684 TMS320 \u4e2d\u5b83\u662f 2 \u4e2a\u5b57\u8282). char x_char = 0; char y_char = 'y'; // \u5b57\u7b26\u53d8\u91cf\u7684\u5b57\u9762\u503c\u9700\u8981\u7528\u5355\u5f15\u53f7\u5305\u4f4f // long\u578b\uff08\u957f\u6574\u578b\uff09\u4e00\u822c\u9700\u8981 4 \u4e2a\u5b57\u8282\u5230 8 \u4e2a\u5b57\u8282; \u800clong long\u578b\u5219\u81f3\u5c11\u9700\u8981\u4fdd\u8bc1\u6709 8 \u4e2a\u5b57\u8282\uff0864 \u4f4d\uff09 long x_long = 0; long long x_long_long = 0; // float\u4e00\u822c\u662f\u7528 32 \u4f4d\u8868\u793a\u7684\u6d6e\u70b9\u6570\u5b57 float x_float = 0.0f; // 'f' suffix here denotes floating point literal // double\u4e00\u822c\u662f\u7528 64 \u4f4d\u8868\u793a\u7684\u6d6e\u70b9\u6570\u5b57 double x_double = 0.0; // real numbers without any suffix are doubles // \u6574\u6570\u7c7b\u578b\u4e5f\u53ef\u4ee5\u6709\u65e0\u7b26\u53f7\u7684\u7c7b\u578b\u8868\u793a\u3002\u8fd9\u6837\u8fd9\u4e9b\u53d8\u91cf\u5c31\u65e0\u6cd5\u8868\u793a\u8d1f\u6570 // \u4f46\u662f\u65e0\u7b26\u53f7\u6574\u6570\u6240\u80fd\u8868\u793a\u7684\u8303\u56f4\u5c31\u53ef\u4ee5\u6bd4\u539f\u6765\u7684\u6574\u6570\u5927\u4e00\u4e9b unsigned short ux_short; unsigned int ux_int; unsigned long long ux_long_long; // \u5355\u5f15\u53f7\u5185\u7684\u5b57\u7b26\u662f\u673a\u5668\u7684\u5b57\u7b26\u96c6\u4e2d\u7684\u6574\u6570\u3002 '0' // => \u5728 ASCII \u5b57\u7b26\u96c6\u4e2d\u662f 48 'A' // => \u5728 ASCII \u5b57\u7b26\u96c6\u4e2d\u662f 65 // sizeof(T) \u7ed9\u51fa\u4e86\u7c7b\u578b\u4e3aT\u7684\u53d8\u91cf\u7684\u5927\u5c0f\uff0c\u5355\u4f4d\u4e3a\u5b57\u8282\u3002 // sizeof(obj) \u4ea7\u751f\u8868\u8fbe\u5f0f\uff08\u53d8\u91cf\u3001\u5b57\u9762\u610f\u4e49\u7b49\uff09\u7684\u5927\u5c0f\u3002 printf(\"%zu\\n\", sizeof(int)); // => 4 (\u5728\u591a\u6570 4 \u5b57\u8282\u5b57\u957f\u7684\u673a\u5668\u4e0a) // \u5982\u679c`sizeof`\u7684\u53c2\u6570\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u90a3\u4e48\u8fd9\u4e2a\u53c2\u6570\u4e0d\u4f1a\u88ab\u6f14\u7b97\uff08VLA\u4f8b\u5916\uff0c\u89c1\u4e0b\uff09 // \u5b83\u4ea7\u751f\u7684\u503c\u662f\u7f16\u8bd1\u65f6\u7684\u5e38\u91cf int a = 1; // size_t\u662f\u4e00\u4e2a\u65e0\u7b26\u53f7\u6574\u578b\uff0c\u8868\u793a\u5bf9\u8c61\u7684\u5c3a\u5bf8\uff0c\u81f3\u5c11 2 \u4e2a\u5b57\u8282 size_t size = sizeof(a++); // a++ \u4e0d\u4f1a\u88ab\u6f14\u7b97 printf(\"sizeof(a++) = %zu where a = %d\\n\", size, a); // \u6253\u5370 \"sizeof(a++) = 4 where a = 1\" \uff08\u572832\u4f4d\u67b6\u6784\u4e0a\uff09 // \u6570\u7ec4\u5fc5\u987b\u88ab\u521d\u59cb\u5316\u4e3a\u5177\u4f53\u7684\u957f\u5ea6 char my_char_array[20]; // \u8fd9\u4e2a\u6570\u7ec4\u5360\u636e 1 * 20 = 20 \u5b57\u8282 int my_int_array[20]; // \u8fd9\u4e2a\u6570\u7ec4\u5360\u636e 4 * 20 = 80 \u5b57\u8282 // (\u5047\u8bbe\u4e3a 4 \u5b57\u8282\u5b57\u957f) // \u4f60\u53ef\u4ee5\u5c06\u4e00\u4e2a\u6570\u7ec4\u521d\u59cb\u5316\u4e3a\u96f6: char my_array[20] = {0}; // \u5176\u4e2d\"{0}\"\u90e8\u5206\u88ab\u79f0\u4e3a \"\u6570\u7ec4\u521d\u59cb\u5316\u5668\"\u3002 // \u6ce8\u610f\uff0c\u5982\u679c\u4f60\u5728\u540c\u4e00\u884c\u4e2d\u521d\u59cb\u5316\u6570\u7ec4 // \u4f60\u5c31\u53ef\u4ee5\u4e0d\u660e\u786e\u5730\u58f0\u660e\u6570\u7ec4\u7684\u5927\u5c0f\u3002 // \u6240\u4ee5\uff0c\u4e0b\u9762\u7684\u58f0\u660e\u4e5f\u662f\u5408\u6cd5\u7684\u3002 char my_array[] = {0}; // \u4f46\u662f\uff0c\u7136\u540e\u4f60\u5fc5\u987b\u5728\u8fd0\u884c\u65f6\u8bc4\u4f30\u6570\u7ec4\u7684\u5927\u5c0f\uff0c\u50cf\u8fd9\u6837: size_t my_array_size = sizeof(my_array) / sizeof(my_array[0]); // \u8b66\u544a \u5982\u679c\u4f60\u91c7\u7528\u8fd9\u79cd\u65b9\u6cd5\uff0c\u4f60\u5e94\u8be5\u5728\u5f00\u59cb\u5c06\u6570\u7ec4\u4f20\u7ed9\u51fd\u6570\u4e4b\u524d*\u8bc4\u4f30\u5176\u5927\u5c0f\u3002 //\u4f60\u5f00\u59cb\u5c06\u6570\u7ec4\u4f20\u9012\u7ed9\u51fd\u6570\uff08\u89c1\u540e\u9762\u7684\u8ba8\u8bba\uff09\uff0c\u56e0\u4e3a // \u5f53\u6570\u7ec4\u88ab\u4f20\u9012\u7ed9\u51fd\u6570\u65f6\uff0c\u5b83\u4eec\u4f1a\u88ab \"\u964d\u7ea7 \"\u4e3a\u539f\u59cb\u6307\u9488\u3002 // \u6240\u4ee5\u4e0a\u9762\u7684\u8bed\u53e5\u4f1a\u5728\u51fd\u6570\u4e2d\u4ea7\u751f\u9519\u8bef\u7684\u7ed3\u679c\uff09\u3002 // \u7d22\u5f15\u6570\u7ec4\u548c\u5176\u4ed6\u8bed\u8a00\u7c7b\u4f3c -- \u597d\u5427\uff0c\u5176\u5b9e\u662f\u5176\u4ed6\u7684\u8bed\u8a00\u50cfC my_array[0]; // => 0 // \u6570\u7ec4\u662f\u53ef\u53d8\u7684\uff0c\u5176\u5b9e\u5c31\u662f\u5185\u5b58\u7684\u6620\u5c04\uff01 my_array[1] = 2; printf(\"%d\\n\", my_array[1]); // => 2 // \u5728C99 \uff08C11\u4e2d\u662f\u53ef\u9009\u7279\u6027\uff09\uff0c\u53d8\u957f\u6570\u7ec4\uff08VLA\uff09\u4e5f\u53ef\u4ee5\u58f0\u660e\u957f\u5ea6\u3002 // \u5176\u957f\u5ea6\u4e0d\u9700\u8981\u662f\u7f16\u8bd1\u65f6\u5e38\u91cf\u3002 printf(\"Enter the array size: \"); // \u8be2\u95ee\u7528\u6237\u6570\u7ec4\u957f\u5ea6 int array_size; fscanf(stdin, \"%d\", &array_size); int var_length_array[array_size]; // \u58f0\u660e VLA printf(\"sizeof array = %zu\\n\", sizeof var_length_array); // \u4f8b\u5b50\u3002 // > \u8f93\u5165\u6570\u7ec4\u5927\u5c0f\uff1a10 // > sizeof array = 40 // \u5b57\u7b26\u4e32\u53ea\u662f\u4e00\u4e2a\u4ee5NULL\uff080x00\uff09\u5b57\u8282\u4e3a\u7ed3\u5c3e\u7684\u5b57\u7b26\u6570\u7ec4\u3002 // \u5728\u5b57\u7b26\u4e32\u4e2d\u8868\u793a\u4e3a\u7279\u6b8a\u5b57\u7b26'\\0'\u3002 // \uff08\u6211\u4eec\u4e0d\u9700\u8981\u5728\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u4e2d\u5305\u62ec NULL \u5b57\u8282\uff1b // \u7f16\u8bd1\u5668\u4f1a\u628a\u5b83\u63d2\u5165\u5230\u6570\u7ec4\u7684\u672b\u5c3e\uff09\u3002 char a_string[20] = \"This is a string\"; printf(\"%s\\n\", a_string); // %s \u53ef\u4ee5\u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u683c\u5f0f\u5316 printf(\"%d\\n\", a_string[16]); // => 0 // \u5373\uff0c17\u53f7\u5b57\u8282\u4e3a0\uff0818\u300119\u548c20\u4e5f\u662f\u5982\u6b64\uff09 // \u5355\u5f15\u53f7\u95f4\u7684\u5b57\u7b26\u662f\u5b57\u7b26\u5b57\u9762\u91cf // \u5b83\u7684\u7c7b\u578b\u662f`int`\uff0c\u800c *\u4e0d\u662f* `char` // \uff08\u7531\u4e8e\u5386\u53f2\u539f\u56e0\uff09 int cha = 'a'; // \u5408\u6cd5 char chb = 'a'; // \u540c\u6837\u5408\u6cd5 (\u4ece int \u5230 char \u8fdb\u884c\u4e86\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362) // \u591a\u7ef4\u6570\u7ec4: int multi_array[2][5] = { {1, 2, 3, 4, 5}, {6, 7, 8, 9, 0} }; // \u8bbf\u95ee\u5143\u7d20: int array_int = multi_array[0][2]; // => 3 /////////////////////////////////////// // \u8fd0\u7b97\u7b26 /////////////////////////////////////// // \u591a\u4e2a\u53d8\u91cf\u58f0\u660e\u7684\u7b80\u5199: int i1 = 1, i2 = 2; float f1 = 1.0, f2 = 2.0; int b, c; b = c = 0; // \u7b97\u6570\u8fd0\u7b97\u76f4\u63a5\u4e86\u5f53 i1 + i2; // => 3 i2 - i1; // => 1 i2 * i1; // => 2 i1 / i2; // => 0 (0.5, \u4f46\u662f\u622a\u65ad\u4e3a 0) // \u4f60\u9700\u8981\u5c06\u81f3\u5c11\u4e00\u4e2a\u6574\u6570\u8f6c\u6362\u6210\u6d6e\u70b9\u6570\uff0c\u624d\u80fd\u5f97\u5230\u4e00\u4e2a\u6d6e\u70b9\u6570\u7684\u7ed3\u679c (float)i1 / i2; // => 0.5f i1 / (double)i2; // => 0.5 // \u53cc\u7cbe\u5ea6\u6d6e\u70b9\u4e5f\u4e00\u6837 f1 / f2; // => 0.5, \u52a0\u4e0a\u6216\u51cf\u53bb epsilon // \u6d6e\u70b9\u6570\u662f\u7531 IEEE 754 \u6807\u51c6\u5b9a\u4e49\u7684, \u56e0\u6b64\u65e0\u6cd5\u5f88\u597d\u7684\u5b58\u50a8 // \u4f8b\u5982\uff0c\u4ee5\u4e0b\u5185\u5bb9\u4e0d\u4f1a\u4ea7\u751f\u9884\u671f\u7684\u7ed3\u679c //\u56e0\u4e3a0.1\u5728\u8ba1\u7b97\u673a\u5185\u90e8\u53ef\u80fd\u5b9e\u9645\u4e0a\u662f0.0999999999\uff0c //\u800c0.3 \u53ef\u80fd\u88ab\u5b58\u50a8\u4e3a0.300000000001\u3002 (0.1 + 0.1 + 0.1) != 0.3; // => 1 (true) // \u5e76\u4e14\u7531\u4e8e\u4e0a\u8ff0\u539f\u56e0\uff0c\u5b83\u662f\u4e0d\u7b26\u5408\u7ed3\u5408\u5f8b\u7684 1 + (1e123 - 1e123) != (1 + 1e123) - 1e123; // => 1 (true) // \u8fd9\u79cd\u8ba1\u6570\u6cd5\u662f\u6570\u5b57\u7684\u79d1\u5b66\u8ba1\u6570\u6cd5: 1e123 = 1*10^123 // \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5927\u591a\u6570\u7cfb\u7edf\u90fd\u4f7f\u7528IEEE 754\u6765\u8868\u793a\u6d6e\u70b9\u3002 // \u6765\u8868\u793a\u6d6e\u70b9\u3002\u5373\u4f7f\u662f\u7528\u4e8e\u79d1\u5b66\u8ba1\u7b97\u7684python\uff0c\u4e5f\u662f\u5982\u6b64\u3002 //\u6700\u7ec8\u4e5f\u4f1a\u8c03\u7528\u4f7f\u7528IEEE 754\u7684C\u8bed\u8a00\u3002\u8fd9\u6837\u8bf4\u5e76\u4e0d\u662f\u4e3a\u4e86 // \u8868\u660e\u8fd9\u662f\u4e2a\u7cdf\u7cd5\u7684\u5b9e\u73b0\uff0c\u800c\u662f\u4f5c\u4e3a\u4e00\u4e2a\u8b66\u544a // \u5f53\u8fdb\u884c\u6d6e\u70b9\u6bd4\u8f83\u65f6\uff0c\u5fc5\u987b\u8981\u8003\u8651\u4e00\u70b9\u8bef\u5dee\uff08epsilon\uff09\u3002 // \u6c42\u4f59\uff08\u53d6\u6a21\uff09\u4e5f\u5728\u90a3\u91cc\uff0c\u4f46\u662f\u5982\u679c\u53c2\u6570\u662f\u8d1f\u7684\uff0c\u8981\u5c0f\u5fc3\u3002 11 % 3; // => 2 as 11 = 2 + 3*x (x=3) (-11) % 3; // => -2, as one would expect 11 % (-3); // => 2 and not -2, and it's quite counter intuitive // \u6bd4\u8f83\u8fd0\u7b97\u7b26\u6216\u8bb8\u6bd4\u8f83\u719f\u6089, \u4f46\u662f // C \u8bed\u8a00\u5f53\u4e2d\u6ca1\u6709\u5e03\u5c14\u7c7b\u578b. \u6211\u4eec\u7528\u6574\u578b\u66ff\u4ee3. // \uff08C99 \u5f15\u5165\u4e86 stdbool.h \u4e2d\u63d0\u4f9b\u7684_Bool\u7c7b\u578b\uff09 // 0 \u4e3a\u5047\uff0c\u5176\u4ed6\u4efb\u4f55\u5185\u5bb9\u90fd\u662f\u771f\u7684. //\u6bd4\u8f83\u8fd0\u7b97\u7b26\u7684\u8fd4\u56de\u503c\u603b\u662f\u4e3a 0 \u6216 1 3 == 2; // => 0 (false) 3 != 2; // => 1 (true) 3 > 2; // => 1 3 < 2; // => 0 2 <= 2; // => 1 2 >= 2; // => 1 // C \u4e0d\u662f Python\uff0c\u8fde\u7eed\u6bd4\u8f83\u4e0d\u5408\u6cd5 // \u8b66\u544a\uff1a \u4e0b\u9762\u8fd9\u4e00\u884c\u53ef\u4ee5\u88ab\u7f16\u8bd1, \u4f46\u662f\u5b83\u8868\u793a\u7684\u662f `(0 < a) < 2`. // \u8be5\u8868\u8fbe\u5f0f\u6c38\u8fdc\u4e3a\u771f, \u56e0\u4e3a (0 < a) \u53ef\u80fd\u662f 1 \u6216 0 \u4e2d\u7684\u4e00\u4e2a // \u5728\u672c\u4f8b\u4e2d\u4e3a 1\uff0c\u56e0\u4e3a 0 \u5c0f\u4e8e 1 int between_0_and_2 = 0 < a < 2; // \u6539\u7528\uff1a int between_0_and_2 = 0 < a && a < 2; // \u903b\u8f91\u8fd0\u7b97\u7b26\u9002\u7528\u4e8e\u6574\u6570 !3; // => 0 (\u903b\u8f91\u975e) !0; // => 1 1 && 1; // => 1 (\u903b\u8f91\u4e0e) 0 && 1; // => 0 0 || 1; // => 1 (\u903b\u8f91\u6216) 0 || 0; // => 0 // \u4e09\u5143\u6761\u4ef6\u8868\u8fbe\u5f0f ( ? : ) int e = 5; int f = 10; int z; z = (e > f) ? e : f; // => 10 \"\u82e5 e > f \u8fd4\u56de e, \u5426\u5219\u8fd4\u56de f.\" // \u589e\u3001\u51cf\u8fd0\u7b97\u7b26: int j = 0; int s = j++; // \u8fd4\u56de j \u7136\u540e\u589e\u52a0 j. (s = 0, j = 1) s = ++j; // \u589e\u52a0 j \u7136\u540e\u8fd4\u56de j. (s = 2, j = 2) // \u5bf9\u4e8e j-- \u548c --j \u4e5f\u4e00\u6837 // \u4f4d\u8fd0\u7b97\u7b26! ~0x0F; // => 0xFFFFFFF0 (\u6309\u4f4d\u53d6\u53cd, \"1 \u7684\u8865\u7801\",32 \u4f4d\u6574\u6570\u7684\u793a\u4f8b\u7ed3\u679c) 0x0F & 0xF0; // => 0x00 (\u6309\u4f4d\u4e0e) 0x0F | 0xF0; // => 0xFF (\u6309\u4f4d\u6216) 0x04 ^ 0x0F; // => 0x0B (\u6309\u4f4d\u5f02\u6216) 0x01 << 1; // => 0x02 (\u6309\u4f4d\u5de6\u79fb\u4e00\u4f4d) 0x02 >> 1; // => 0x01 (\u6309\u4f4d\u53f3\u79fb\u4e00\u4f4d) // \u79fb\u52a8\u6709\u7b26\u53f7\u6574\u6570\u65f6\u8981\u5c0f\u5fc3 - \u4e0b\u9762\u8fd9\u4e9b\u5185\u5bb9\u65f6\u672a\u5b9a\u4e49\u7684: // - shifting into the sign bit of a signed integer (int a = 1 << 31) // - left-shifting a negative number (int a = -1 << 2) // - shifting by an offset which is >= the width of the type of the LHS: // int a = 1 << 32; // UB if int is 32 bits wide /////////////////////////////////////// // \u63a7\u5236\u7ed3\u6784 /////////////////////////////////////// if (0) { printf(\"I am never run\\n\"); } else if (0) { printf(\"I am also never run\\n\"); } else { printf(\"I print\\n\"); } // While \u5faa\u73af\u662f\u5b58\u5728\u7684 int ii = 0; while (ii < 10) { //\u4efb\u4f55\u5c0f\u4e8e 10 \u7684\u503c\u90fd\u4e3a\u771f printf(\"%d, \", ii++); // ii++ \u5728\u4f7f\u7528\u5176\u5f53\u524d\u503c\u540e\u589e\u52a0ii } // => prints \"0, 1, 2, 3, 4, 5, 6, 7, 8, 9, \" printf(\"\\n\"); int kk = 0; do { printf(\"%d, \", kk); } while (++kk < 10); // ++kk \u5728\u4f7f\u7528\u5176\u5f53\u524d\u503c\u4e4b\u524d\u589e\u52a0ii // => prints \"0, 1, 2, 3, 4, 5, 6, 7, 8, 9, \" printf(\"\\n\"); // For \u5faa\u73af\u4e5f\u4e00\u6837 int jj; for (jj=0; jj < 10; jj++) { printf(\"%d, \", jj); } // => prints \"0, 1, 2, 3, 4, 5, 6, 7, 8, 9, \" printf(\"\\n\"); // *****NOTES*****: // \u5faa\u73af\u548c\u51fd\u6570\u5fc5\u987b\u6709\u4e00\u4e2a\u4e3b\u4f53\u3002\u5982\u679c\u4e0d\u9700\u8981\u4e3b\u4f53\u3002 int i; for (i = 0; i <= 5; i++) { ; // \u7528\u5206\u53f7\u4f5c\u4e3a\u4e3b\u4f53\uff08\u7a7a\u8bed\u53e5\uff09\u3002 } // Or for (i = 0; i <= 5; i++); // \u591a\u9009\u62e9\u5206\u652f: switch() switch (a) { case 0: // \u6807\u7b7e\u9700\u8981\u662f\u5b8c\u6574\u7684*\u5e38\u91cf*\u8868\u8fbe\u5f0f\uff08\u5982\u679a\u4e3e\uff09\u3002 printf(\"Hey, 'a' equals 0!\\n\"); break; // if you don't break, control flow falls over labels case 1: printf(\"Huh, 'a' equals 1!\\n\"); break; // Be careful - without a \"break\", execution continues until the // next \"break\" is reached. case 3: case 4: printf(\"Look at that.. 'a' is either 3, or 4\\n\"); break; default: // if `some_integral_expression` didn't match any of the labels fputs(\"Error!\\n\", stderr); exit(-1); break; } /* Using \"goto\" in C */ typedef enum { false, true } bool; // for C don't have bool as data type before C99 :( bool disaster = false; int i, j; for(i=0; i<100; ++i) for(j=0; j<100; ++j) { if((i + j) >= 150) disaster = true; if(disaster) goto error; // exit both for loops } error: // this is a label that you can \"jump\" to with \"goto error;\" printf(\"Error occurred at i = %d & j = %d.\\n\", i, j); /* https://ideone.com/GuPhd6 this will print out \"Error occurred at i = 51 & j = 99.\" */ /* it is generally considered bad practice to do so, except if you really know what you are doing. See https://en.wikipedia.org/wiki/Spaghetti_code#Meaning */ /////////////////////////////////////// // Typecasting /////////////////////////////////////// // Every value in C has a type, but you can cast one value into another type // if you want (with some constraints). int x_hex = 0x01; // You can assign vars with hex literals // binary is not in the standard, but allowed by some // compilers (x_bin = 0b0010010110) // Casting between types will attempt to preserve their numeric values printf(\"%d\\n\", x_hex); // => Prints 1 printf(\"%d\\n\", (short) x_hex); // => Prints 1 printf(\"%d\\n\", (char) x_hex); // => Prints 1 // If you assign a value greater than a types max val, it will rollover // without warning. printf(\"%d\\n\", (unsigned char) 257); // => 1 (Max char = 255 if char is 8 bits long) // For determining the max value of a `char`, a `signed char` and an `unsigned char`, // respectively, use the CHAR_MAX, SCHAR_MAX and UCHAR_MAX macros from <limits.h> // Integral types can be cast to floating-point types, and vice-versa. printf(\"%f\\n\", (double) 100); // %f always formats a double... printf(\"%f\\n\", (float) 100); // ...even with a float. printf(\"%d\\n\", (char)100.0); /////////////////////////////////////// // Pointers /////////////////////////////////////// // A pointer is a variable declared to store a memory address. Its declaration will // also tell you the type of data it points to. You can retrieve the memory address // of your variables, then mess with them. int x = 0; printf(\"%p\\n\", (void *)&x); // Use & to retrieve the address of a variable // (%p formats an object pointer of type void *) // => Prints some address in memory; // Pointers start with * in their declaration int *px, not_a_pointer; // px is a pointer to an int px = &x; // Stores the address of x in px printf(\"%p\\n\", (void *)px); // => Prints some address in memory printf(\"%zu, %zu\\n\", sizeof(px), sizeof(not_a_pointer)); // => Prints \"8, 4\" on a typical 64-bit system // To retrieve the value at the address a pointer is pointing to, // put * in front to dereference it. // Note: yes, it may be confusing that '*' is used for _both_ declaring a // pointer and dereferencing it. printf(\"%d\\n\", *px); // => Prints 0, the value of x // You can also change the value the pointer is pointing to. // We'll have to wrap the dereference in parenthesis because // ++ has a higher precedence than *. (*px)++; // Increment the value px is pointing to by 1 printf(\"%d\\n\", *px); // => Prints 1 printf(\"%d\\n\", x); // => Prints 1 // Arrays are a good way to allocate a contiguous block of memory int x_array[20]; //declares array of size 20 (cannot change size) int xx; for (xx = 0; xx < 20; xx++) { x_array[xx] = 20 - xx; } // Initialize x_array to 20, 19, 18,... 2, 1 // Declare a pointer of type int and initialize it to point to x_array int* x_ptr = x_array; // x_ptr now points to the first element in the array (the integer 20). // This works because arrays often decay into pointers to their first element. // For example, when an array is passed to a function or is assigned to a pointer, // it decays into (implicitly converted to) a pointer. // Exceptions: when the array is the argument of the `&` (address-of) operator: int arr[10]; int (*ptr_to_arr)[10] = &arr; // &arr is NOT of type `int *`! // It's of type \"pointer to array\" (of ten `int`s). // or when the array is a string literal used for initializing a char array: char otherarr[] = \"foobarbazquirk\"; // or when it's the argument of the `sizeof` or `alignof` operator: int arraythethird[10]; int *ptr = arraythethird; // equivalent with int *ptr = &arr[0]; printf(\"%zu, %zu\\n\", sizeof(arraythethird), sizeof(ptr)); // probably prints \"40, 4\" or \"40, 8\" // Pointers are incremented and decremented based on their type // (this is called pointer arithmetic) printf(\"%d\\n\", *(x_ptr + 1)); // => Prints 19 printf(\"%d\\n\", x_array[1]); // => Prints 19 // You can also dynamically allocate contiguous blocks of memory with the // standard library function malloc, which takes one argument of type size_t // representing the number of bytes to allocate (usually from the heap, although this // may not be true on e.g. embedded systems - the C standard says nothing about it). int *my_ptr = malloc(sizeof(*my_ptr) * 20); for (xx = 0; xx < 20; xx++) { *(my_ptr + xx) = 20 - xx; // my_ptr[xx] = 20-xx } // Initialize memory to 20, 19, 18, 17... 2, 1 (as ints) // Be careful passing user-provided values to malloc! If you want // to be safe, you can use calloc instead (which, unlike malloc, also zeros out the memory) int* my_other_ptr = calloc(20, sizeof(int)); // Note that there is no standard way to get the length of a // dynamically allocated array in C. Because of this, if your arrays are // going to be passed around your program a lot, you need another variable // to keep track of the number of elements (size) of an array. See the // functions section for more info. size_t size = 10; int *my_arr = calloc(size, sizeof(int)); // Add an element to the array size++; my_arr = realloc(my_arr, sizeof(int) * size); if (my_arr == NULL) { //Remember to check for realloc failure! return } my_arr[10] = 5; // Dereferencing memory that you haven't allocated gives // \"unpredictable results\" - the program is said to invoke \"undefined behavior\" printf(\"%d\\n\", *(my_ptr + 21)); // => Prints who-knows-what? It may even crash. // When you're done with a malloc'd block of memory, you need to free it, // or else no one else can use it until your program terminates // (this is called a \"memory leak\"): free(my_ptr); // Strings are arrays of char, but they are usually represented as a // pointer-to-char (which is a pointer to the first element of the array). // It's good practice to use `const char *' when referring to a string literal, // since string literals shall not be modified (i.e. \"foo\"[0] = 'a' is ILLEGAL.) const char *my_str = \"This is my very own string literal\"; printf(\"%c\\n\", *my_str); // => 'T' // This is not the case if the string is an array // (potentially initialized with a string literal) // that resides in writable memory, as in: char foo[] = \"foo\"; foo[0] = 'a'; // this is legal, foo now contains \"aoo\" function_1(); } // end main function /////////////////////////////////////// // Functions /////////////////////////////////////// // Function declaration syntax: // <return type> <function name>(<args>) int add_two_ints(int x1, int x2) { return x1 + x2; // Use return to return a value } /* Functions are call by value. When a function is called, the arguments passed to the function are copies of the original arguments (except arrays). Anything you do to the arguments in the function do not change the value of the original argument where the function was called. Use pointers if you need to edit the original argument values. Example: in-place string reversal */ // A void function returns no value void str_reverse(char *str_in) { char tmp; size_t ii = 0; size_t len = strlen(str_in); // `strlen()` is part of the c standard library // NOTE: length returned by `strlen` DOESN'T include the // terminating NULL byte ('\\0') for (ii = 0; ii < len / 2; ii++) { // in C99 you can directly declare type of `ii` here tmp = str_in[ii]; str_in[ii] = str_in[len - ii - 1]; // ii-th char from end str_in[len - ii - 1] = tmp; } } //NOTE: string.h header file needs to be included to use strlen() /* char c[] = \"This is a test.\"; str_reverse(c); printf(\"%s\\n\", c); // => \".tset a si sihT\" */ /* as we can return only one variable to change values of more than one variables we use call by reference */ void swapTwoNumbers(int *a, int *b) { int temp = *a; *a = *b; *b = temp; } /* int first = 10; int second = 20; printf(\"first: %d\\nsecond: %d\\n\", first, second); swapTwoNumbers(&first, &second); printf(\"first: %d\\nsecond: %d\\n\", first, second); // values will be swapped */ // Return multiple values. // C does not allow for returning multiple values with the return statement. If // you would like to return multiple values, then the caller must pass in the // variables where they would like the returned values to go. These variables must // be passed in as pointers such that the function can modify them. int return_multiple( int *array_of_3, int *ret1, int *ret2, int *ret3) { if(array_of_3 == NULL) return 0; //return error code (false) //de-reference the pointer so we modify its value *ret1 = array_of_3[0]; *ret2 = array_of_3[1]; *ret3 = array_of_3[2]; return 1; //return error code (true) } /* With regards to arrays, they will always be passed to functions as pointers. Even if you statically allocate an array like `arr[10]`, it still gets passed as a pointer to the first element in any function calls. Again, there is no standard way to get the size of a dynamically allocated array in C. */ // Size must be passed! // Otherwise, this function has no way of knowing how big the array is. void printIntArray(int *arr, size_t size) { int i; for (i = 0; i < size; i++) { printf(\"arr[%d] is: %d\\n\", i, arr[i]); } } /* int my_arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }; int size = 10; printIntArray(my_arr, size); // will print \"arr[0] is: 1\" etc */ // if referring to external variables outside function, you should use the extern keyword. int i = 0; void testFunc() { extern int i; //i here is now using external variable i } // make external variables private to source file with static: static int j = 0; //other files using testFunc2() cannot access variable j void testFunc2() { extern int j; } // The static keyword makes a variable inaccessible to code outside the // compilation unit. (On almost all systems, a \"compilation unit\" is a .c // file.) static can apply both to global (to the compilation unit) variables, // functions, and function-local variables. When using static with // function-local variables, the variable is effectively global and retains its // value across function calls, but is only accessible within the function it // is declared in. Additionally, static variables are initialized to 0 if not // declared with some other starting value. //**You may also declare functions as static to make them private** /////////////////////////////////////// // User-defined types and structs /////////////////////////////////////// // Typedefs can be used to create type aliases typedef int my_type; my_type my_type_var = 0; // Structs are just collections of data, the members are allocated sequentially, // in the order they are written: struct rectangle { int width; int height; }; // It's not generally true that // sizeof(struct rectangle) == sizeof(int) + sizeof(int) // due to potential padding between the structure members (this is for alignment // reasons). [1] void function_1() { struct rectangle my_rec; // Access struct members with . my_rec.width = 10; my_rec.height = 20; // You can declare pointers to structs struct rectangle *my_rec_ptr = &my_rec; // Use dereferencing to set struct pointer members... (*my_rec_ptr).width = 30; // ... or even better: prefer the -> shorthand for the sake of readability my_rec_ptr->height = 10; // Same as (*my_rec_ptr).height = 10; } // You can apply a typedef to a struct for convenience typedef struct rectangle rect; int area(rect r) { return r.width * r.height; } // if you have large structs, you can pass them \"by pointer\" to avoid copying // the whole struct: int areaptr(const rect *r) { return r->width * r->height; } /////////////////////////////////////// // Function pointers /////////////////////////////////////// /* At run time, functions are located at known memory addresses. Function pointers are much like any other pointer (they just store a memory address), but can be used to invoke functions directly, and to pass handlers (or callback functions) around. However, definition syntax may be initially confusing. Example: use str_reverse from a pointer */ void str_reverse_through_pointer(char *str_in) { // Define a function pointer variable, named f. void (*f)(char *); // Signature should exactly match the target function. f = &str_reverse; // Assign the address for the actual function (determined at run time) // f = str_reverse; would work as well - functions decay into pointers, similar to arrays (*f)(str_in); // Just calling the function through the pointer // f(str_in); // That's an alternative but equally valid syntax for calling it. } /* As long as function signatures match, you can assign any function to the same pointer. Function pointers are usually typedef'd for simplicity and readability, as follows: */ typedef void (*my_fnp_type)(char *); // Then used when declaring the actual pointer variable: // ... // my_fnp_type f; ///////////////////////////// // Printing characters with printf() ///////////////////////////// //Special characters: /* '\\a'; // alert (bell) character '\\n'; // newline character '\\t'; // tab character (left justifies text) '\\v'; // vertical tab '\\f'; // new page (form feed) '\\r'; // carriage return '\\b'; // backspace character '\\0'; // NULL character. Usually put at end of strings in C. // hello\\n\\0. \\0 used by convention to mark end of string. '\\\\'; // backslash '\\?'; // question mark '\\''; // single quote '\\\"'; // double quote '\\xhh'; // hexadecimal number. Example: '\\xb' = vertical tab character '\\0oo'; // octal number. Example: '\\013' = vertical tab character //print formatting: \"%d\"; // integer \"%3d\"; // integer with minimum of length 3 digits (right justifies text) \"%s\"; // string \"%f\"; // float \"%ld\"; // long \"%3.2f\"; // minimum 3 digits left and 2 digits right decimal float \"%7.4s\"; // (can do with strings too) \"%c\"; // char \"%p\"; // pointer. NOTE: need to (void *)-cast the pointer, before passing // it as an argument to `printf`. \"%x\"; // hexadecimal \"%o\"; // octal \"%%\"; // prints % */ /////////////////////////////////////// // Order of Evaluation /////////////////////////////////////// // From top to bottom, top has higher precedence //---------------------------------------------------// // Operators | Associativity // //---------------------------------------------------// // () [] -> . | left to right // // ! ~ ++ -- + = *(type) sizeof | right to left // // * / % | left to right // // + - | left to right // // << >> | left to right // // < <= > >= | left to right // // == != | left to right // // & | left to right // // ^ | left to right // // | | left to right // // && | left to right // // || | left to right // // ?: | right to left // // = += -= *= /= %= &= ^= |= <<= >>= | right to left // // , | left to right // //---------------------------------------------------// /******************************* Header Files ********************************** Header files are an important part of C as they allow for the connection of C source files and can simplify code and definitions by separating them into separate files. Header files are syntactically similar to C source files but reside in \".h\" files. They can be included in your C source file by using the precompiler command #include \"example.h\", given that example.h exists in the same directory as the C file. */ /* A safe guard to prevent the header from being defined too many times. This */ /* happens in the case of circle dependency, the contents of the header is */ /* already defined. */ #ifndef EXAMPLE_H /* if EXAMPLE_H is not yet defined. */ #define EXAMPLE_H /* Define the macro EXAMPLE_H. */ /* Other headers can be included in headers and therefore transitively */ /* included into files that include this header. */ #include <string.h> /* Like for c source files, macros can be defined in headers */ /* and used in files that include this header file. */ #define EXAMPLE_NAME \"Dennis Ritchie\" /* Function macros can also be defined. */ #define ADD(a, b) ((a) + (b)) /* Notice the parenthesis surrounding the arguments -- this is important to */ /* ensure that a and b don't get expanded in an unexpected way (e.g. consider */ /* MUL(x, y) (x * y); MUL(1 + 2, 3) would expand to (1 + 2 * 3), yielding an */ /* incorrect result) */ /* Structs and typedefs can be used for consistency between files. */ typedef struct Node { int val; struct Node *next; } Node; /* So can enumerations. */ enum traffic_light_state {GREEN, YELLOW, RED}; /* Function prototypes can also be defined here for use in multiple files, */ /* but it is bad practice to define the function in the header. Definitions */ /* should instead be put in a C file. */ Node createLinkedList(int *vals, int len); /* Beyond the above elements, other definitions should be left to a C source */ /* file. Excessive includes or definitions should, also not be contained in */ /* a header file but instead put into separate headers or a C file. */ #endif /* End of the if precompiler directive. */","title":"C"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA/%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/#c","text":"\u6765\u6e90 Learn X in Y minutes // \u5355\u884c\u6ce8\u91ca\u4ee5 // \u5f00\u59cb\uff0c\u4ec5\u9002\u7528\u4e8eC99\u53ca\u4ee5\u540e\u3002 /* \u591a\u884c\u6ce8\u91ca\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff0c\u5bf9\u4e8e C89 \u4e5f\u9002\u7528 */ /* \u591a\u884c\u6ce8\u91ca\u4e0d\u80fd\u88ab\u5d4c\u5957 /* \u52a1\u5fc5\u5c0f\u5fc3 */ // \u8fd9\u6761\u6ce8\u91ca\u5728\u8fd9\u4e00\u884c\u5c31\u7ec8\u6b62\u4e86 */ // \u800c\u4e0d\u662f\u8fd9\u4e00\u884c\uff01 // \u5e38\u91cf\uff1a #define <\u5173\u952e\u5b57> // \u5e38\u91cf\u5b8c\u5168\u5199\u6210\u5927\u5199\u5b57\u6bcd\u662f\u60ef\u4f8b\uff0c\u4e0d\u662f\u5fc5\u987b\u7684\u8981\u6c42 #define DAYS_IN_YEAR 365 // \u679a\u4e3e\u5e38\u91cf\u4e5f\u662f\u58f0\u660e\u5e38\u91cf\u7684\u65b9\u6cd5\u3002 // \u6240\u6709\u7684\u8bed\u53e5\u5fc5\u987b\u4ee5\u5206\u53f7\u7ed3\u675f\u3002 enum days {SUN, MON, TUE, WED, THU, FRI, SAT}; // SUN \u88ab\u8d4b\u503c\u4e3a 0, MON \u88ab\u8d4b\u503c\u4e3a 1, TUE \u88ab\u8d4b\u503c\u4e3a 2, \u4ee5\u6b64\u7c7b\u63a8. // \u679a\u4e3e\u7684\u503c\u662f\u53ef\u4ee5\u88ab\u6307\u5b9a\u7684 enum days {SUN = 1, MON, TUE, WED = 99, THU, FRI, SAT}; // MON \u88ab\u81ea\u52a8\u8d4b\u503c\u4e3a 2, TUE \u88ab\u8d4b\u503c\u4e3a 3, \u4ee5\u6b64\u7c7b\u63a8. // WED \u88ab\u8d4b\u503c\u4e3a 99, THU \u88ab\u8d4b\u503c\u4e3a 100, FRI \u88ab\u8d4b\u503c\u4e3a 101, \u4ee5\u6b64\u7c7b\u63a8. // \u4f7f\u7528 #include \u5bfc\u5165\u5934\u6587\u4ef6 #include <stdlib.h> #include <stdio.h> #include <string.h> // \u5728<\u5c16\u62ec\u53f7>\u4e4b\u95f4\u7684\u6587\u4ef6\u540d\u544a\u8bc9\u7f16\u8bd1\u5668\u8981\u5728\u4f60\u7684\u7cfb\u7edf\u4e2d\u5bfb\u627e // \u5e93\u6216\u8005\u5934\u6587\u4ef6 // \u5bf9\u4e8e\u4f60\u81ea\u5df1\u7684\u5934\u6587\u4ef6\uff0c\u5e94\u8be5\u4f7f\u7528\u53cc\u5f15\u53f7\u800c\u4e0d\u662f\u5c16\u62ec\u53f7\uff0c\u4e14 // \u5e94\u8be5\u63d0\u4f9b\u8def\u5f84 #include \"my_header.h\" // \u672c\u5730\u6587\u4ef6 #include \"../my_lib/my_lib_header.h\" //\u76f8\u5bf9\u8def\u5f84 // \u5728 .h \u6587\u4ef6\u4e2d\u63d0\u524d\u58f0\u660e\u51fd\u6570\u7b7e\u540di\u6216\u8005 // \u5728\u4f60 .c \u6587\u4ef6\u7684\u4e0a\u65b9 void function_1(); int function_2(void); // \u81f3\u5c11\uff0c\u4f60\u5fc5\u987b\u5728\u4efb\u4f55\u51fd\u6570\u4e2d\u4f7f\u7528 \"\u51fd\u6570\u539f\u578b \"\u4e4b\u524d\u58f0\u660e\u5b83\u3002 // \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u539f\u578b\u88ab\u653e\u7f6e\u5728\u6587\u4ef6\u7684\u9876\u90e8\uff0c\u5728\u4efb\u4f55\u51fd\u6570\u5b9a\u4e49\u4e4b\u524d\u3002 int add_two_ints(int x1, int x2); // function prototype // \u5c3d\u7ba1`int add_two_ints(int, int);`\u4e5f\u662f\u6709\u6548\u7684\uff08\u4e0d\u9700\u8981\u7ed9\u53c2\u6570\u547d\u540d\uff09\u3002 // \u5efa\u8bae\u5728\u539f\u578b\u4e2d\u4e5f\u4e3a\u53c2\u6570\u547d\u540d\uff0c\u4ece\u800c\u65b9\u4fbf\u68c0\u67e5\u3002 // \u5982\u679c\u51fd\u6570\u5b9a\u4e49\u5728\u8c03\u7528\u8be5\u51fd\u6570\u7684\u4efb\u4f55\u5176\u4ed6\u51fd\u6570\u4e4b\u524d // \u90a3\u4e48\u51fd\u6570\u539f\u578b\u5c31\u4e0d\u662f\u5fc5\u987b\u7684\u3002\u7136\u800c\uff0c\u6807\u51c6\u7684\u505a\u6cd5\u662f // \u59cb\u7ec8\u5c06\u51fd\u6570\u539f\u578b\u6dfb\u52a0\u5230\u5934\u6587\u4ef6(*.h)\u4e2d\uff0c\u7136\u540e\u5728\u5934\u6587\u4ef6\u4e2d#include\u8be5\u6587\u4ef6\u3002 // \u8fd9\u53ef\u4ee5\u9632\u6b62\u5728\u7f16\u8bd1\u5668\u77e5\u9053\u4e00\u4e2a\u51fd\u6570\u7684\u540d\u5b57\u4e4b\u524d\uff0c\u8be5\u51fd\u6570\u5c31\u88ab\u8c03\u7528\u7684\u95ee\u9898\u3002 // \u9664\u6b64\u4e4b\u5916\uff0c\u5b83\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5e72\u51c0\u7684\u5934\u6587\u4ef6 // \u4ece\u800c\u53ef\u4ee5\u548c\u9879\u76ee\u7684\u5176\u4ed6\u90e8\u5206\u5171\u4eab // \u4f60\u7684\u7a0b\u5e8f\u7684\u5165\u53e3\u662f\u4e00\u4e2a main \u51fd\u6570\uff0c\u5b83\u7684\u8fd4\u56de\u7c7b\u578b\u53ef\u4ee5\u4e3a\u4efb\u610f\u7c7b\u578b // \u7136\u800c\uff0c\u591a\u6570\u64cd\u4f5c\u7cfb\u7edf\u5e0c\u671b\u5b83\u7684\u8fd4\u56de\u503c\u4e3a int \u7c7b\u578b\uff0c\u4ece\u800c // \u7528\u4e8e\u5904\u7406\u9519\u8bef\u4ee3\u7801 int main(void) { // your program } // \u7528\u4e8e\u8fd0\u884c\u4f60\u7684\u7a0b\u5e8f\u7684\u547d\u4ee4\u884c\u53c2\u6570\u4e5f\u88ab\u4f20\u9012\u7ed9 main // argc\u662f\u53c2\u6570\u7684\u6570\u91cf--\u4f60\u7684\u7a0b\u5e8f\u540d\u79f0\u7b97\u4f5c 1 // argv\u662f\u4e00\u4e2a\u5b57\u7b26\u6570\u7ec4--\u5305\u542b\u53c2\u6570\u672c\u8eab // argv[0] = \u4f60\u7684\u7a0b\u5e8f\u540d\u79f0\uff0cargv[1] = \u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u4ee5\u6b64\u7c7b\u63a8 int main (int argc, char** argv) { // \u6253\u5370\u8f93\u51fa\u4f7f\u7528 printf \u610f\u601d\u662f\"\u683c\u5f0f\u5316\u6253\u5370\" // %d \u4ee3\u8868\u6574\u6570, \\n \u4ee3\u8868\u6362\u884c printf(\"%d\\n\", 0); // => \u6253\u5370 0 /////////////////////////////////////// // \u7c7b\u578b /////////////////////////////////////// // \u4e0d\u7b26\u5408 C99 \u6807\u51c6\u7684\u7f16\u8bd1\u5668\u8981\u6c42\u53d8\u91cf\u5fc5\u987b\u5728\u5f53\u524d\u5757\u8303\u56f4\u7684\u9876\u90e8\u58f0\u660e // \u7b26\u5408 C99 \u6807\u51c6\u7684\u7f16\u8bd1\u5668\u5141\u8bb8\u5728\u4f7f\u7528\u6570\u503c\u7684\u5730\u65b9\u8fdb\u884c\u58f0\u660e // \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u53d8\u91cf\u5728\u7b26\u5408 C99 \u6807\u51c6\u7684\u60c5\u51b5\u4e0b\u662f\u52a8\u6001\u58f0\u660e\u7684\u3002 // int\u578b\uff08\u6574\u578b\uff09\u53d8\u91cf\u4e00\u822c\u5360\u7528 4 \u4e2a\u5b57\u8282 (\u4f7f\u7528`sizeof`\u8fd0\u7b97\u7b26\u53ef\u4ee5\u68c0\u67e5) int x_int = 0; // short\u578b\uff08\u77ed\u6574\u578b\uff09\u53d8\u91cf\u4e00\u822c\u5360\u7528 2 \u4e2a\u5b57\u8282 (\u4f7f\u7528`sizeof`\u8fd0\u7b97\u7b26\u53ef\u4ee5\u68c0\u67e5) short x_short = 0; // \u5b57\u7b26\u7c7b\u578b\u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u5904\u7406\u5668\u7684\u6700\u5c0f\u53ef\u5bfb\u5740\u5355\u4f4d\u3002 // \u901a\u5e38\u662f 1 \u4e2a\u5b57\u8282, \u4f46\u5728\u67d0\u4e9b\u7cfb\u7edf\u4e2d\u5b83\u53ef\u4ee5\u66f4\u591a (\u4f8b\u5982\uff0c\u5728\u5fb7\u5dde\u4eea\u5668\u7684 TMS320 \u4e2d\u5b83\u662f 2 \u4e2a\u5b57\u8282). char x_char = 0; char y_char = 'y'; // \u5b57\u7b26\u53d8\u91cf\u7684\u5b57\u9762\u503c\u9700\u8981\u7528\u5355\u5f15\u53f7\u5305\u4f4f // long\u578b\uff08\u957f\u6574\u578b\uff09\u4e00\u822c\u9700\u8981 4 \u4e2a\u5b57\u8282\u5230 8 \u4e2a\u5b57\u8282; \u800clong long\u578b\u5219\u81f3\u5c11\u9700\u8981\u4fdd\u8bc1\u6709 8 \u4e2a\u5b57\u8282\uff0864 \u4f4d\uff09 long x_long = 0; long long x_long_long = 0; // float\u4e00\u822c\u662f\u7528 32 \u4f4d\u8868\u793a\u7684\u6d6e\u70b9\u6570\u5b57 float x_float = 0.0f; // 'f' suffix here denotes floating point literal // double\u4e00\u822c\u662f\u7528 64 \u4f4d\u8868\u793a\u7684\u6d6e\u70b9\u6570\u5b57 double x_double = 0.0; // real numbers without any suffix are doubles // \u6574\u6570\u7c7b\u578b\u4e5f\u53ef\u4ee5\u6709\u65e0\u7b26\u53f7\u7684\u7c7b\u578b\u8868\u793a\u3002\u8fd9\u6837\u8fd9\u4e9b\u53d8\u91cf\u5c31\u65e0\u6cd5\u8868\u793a\u8d1f\u6570 // \u4f46\u662f\u65e0\u7b26\u53f7\u6574\u6570\u6240\u80fd\u8868\u793a\u7684\u8303\u56f4\u5c31\u53ef\u4ee5\u6bd4\u539f\u6765\u7684\u6574\u6570\u5927\u4e00\u4e9b unsigned short ux_short; unsigned int ux_int; unsigned long long ux_long_long; // \u5355\u5f15\u53f7\u5185\u7684\u5b57\u7b26\u662f\u673a\u5668\u7684\u5b57\u7b26\u96c6\u4e2d\u7684\u6574\u6570\u3002 '0' // => \u5728 ASCII \u5b57\u7b26\u96c6\u4e2d\u662f 48 'A' // => \u5728 ASCII \u5b57\u7b26\u96c6\u4e2d\u662f 65 // sizeof(T) \u7ed9\u51fa\u4e86\u7c7b\u578b\u4e3aT\u7684\u53d8\u91cf\u7684\u5927\u5c0f\uff0c\u5355\u4f4d\u4e3a\u5b57\u8282\u3002 // sizeof(obj) \u4ea7\u751f\u8868\u8fbe\u5f0f\uff08\u53d8\u91cf\u3001\u5b57\u9762\u610f\u4e49\u7b49\uff09\u7684\u5927\u5c0f\u3002 printf(\"%zu\\n\", sizeof(int)); // => 4 (\u5728\u591a\u6570 4 \u5b57\u8282\u5b57\u957f\u7684\u673a\u5668\u4e0a) // \u5982\u679c`sizeof`\u7684\u53c2\u6570\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u90a3\u4e48\u8fd9\u4e2a\u53c2\u6570\u4e0d\u4f1a\u88ab\u6f14\u7b97\uff08VLA\u4f8b\u5916\uff0c\u89c1\u4e0b\uff09 // \u5b83\u4ea7\u751f\u7684\u503c\u662f\u7f16\u8bd1\u65f6\u7684\u5e38\u91cf int a = 1; // size_t\u662f\u4e00\u4e2a\u65e0\u7b26\u53f7\u6574\u578b\uff0c\u8868\u793a\u5bf9\u8c61\u7684\u5c3a\u5bf8\uff0c\u81f3\u5c11 2 \u4e2a\u5b57\u8282 size_t size = sizeof(a++); // a++ \u4e0d\u4f1a\u88ab\u6f14\u7b97 printf(\"sizeof(a++) = %zu where a = %d\\n\", size, a); // \u6253\u5370 \"sizeof(a++) = 4 where a = 1\" \uff08\u572832\u4f4d\u67b6\u6784\u4e0a\uff09 // \u6570\u7ec4\u5fc5\u987b\u88ab\u521d\u59cb\u5316\u4e3a\u5177\u4f53\u7684\u957f\u5ea6 char my_char_array[20]; // \u8fd9\u4e2a\u6570\u7ec4\u5360\u636e 1 * 20 = 20 \u5b57\u8282 int my_int_array[20]; // \u8fd9\u4e2a\u6570\u7ec4\u5360\u636e 4 * 20 = 80 \u5b57\u8282 // (\u5047\u8bbe\u4e3a 4 \u5b57\u8282\u5b57\u957f) // \u4f60\u53ef\u4ee5\u5c06\u4e00\u4e2a\u6570\u7ec4\u521d\u59cb\u5316\u4e3a\u96f6: char my_array[20] = {0}; // \u5176\u4e2d\"{0}\"\u90e8\u5206\u88ab\u79f0\u4e3a \"\u6570\u7ec4\u521d\u59cb\u5316\u5668\"\u3002 // \u6ce8\u610f\uff0c\u5982\u679c\u4f60\u5728\u540c\u4e00\u884c\u4e2d\u521d\u59cb\u5316\u6570\u7ec4 // \u4f60\u5c31\u53ef\u4ee5\u4e0d\u660e\u786e\u5730\u58f0\u660e\u6570\u7ec4\u7684\u5927\u5c0f\u3002 // \u6240\u4ee5\uff0c\u4e0b\u9762\u7684\u58f0\u660e\u4e5f\u662f\u5408\u6cd5\u7684\u3002 char my_array[] = {0}; // \u4f46\u662f\uff0c\u7136\u540e\u4f60\u5fc5\u987b\u5728\u8fd0\u884c\u65f6\u8bc4\u4f30\u6570\u7ec4\u7684\u5927\u5c0f\uff0c\u50cf\u8fd9\u6837: size_t my_array_size = sizeof(my_array) / sizeof(my_array[0]); // \u8b66\u544a \u5982\u679c\u4f60\u91c7\u7528\u8fd9\u79cd\u65b9\u6cd5\uff0c\u4f60\u5e94\u8be5\u5728\u5f00\u59cb\u5c06\u6570\u7ec4\u4f20\u7ed9\u51fd\u6570\u4e4b\u524d*\u8bc4\u4f30\u5176\u5927\u5c0f\u3002 //\u4f60\u5f00\u59cb\u5c06\u6570\u7ec4\u4f20\u9012\u7ed9\u51fd\u6570\uff08\u89c1\u540e\u9762\u7684\u8ba8\u8bba\uff09\uff0c\u56e0\u4e3a // \u5f53\u6570\u7ec4\u88ab\u4f20\u9012\u7ed9\u51fd\u6570\u65f6\uff0c\u5b83\u4eec\u4f1a\u88ab \"\u964d\u7ea7 \"\u4e3a\u539f\u59cb\u6307\u9488\u3002 // \u6240\u4ee5\u4e0a\u9762\u7684\u8bed\u53e5\u4f1a\u5728\u51fd\u6570\u4e2d\u4ea7\u751f\u9519\u8bef\u7684\u7ed3\u679c\uff09\u3002 // \u7d22\u5f15\u6570\u7ec4\u548c\u5176\u4ed6\u8bed\u8a00\u7c7b\u4f3c -- \u597d\u5427\uff0c\u5176\u5b9e\u662f\u5176\u4ed6\u7684\u8bed\u8a00\u50cfC my_array[0]; // => 0 // \u6570\u7ec4\u662f\u53ef\u53d8\u7684\uff0c\u5176\u5b9e\u5c31\u662f\u5185\u5b58\u7684\u6620\u5c04\uff01 my_array[1] = 2; printf(\"%d\\n\", my_array[1]); // => 2 // \u5728C99 \uff08C11\u4e2d\u662f\u53ef\u9009\u7279\u6027\uff09\uff0c\u53d8\u957f\u6570\u7ec4\uff08VLA\uff09\u4e5f\u53ef\u4ee5\u58f0\u660e\u957f\u5ea6\u3002 // \u5176\u957f\u5ea6\u4e0d\u9700\u8981\u662f\u7f16\u8bd1\u65f6\u5e38\u91cf\u3002 printf(\"Enter the array size: \"); // \u8be2\u95ee\u7528\u6237\u6570\u7ec4\u957f\u5ea6 int array_size; fscanf(stdin, \"%d\", &array_size); int var_length_array[array_size]; // \u58f0\u660e VLA printf(\"sizeof array = %zu\\n\", sizeof var_length_array); // \u4f8b\u5b50\u3002 // > \u8f93\u5165\u6570\u7ec4\u5927\u5c0f\uff1a10 // > sizeof array = 40 // \u5b57\u7b26\u4e32\u53ea\u662f\u4e00\u4e2a\u4ee5NULL\uff080x00\uff09\u5b57\u8282\u4e3a\u7ed3\u5c3e\u7684\u5b57\u7b26\u6570\u7ec4\u3002 // \u5728\u5b57\u7b26\u4e32\u4e2d\u8868\u793a\u4e3a\u7279\u6b8a\u5b57\u7b26'\\0'\u3002 // \uff08\u6211\u4eec\u4e0d\u9700\u8981\u5728\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u4e2d\u5305\u62ec NULL \u5b57\u8282\uff1b // \u7f16\u8bd1\u5668\u4f1a\u628a\u5b83\u63d2\u5165\u5230\u6570\u7ec4\u7684\u672b\u5c3e\uff09\u3002 char a_string[20] = \"This is a string\"; printf(\"%s\\n\", a_string); // %s \u53ef\u4ee5\u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u683c\u5f0f\u5316 printf(\"%d\\n\", a_string[16]); // => 0 // \u5373\uff0c17\u53f7\u5b57\u8282\u4e3a0\uff0818\u300119\u548c20\u4e5f\u662f\u5982\u6b64\uff09 // \u5355\u5f15\u53f7\u95f4\u7684\u5b57\u7b26\u662f\u5b57\u7b26\u5b57\u9762\u91cf // \u5b83\u7684\u7c7b\u578b\u662f`int`\uff0c\u800c *\u4e0d\u662f* `char` // \uff08\u7531\u4e8e\u5386\u53f2\u539f\u56e0\uff09 int cha = 'a'; // \u5408\u6cd5 char chb = 'a'; // \u540c\u6837\u5408\u6cd5 (\u4ece int \u5230 char \u8fdb\u884c\u4e86\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362) // \u591a\u7ef4\u6570\u7ec4: int multi_array[2][5] = { {1, 2, 3, 4, 5}, {6, 7, 8, 9, 0} }; // \u8bbf\u95ee\u5143\u7d20: int array_int = multi_array[0][2]; // => 3 /////////////////////////////////////// // \u8fd0\u7b97\u7b26 /////////////////////////////////////// // \u591a\u4e2a\u53d8\u91cf\u58f0\u660e\u7684\u7b80\u5199: int i1 = 1, i2 = 2; float f1 = 1.0, f2 = 2.0; int b, c; b = c = 0; // \u7b97\u6570\u8fd0\u7b97\u76f4\u63a5\u4e86\u5f53 i1 + i2; // => 3 i2 - i1; // => 1 i2 * i1; // => 2 i1 / i2; // => 0 (0.5, \u4f46\u662f\u622a\u65ad\u4e3a 0) // \u4f60\u9700\u8981\u5c06\u81f3\u5c11\u4e00\u4e2a\u6574\u6570\u8f6c\u6362\u6210\u6d6e\u70b9\u6570\uff0c\u624d\u80fd\u5f97\u5230\u4e00\u4e2a\u6d6e\u70b9\u6570\u7684\u7ed3\u679c (float)i1 / i2; // => 0.5f i1 / (double)i2; // => 0.5 // \u53cc\u7cbe\u5ea6\u6d6e\u70b9\u4e5f\u4e00\u6837 f1 / f2; // => 0.5, \u52a0\u4e0a\u6216\u51cf\u53bb epsilon // \u6d6e\u70b9\u6570\u662f\u7531 IEEE 754 \u6807\u51c6\u5b9a\u4e49\u7684, \u56e0\u6b64\u65e0\u6cd5\u5f88\u597d\u7684\u5b58\u50a8 // \u4f8b\u5982\uff0c\u4ee5\u4e0b\u5185\u5bb9\u4e0d\u4f1a\u4ea7\u751f\u9884\u671f\u7684\u7ed3\u679c //\u56e0\u4e3a0.1\u5728\u8ba1\u7b97\u673a\u5185\u90e8\u53ef\u80fd\u5b9e\u9645\u4e0a\u662f0.0999999999\uff0c //\u800c0.3 \u53ef\u80fd\u88ab\u5b58\u50a8\u4e3a0.300000000001\u3002 (0.1 + 0.1 + 0.1) != 0.3; // => 1 (true) // \u5e76\u4e14\u7531\u4e8e\u4e0a\u8ff0\u539f\u56e0\uff0c\u5b83\u662f\u4e0d\u7b26\u5408\u7ed3\u5408\u5f8b\u7684 1 + (1e123 - 1e123) != (1 + 1e123) - 1e123; // => 1 (true) // \u8fd9\u79cd\u8ba1\u6570\u6cd5\u662f\u6570\u5b57\u7684\u79d1\u5b66\u8ba1\u6570\u6cd5: 1e123 = 1*10^123 // \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5927\u591a\u6570\u7cfb\u7edf\u90fd\u4f7f\u7528IEEE 754\u6765\u8868\u793a\u6d6e\u70b9\u3002 // \u6765\u8868\u793a\u6d6e\u70b9\u3002\u5373\u4f7f\u662f\u7528\u4e8e\u79d1\u5b66\u8ba1\u7b97\u7684python\uff0c\u4e5f\u662f\u5982\u6b64\u3002 //\u6700\u7ec8\u4e5f\u4f1a\u8c03\u7528\u4f7f\u7528IEEE 754\u7684C\u8bed\u8a00\u3002\u8fd9\u6837\u8bf4\u5e76\u4e0d\u662f\u4e3a\u4e86 // \u8868\u660e\u8fd9\u662f\u4e2a\u7cdf\u7cd5\u7684\u5b9e\u73b0\uff0c\u800c\u662f\u4f5c\u4e3a\u4e00\u4e2a\u8b66\u544a // \u5f53\u8fdb\u884c\u6d6e\u70b9\u6bd4\u8f83\u65f6\uff0c\u5fc5\u987b\u8981\u8003\u8651\u4e00\u70b9\u8bef\u5dee\uff08epsilon\uff09\u3002 // \u6c42\u4f59\uff08\u53d6\u6a21\uff09\u4e5f\u5728\u90a3\u91cc\uff0c\u4f46\u662f\u5982\u679c\u53c2\u6570\u662f\u8d1f\u7684\uff0c\u8981\u5c0f\u5fc3\u3002 11 % 3; // => 2 as 11 = 2 + 3*x (x=3) (-11) % 3; // => -2, as one would expect 11 % (-3); // => 2 and not -2, and it's quite counter intuitive // \u6bd4\u8f83\u8fd0\u7b97\u7b26\u6216\u8bb8\u6bd4\u8f83\u719f\u6089, \u4f46\u662f // C \u8bed\u8a00\u5f53\u4e2d\u6ca1\u6709\u5e03\u5c14\u7c7b\u578b. \u6211\u4eec\u7528\u6574\u578b\u66ff\u4ee3. // \uff08C99 \u5f15\u5165\u4e86 stdbool.h \u4e2d\u63d0\u4f9b\u7684_Bool\u7c7b\u578b\uff09 // 0 \u4e3a\u5047\uff0c\u5176\u4ed6\u4efb\u4f55\u5185\u5bb9\u90fd\u662f\u771f\u7684. //\u6bd4\u8f83\u8fd0\u7b97\u7b26\u7684\u8fd4\u56de\u503c\u603b\u662f\u4e3a 0 \u6216 1 3 == 2; // => 0 (false) 3 != 2; // => 1 (true) 3 > 2; // => 1 3 < 2; // => 0 2 <= 2; // => 1 2 >= 2; // => 1 // C \u4e0d\u662f Python\uff0c\u8fde\u7eed\u6bd4\u8f83\u4e0d\u5408\u6cd5 // \u8b66\u544a\uff1a \u4e0b\u9762\u8fd9\u4e00\u884c\u53ef\u4ee5\u88ab\u7f16\u8bd1, \u4f46\u662f\u5b83\u8868\u793a\u7684\u662f `(0 < a) < 2`. // \u8be5\u8868\u8fbe\u5f0f\u6c38\u8fdc\u4e3a\u771f, \u56e0\u4e3a (0 < a) \u53ef\u80fd\u662f 1 \u6216 0 \u4e2d\u7684\u4e00\u4e2a // \u5728\u672c\u4f8b\u4e2d\u4e3a 1\uff0c\u56e0\u4e3a 0 \u5c0f\u4e8e 1 int between_0_and_2 = 0 < a < 2; // \u6539\u7528\uff1a int between_0_and_2 = 0 < a && a < 2; // \u903b\u8f91\u8fd0\u7b97\u7b26\u9002\u7528\u4e8e\u6574\u6570 !3; // => 0 (\u903b\u8f91\u975e) !0; // => 1 1 && 1; // => 1 (\u903b\u8f91\u4e0e) 0 && 1; // => 0 0 || 1; // => 1 (\u903b\u8f91\u6216) 0 || 0; // => 0 // \u4e09\u5143\u6761\u4ef6\u8868\u8fbe\u5f0f ( ? : ) int e = 5; int f = 10; int z; z = (e > f) ? e : f; // => 10 \"\u82e5 e > f \u8fd4\u56de e, \u5426\u5219\u8fd4\u56de f.\" // \u589e\u3001\u51cf\u8fd0\u7b97\u7b26: int j = 0; int s = j++; // \u8fd4\u56de j \u7136\u540e\u589e\u52a0 j. (s = 0, j = 1) s = ++j; // \u589e\u52a0 j \u7136\u540e\u8fd4\u56de j. (s = 2, j = 2) // \u5bf9\u4e8e j-- \u548c --j \u4e5f\u4e00\u6837 // \u4f4d\u8fd0\u7b97\u7b26! ~0x0F; // => 0xFFFFFFF0 (\u6309\u4f4d\u53d6\u53cd, \"1 \u7684\u8865\u7801\",32 \u4f4d\u6574\u6570\u7684\u793a\u4f8b\u7ed3\u679c) 0x0F & 0xF0; // => 0x00 (\u6309\u4f4d\u4e0e) 0x0F | 0xF0; // => 0xFF (\u6309\u4f4d\u6216) 0x04 ^ 0x0F; // => 0x0B (\u6309\u4f4d\u5f02\u6216) 0x01 << 1; // => 0x02 (\u6309\u4f4d\u5de6\u79fb\u4e00\u4f4d) 0x02 >> 1; // => 0x01 (\u6309\u4f4d\u53f3\u79fb\u4e00\u4f4d) // \u79fb\u52a8\u6709\u7b26\u53f7\u6574\u6570\u65f6\u8981\u5c0f\u5fc3 - \u4e0b\u9762\u8fd9\u4e9b\u5185\u5bb9\u65f6\u672a\u5b9a\u4e49\u7684: // - shifting into the sign bit of a signed integer (int a = 1 << 31) // - left-shifting a negative number (int a = -1 << 2) // - shifting by an offset which is >= the width of the type of the LHS: // int a = 1 << 32; // UB if int is 32 bits wide /////////////////////////////////////// // \u63a7\u5236\u7ed3\u6784 /////////////////////////////////////// if (0) { printf(\"I am never run\\n\"); } else if (0) { printf(\"I am also never run\\n\"); } else { printf(\"I print\\n\"); } // While \u5faa\u73af\u662f\u5b58\u5728\u7684 int ii = 0; while (ii < 10) { //\u4efb\u4f55\u5c0f\u4e8e 10 \u7684\u503c\u90fd\u4e3a\u771f printf(\"%d, \", ii++); // ii++ \u5728\u4f7f\u7528\u5176\u5f53\u524d\u503c\u540e\u589e\u52a0ii } // => prints \"0, 1, 2, 3, 4, 5, 6, 7, 8, 9, \" printf(\"\\n\"); int kk = 0; do { printf(\"%d, \", kk); } while (++kk < 10); // ++kk \u5728\u4f7f\u7528\u5176\u5f53\u524d\u503c\u4e4b\u524d\u589e\u52a0ii // => prints \"0, 1, 2, 3, 4, 5, 6, 7, 8, 9, \" printf(\"\\n\"); // For \u5faa\u73af\u4e5f\u4e00\u6837 int jj; for (jj=0; jj < 10; jj++) { printf(\"%d, \", jj); } // => prints \"0, 1, 2, 3, 4, 5, 6, 7, 8, 9, \" printf(\"\\n\"); // *****NOTES*****: // \u5faa\u73af\u548c\u51fd\u6570\u5fc5\u987b\u6709\u4e00\u4e2a\u4e3b\u4f53\u3002\u5982\u679c\u4e0d\u9700\u8981\u4e3b\u4f53\u3002 int i; for (i = 0; i <= 5; i++) { ; // \u7528\u5206\u53f7\u4f5c\u4e3a\u4e3b\u4f53\uff08\u7a7a\u8bed\u53e5\uff09\u3002 } // Or for (i = 0; i <= 5; i++); // \u591a\u9009\u62e9\u5206\u652f: switch() switch (a) { case 0: // \u6807\u7b7e\u9700\u8981\u662f\u5b8c\u6574\u7684*\u5e38\u91cf*\u8868\u8fbe\u5f0f\uff08\u5982\u679a\u4e3e\uff09\u3002 printf(\"Hey, 'a' equals 0!\\n\"); break; // if you don't break, control flow falls over labels case 1: printf(\"Huh, 'a' equals 1!\\n\"); break; // Be careful - without a \"break\", execution continues until the // next \"break\" is reached. case 3: case 4: printf(\"Look at that.. 'a' is either 3, or 4\\n\"); break; default: // if `some_integral_expression` didn't match any of the labels fputs(\"Error!\\n\", stderr); exit(-1); break; } /* Using \"goto\" in C */ typedef enum { false, true } bool; // for C don't have bool as data type before C99 :( bool disaster = false; int i, j; for(i=0; i<100; ++i) for(j=0; j<100; ++j) { if((i + j) >= 150) disaster = true; if(disaster) goto error; // exit both for loops } error: // this is a label that you can \"jump\" to with \"goto error;\" printf(\"Error occurred at i = %d & j = %d.\\n\", i, j); /* https://ideone.com/GuPhd6 this will print out \"Error occurred at i = 51 & j = 99.\" */ /* it is generally considered bad practice to do so, except if you really know what you are doing. See https://en.wikipedia.org/wiki/Spaghetti_code#Meaning */ /////////////////////////////////////// // Typecasting /////////////////////////////////////// // Every value in C has a type, but you can cast one value into another type // if you want (with some constraints). int x_hex = 0x01; // You can assign vars with hex literals // binary is not in the standard, but allowed by some // compilers (x_bin = 0b0010010110) // Casting between types will attempt to preserve their numeric values printf(\"%d\\n\", x_hex); // => Prints 1 printf(\"%d\\n\", (short) x_hex); // => Prints 1 printf(\"%d\\n\", (char) x_hex); // => Prints 1 // If you assign a value greater than a types max val, it will rollover // without warning. printf(\"%d\\n\", (unsigned char) 257); // => 1 (Max char = 255 if char is 8 bits long) // For determining the max value of a `char`, a `signed char` and an `unsigned char`, // respectively, use the CHAR_MAX, SCHAR_MAX and UCHAR_MAX macros from <limits.h> // Integral types can be cast to floating-point types, and vice-versa. printf(\"%f\\n\", (double) 100); // %f always formats a double... printf(\"%f\\n\", (float) 100); // ...even with a float. printf(\"%d\\n\", (char)100.0); /////////////////////////////////////// // Pointers /////////////////////////////////////// // A pointer is a variable declared to store a memory address. Its declaration will // also tell you the type of data it points to. You can retrieve the memory address // of your variables, then mess with them. int x = 0; printf(\"%p\\n\", (void *)&x); // Use & to retrieve the address of a variable // (%p formats an object pointer of type void *) // => Prints some address in memory; // Pointers start with * in their declaration int *px, not_a_pointer; // px is a pointer to an int px = &x; // Stores the address of x in px printf(\"%p\\n\", (void *)px); // => Prints some address in memory printf(\"%zu, %zu\\n\", sizeof(px), sizeof(not_a_pointer)); // => Prints \"8, 4\" on a typical 64-bit system // To retrieve the value at the address a pointer is pointing to, // put * in front to dereference it. // Note: yes, it may be confusing that '*' is used for _both_ declaring a // pointer and dereferencing it. printf(\"%d\\n\", *px); // => Prints 0, the value of x // You can also change the value the pointer is pointing to. // We'll have to wrap the dereference in parenthesis because // ++ has a higher precedence than *. (*px)++; // Increment the value px is pointing to by 1 printf(\"%d\\n\", *px); // => Prints 1 printf(\"%d\\n\", x); // => Prints 1 // Arrays are a good way to allocate a contiguous block of memory int x_array[20]; //declares array of size 20 (cannot change size) int xx; for (xx = 0; xx < 20; xx++) { x_array[xx] = 20 - xx; } // Initialize x_array to 20, 19, 18,... 2, 1 // Declare a pointer of type int and initialize it to point to x_array int* x_ptr = x_array; // x_ptr now points to the first element in the array (the integer 20). // This works because arrays often decay into pointers to their first element. // For example, when an array is passed to a function or is assigned to a pointer, // it decays into (implicitly converted to) a pointer. // Exceptions: when the array is the argument of the `&` (address-of) operator: int arr[10]; int (*ptr_to_arr)[10] = &arr; // &arr is NOT of type `int *`! // It's of type \"pointer to array\" (of ten `int`s). // or when the array is a string literal used for initializing a char array: char otherarr[] = \"foobarbazquirk\"; // or when it's the argument of the `sizeof` or `alignof` operator: int arraythethird[10]; int *ptr = arraythethird; // equivalent with int *ptr = &arr[0]; printf(\"%zu, %zu\\n\", sizeof(arraythethird), sizeof(ptr)); // probably prints \"40, 4\" or \"40, 8\" // Pointers are incremented and decremented based on their type // (this is called pointer arithmetic) printf(\"%d\\n\", *(x_ptr + 1)); // => Prints 19 printf(\"%d\\n\", x_array[1]); // => Prints 19 // You can also dynamically allocate contiguous blocks of memory with the // standard library function malloc, which takes one argument of type size_t // representing the number of bytes to allocate (usually from the heap, although this // may not be true on e.g. embedded systems - the C standard says nothing about it). int *my_ptr = malloc(sizeof(*my_ptr) * 20); for (xx = 0; xx < 20; xx++) { *(my_ptr + xx) = 20 - xx; // my_ptr[xx] = 20-xx } // Initialize memory to 20, 19, 18, 17... 2, 1 (as ints) // Be careful passing user-provided values to malloc! If you want // to be safe, you can use calloc instead (which, unlike malloc, also zeros out the memory) int* my_other_ptr = calloc(20, sizeof(int)); // Note that there is no standard way to get the length of a // dynamically allocated array in C. Because of this, if your arrays are // going to be passed around your program a lot, you need another variable // to keep track of the number of elements (size) of an array. See the // functions section for more info. size_t size = 10; int *my_arr = calloc(size, sizeof(int)); // Add an element to the array size++; my_arr = realloc(my_arr, sizeof(int) * size); if (my_arr == NULL) { //Remember to check for realloc failure! return } my_arr[10] = 5; // Dereferencing memory that you haven't allocated gives // \"unpredictable results\" - the program is said to invoke \"undefined behavior\" printf(\"%d\\n\", *(my_ptr + 21)); // => Prints who-knows-what? It may even crash. // When you're done with a malloc'd block of memory, you need to free it, // or else no one else can use it until your program terminates // (this is called a \"memory leak\"): free(my_ptr); // Strings are arrays of char, but they are usually represented as a // pointer-to-char (which is a pointer to the first element of the array). // It's good practice to use `const char *' when referring to a string literal, // since string literals shall not be modified (i.e. \"foo\"[0] = 'a' is ILLEGAL.) const char *my_str = \"This is my very own string literal\"; printf(\"%c\\n\", *my_str); // => 'T' // This is not the case if the string is an array // (potentially initialized with a string literal) // that resides in writable memory, as in: char foo[] = \"foo\"; foo[0] = 'a'; // this is legal, foo now contains \"aoo\" function_1(); } // end main function /////////////////////////////////////// // Functions /////////////////////////////////////// // Function declaration syntax: // <return type> <function name>(<args>) int add_two_ints(int x1, int x2) { return x1 + x2; // Use return to return a value } /* Functions are call by value. When a function is called, the arguments passed to the function are copies of the original arguments (except arrays). Anything you do to the arguments in the function do not change the value of the original argument where the function was called. Use pointers if you need to edit the original argument values. Example: in-place string reversal */ // A void function returns no value void str_reverse(char *str_in) { char tmp; size_t ii = 0; size_t len = strlen(str_in); // `strlen()` is part of the c standard library // NOTE: length returned by `strlen` DOESN'T include the // terminating NULL byte ('\\0') for (ii = 0; ii < len / 2; ii++) { // in C99 you can directly declare type of `ii` here tmp = str_in[ii]; str_in[ii] = str_in[len - ii - 1]; // ii-th char from end str_in[len - ii - 1] = tmp; } } //NOTE: string.h header file needs to be included to use strlen() /* char c[] = \"This is a test.\"; str_reverse(c); printf(\"%s\\n\", c); // => \".tset a si sihT\" */ /* as we can return only one variable to change values of more than one variables we use call by reference */ void swapTwoNumbers(int *a, int *b) { int temp = *a; *a = *b; *b = temp; } /* int first = 10; int second = 20; printf(\"first: %d\\nsecond: %d\\n\", first, second); swapTwoNumbers(&first, &second); printf(\"first: %d\\nsecond: %d\\n\", first, second); // values will be swapped */ // Return multiple values. // C does not allow for returning multiple values with the return statement. If // you would like to return multiple values, then the caller must pass in the // variables where they would like the returned values to go. These variables must // be passed in as pointers such that the function can modify them. int return_multiple( int *array_of_3, int *ret1, int *ret2, int *ret3) { if(array_of_3 == NULL) return 0; //return error code (false) //de-reference the pointer so we modify its value *ret1 = array_of_3[0]; *ret2 = array_of_3[1]; *ret3 = array_of_3[2]; return 1; //return error code (true) } /* With regards to arrays, they will always be passed to functions as pointers. Even if you statically allocate an array like `arr[10]`, it still gets passed as a pointer to the first element in any function calls. Again, there is no standard way to get the size of a dynamically allocated array in C. */ // Size must be passed! // Otherwise, this function has no way of knowing how big the array is. void printIntArray(int *arr, size_t size) { int i; for (i = 0; i < size; i++) { printf(\"arr[%d] is: %d\\n\", i, arr[i]); } } /* int my_arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }; int size = 10; printIntArray(my_arr, size); // will print \"arr[0] is: 1\" etc */ // if referring to external variables outside function, you should use the extern keyword. int i = 0; void testFunc() { extern int i; //i here is now using external variable i } // make external variables private to source file with static: static int j = 0; //other files using testFunc2() cannot access variable j void testFunc2() { extern int j; } // The static keyword makes a variable inaccessible to code outside the // compilation unit. (On almost all systems, a \"compilation unit\" is a .c // file.) static can apply both to global (to the compilation unit) variables, // functions, and function-local variables. When using static with // function-local variables, the variable is effectively global and retains its // value across function calls, but is only accessible within the function it // is declared in. Additionally, static variables are initialized to 0 if not // declared with some other starting value. //**You may also declare functions as static to make them private** /////////////////////////////////////// // User-defined types and structs /////////////////////////////////////// // Typedefs can be used to create type aliases typedef int my_type; my_type my_type_var = 0; // Structs are just collections of data, the members are allocated sequentially, // in the order they are written: struct rectangle { int width; int height; }; // It's not generally true that // sizeof(struct rectangle) == sizeof(int) + sizeof(int) // due to potential padding between the structure members (this is for alignment // reasons). [1] void function_1() { struct rectangle my_rec; // Access struct members with . my_rec.width = 10; my_rec.height = 20; // You can declare pointers to structs struct rectangle *my_rec_ptr = &my_rec; // Use dereferencing to set struct pointer members... (*my_rec_ptr).width = 30; // ... or even better: prefer the -> shorthand for the sake of readability my_rec_ptr->height = 10; // Same as (*my_rec_ptr).height = 10; } // You can apply a typedef to a struct for convenience typedef struct rectangle rect; int area(rect r) { return r.width * r.height; } // if you have large structs, you can pass them \"by pointer\" to avoid copying // the whole struct: int areaptr(const rect *r) { return r->width * r->height; } /////////////////////////////////////// // Function pointers /////////////////////////////////////// /* At run time, functions are located at known memory addresses. Function pointers are much like any other pointer (they just store a memory address), but can be used to invoke functions directly, and to pass handlers (or callback functions) around. However, definition syntax may be initially confusing. Example: use str_reverse from a pointer */ void str_reverse_through_pointer(char *str_in) { // Define a function pointer variable, named f. void (*f)(char *); // Signature should exactly match the target function. f = &str_reverse; // Assign the address for the actual function (determined at run time) // f = str_reverse; would work as well - functions decay into pointers, similar to arrays (*f)(str_in); // Just calling the function through the pointer // f(str_in); // That's an alternative but equally valid syntax for calling it. } /* As long as function signatures match, you can assign any function to the same pointer. Function pointers are usually typedef'd for simplicity and readability, as follows: */ typedef void (*my_fnp_type)(char *); // Then used when declaring the actual pointer variable: // ... // my_fnp_type f; ///////////////////////////// // Printing characters with printf() ///////////////////////////// //Special characters: /* '\\a'; // alert (bell) character '\\n'; // newline character '\\t'; // tab character (left justifies text) '\\v'; // vertical tab '\\f'; // new page (form feed) '\\r'; // carriage return '\\b'; // backspace character '\\0'; // NULL character. Usually put at end of strings in C. // hello\\n\\0. \\0 used by convention to mark end of string. '\\\\'; // backslash '\\?'; // question mark '\\''; // single quote '\\\"'; // double quote '\\xhh'; // hexadecimal number. Example: '\\xb' = vertical tab character '\\0oo'; // octal number. Example: '\\013' = vertical tab character //print formatting: \"%d\"; // integer \"%3d\"; // integer with minimum of length 3 digits (right justifies text) \"%s\"; // string \"%f\"; // float \"%ld\"; // long \"%3.2f\"; // minimum 3 digits left and 2 digits right decimal float \"%7.4s\"; // (can do with strings too) \"%c\"; // char \"%p\"; // pointer. NOTE: need to (void *)-cast the pointer, before passing // it as an argument to `printf`. \"%x\"; // hexadecimal \"%o\"; // octal \"%%\"; // prints % */ /////////////////////////////////////// // Order of Evaluation /////////////////////////////////////// // From top to bottom, top has higher precedence //---------------------------------------------------// // Operators | Associativity // //---------------------------------------------------// // () [] -> . | left to right // // ! ~ ++ -- + = *(type) sizeof | right to left // // * / % | left to right // // + - | left to right // // << >> | left to right // // < <= > >= | left to right // // == != | left to right // // & | left to right // // ^ | left to right // // | | left to right // // && | left to right // // || | left to right // // ?: | right to left // // = += -= *= /= %= &= ^= |= <<= >>= | right to left // // , | left to right // //---------------------------------------------------// /******************************* Header Files ********************************** Header files are an important part of C as they allow for the connection of C source files and can simplify code and definitions by separating them into separate files. Header files are syntactically similar to C source files but reside in \".h\" files. They can be included in your C source file by using the precompiler command #include \"example.h\", given that example.h exists in the same directory as the C file. */ /* A safe guard to prevent the header from being defined too many times. This */ /* happens in the case of circle dependency, the contents of the header is */ /* already defined. */ #ifndef EXAMPLE_H /* if EXAMPLE_H is not yet defined. */ #define EXAMPLE_H /* Define the macro EXAMPLE_H. */ /* Other headers can be included in headers and therefore transitively */ /* included into files that include this header. */ #include <string.h> /* Like for c source files, macros can be defined in headers */ /* and used in files that include this header file. */ #define EXAMPLE_NAME \"Dennis Ritchie\" /* Function macros can also be defined. */ #define ADD(a, b) ((a) + (b)) /* Notice the parenthesis surrounding the arguments -- this is important to */ /* ensure that a and b don't get expanded in an unexpected way (e.g. consider */ /* MUL(x, y) (x * y); MUL(1 + 2, 3) would expand to (1 + 2 * 3), yielding an */ /* incorrect result) */ /* Structs and typedefs can be used for consistency between files. */ typedef struct Node { int val; struct Node *next; } Node; /* So can enumerations. */ enum traffic_light_state {GREEN, YELLOW, RED}; /* Function prototypes can also be defined here for use in multiple files, */ /* but it is bad practice to define the function in the header. Definitions */ /* should instead be put in a C file. */ Node createLinkedList(int *vals, int len); /* Beyond the above elements, other definitions should be left to a C source */ /* file. Excessive includes or definitions should, also not be contained in */ /* a header file but instead put into separate headers or a C file. */ #endif /* End of the if precompiler directive. */","title":"C"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA/%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Cpp/","text":"","title":"Cpp"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA/%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/","text":"","title":"Go"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA/%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/","text":"","title":"Java"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA/%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/","text":"","title":"Python"}]}